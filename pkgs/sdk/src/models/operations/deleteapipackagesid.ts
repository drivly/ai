/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiPackagesIdRequest = {
  /**
   * The ID of the Package
   */
  id: string;
};

/**
 * Successfully deleted
 */
export type DeleteApiPackagesIdResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiPackagesIdRequest$inboundSchema: z.ZodType<
  DeleteApiPackagesIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteApiPackagesIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteApiPackagesIdRequest$outboundSchema: z.ZodType<
  DeleteApiPackagesIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiPackagesIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiPackagesIdRequest$ {
  /** @deprecated use `DeleteApiPackagesIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApiPackagesIdRequest$inboundSchema;
  /** @deprecated use `DeleteApiPackagesIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApiPackagesIdRequest$outboundSchema;
  /** @deprecated use `DeleteApiPackagesIdRequest$Outbound` instead. */
  export type Outbound = DeleteApiPackagesIdRequest$Outbound;
}

export function deleteApiPackagesIdRequestToJSON(
  deleteApiPackagesIdRequest: DeleteApiPackagesIdRequest,
): string {
  return JSON.stringify(
    DeleteApiPackagesIdRequest$outboundSchema.parse(deleteApiPackagesIdRequest),
  );
}

export function deleteApiPackagesIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiPackagesIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiPackagesIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiPackagesIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteApiPackagesIdResponseBody$inboundSchema: z.ZodType<
  DeleteApiPackagesIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteApiPackagesIdResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiPackagesIdResponseBody$outboundSchema: z.ZodType<
  DeleteApiPackagesIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteApiPackagesIdResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiPackagesIdResponseBody$ {
  /** @deprecated use `DeleteApiPackagesIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteApiPackagesIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteApiPackagesIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteApiPackagesIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteApiPackagesIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteApiPackagesIdResponseBody$Outbound;
}

export function deleteApiPackagesIdResponseBodyToJSON(
  deleteApiPackagesIdResponseBody: DeleteApiPackagesIdResponseBody,
): string {
  return JSON.stringify(
    DeleteApiPackagesIdResponseBody$outboundSchema.parse(
      deleteApiPackagesIdResponseBody,
    ),
  );
}

export function deleteApiPackagesIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiPackagesIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiPackagesIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiPackagesIdResponseBody' from JSON`,
  );
}

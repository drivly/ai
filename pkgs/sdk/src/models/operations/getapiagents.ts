/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiAgentsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Agents = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiAgentsResponseBody = {
  links?: GetApiAgentsLinks | undefined;
  agents?: { [k: string]: Agents } | undefined;
};

/** @internal */
export const GetApiAgentsLinks$inboundSchema: z.ZodType<
  GetApiAgentsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiAgentsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiAgentsLinks$outboundSchema: z.ZodType<
  GetApiAgentsLinks$Outbound,
  z.ZodTypeDef,
  GetApiAgentsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsLinks$ {
  /** @deprecated use `GetApiAgentsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentsLinks$inboundSchema;
  /** @deprecated use `GetApiAgentsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentsLinks$outboundSchema;
  /** @deprecated use `GetApiAgentsLinks$Outbound` instead. */
  export type Outbound = GetApiAgentsLinks$Outbound;
}

export function getApiAgentsLinksToJSON(
  getApiAgentsLinks: GetApiAgentsLinks,
): string {
  return JSON.stringify(
    GetApiAgentsLinks$outboundSchema.parse(getApiAgentsLinks),
  );
}

export function getApiAgentsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsLinks' from JSON`,
  );
}

/** @internal */
export const Agents$inboundSchema: z.ZodType<Agents, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
  });

/** @internal */
export type Agents$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Agents$outboundSchema: z.ZodType<
  Agents$Outbound,
  z.ZodTypeDef,
  Agents
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Agents$ {
  /** @deprecated use `Agents$inboundSchema` instead. */
  export const inboundSchema = Agents$inboundSchema;
  /** @deprecated use `Agents$outboundSchema` instead. */
  export const outboundSchema = Agents$outboundSchema;
  /** @deprecated use `Agents$Outbound` instead. */
  export type Outbound = Agents$Outbound;
}

export function agentsToJSON(agents: Agents): string {
  return JSON.stringify(Agents$outboundSchema.parse(agents));
}

export function agentsFromJSON(
  jsonString: string,
): SafeParseResult<Agents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Agents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Agents' from JSON`,
  );
}

/** @internal */
export const GetApiAgentsResponseBody$inboundSchema: z.ZodType<
  GetApiAgentsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiAgentsLinks$inboundSchema).optional(),
  agents: z.record(z.lazy(() => Agents$inboundSchema)).optional(),
});

/** @internal */
export type GetApiAgentsResponseBody$Outbound = {
  links?: GetApiAgentsLinks$Outbound | undefined;
  agents?: { [k: string]: Agents$Outbound } | undefined;
};

/** @internal */
export const GetApiAgentsResponseBody$outboundSchema: z.ZodType<
  GetApiAgentsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiAgentsResponseBody
> = z.object({
  links: z.lazy(() => GetApiAgentsLinks$outboundSchema).optional(),
  agents: z.record(z.lazy(() => Agents$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiAgentsResponseBody$ {
  /** @deprecated use `GetApiAgentsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiAgentsResponseBody$inboundSchema;
  /** @deprecated use `GetApiAgentsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiAgentsResponseBody$outboundSchema;
  /** @deprecated use `GetApiAgentsResponseBody$Outbound` instead. */
  export type Outbound = GetApiAgentsResponseBody$Outbound;
}

export function getApiAgentsResponseBodyToJSON(
  getApiAgentsResponseBody: GetApiAgentsResponseBody,
): string {
  return JSON.stringify(
    GetApiAgentsResponseBody$outboundSchema.parse(getApiAgentsResponseBody),
  );
}

export function getApiAgentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiAgentsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiAgentsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiAgentsResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiWebhooksLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Webhooks = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiWebhooksResponseBody = {
  links?: GetApiWebhooksLinks | undefined;
  webhooks?: { [k: string]: Webhooks } | undefined;
};

/** @internal */
export const GetApiWebhooksLinks$inboundSchema: z.ZodType<
  GetApiWebhooksLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiWebhooksLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiWebhooksLinks$outboundSchema: z.ZodType<
  GetApiWebhooksLinks$Outbound,
  z.ZodTypeDef,
  GetApiWebhooksLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWebhooksLinks$ {
  /** @deprecated use `GetApiWebhooksLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiWebhooksLinks$inboundSchema;
  /** @deprecated use `GetApiWebhooksLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiWebhooksLinks$outboundSchema;
  /** @deprecated use `GetApiWebhooksLinks$Outbound` instead. */
  export type Outbound = GetApiWebhooksLinks$Outbound;
}

export function getApiWebhooksLinksToJSON(
  getApiWebhooksLinks: GetApiWebhooksLinks,
): string {
  return JSON.stringify(
    GetApiWebhooksLinks$outboundSchema.parse(getApiWebhooksLinks),
  );
}

export function getApiWebhooksLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiWebhooksLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiWebhooksLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiWebhooksLinks' from JSON`,
  );
}

/** @internal */
export const Webhooks$inboundSchema: z.ZodType<
  Webhooks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Webhooks$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Webhooks$outboundSchema: z.ZodType<
  Webhooks$Outbound,
  z.ZodTypeDef,
  Webhooks
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Webhooks$ {
  /** @deprecated use `Webhooks$inboundSchema` instead. */
  export const inboundSchema = Webhooks$inboundSchema;
  /** @deprecated use `Webhooks$outboundSchema` instead. */
  export const outboundSchema = Webhooks$outboundSchema;
  /** @deprecated use `Webhooks$Outbound` instead. */
  export type Outbound = Webhooks$Outbound;
}

export function webhooksToJSON(webhooks: Webhooks): string {
  return JSON.stringify(Webhooks$outboundSchema.parse(webhooks));
}

export function webhooksFromJSON(
  jsonString: string,
): SafeParseResult<Webhooks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Webhooks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Webhooks' from JSON`,
  );
}

/** @internal */
export const GetApiWebhooksResponseBody$inboundSchema: z.ZodType<
  GetApiWebhooksResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiWebhooksLinks$inboundSchema).optional(),
  webhooks: z.record(z.lazy(() => Webhooks$inboundSchema)).optional(),
});

/** @internal */
export type GetApiWebhooksResponseBody$Outbound = {
  links?: GetApiWebhooksLinks$Outbound | undefined;
  webhooks?: { [k: string]: Webhooks$Outbound } | undefined;
};

/** @internal */
export const GetApiWebhooksResponseBody$outboundSchema: z.ZodType<
  GetApiWebhooksResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiWebhooksResponseBody
> = z.object({
  links: z.lazy(() => GetApiWebhooksLinks$outboundSchema).optional(),
  webhooks: z.record(z.lazy(() => Webhooks$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWebhooksResponseBody$ {
  /** @deprecated use `GetApiWebhooksResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiWebhooksResponseBody$inboundSchema;
  /** @deprecated use `GetApiWebhooksResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiWebhooksResponseBody$outboundSchema;
  /** @deprecated use `GetApiWebhooksResponseBody$Outbound` instead. */
  export type Outbound = GetApiWebhooksResponseBody$Outbound;
}

export function getApiWebhooksResponseBodyToJSON(
  getApiWebhooksResponseBody: GetApiWebhooksResponseBody,
): string {
  return JSON.stringify(
    GetApiWebhooksResponseBody$outboundSchema.parse(getApiWebhooksResponseBody),
  );
}

export function getApiWebhooksResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiWebhooksResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiWebhooksResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiWebhooksResponseBody' from JSON`,
  );
}

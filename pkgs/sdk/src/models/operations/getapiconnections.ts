/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiConnectionsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Connections = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiConnectionsResponseBody = {
  links?: GetApiConnectionsLinks | undefined;
  connections?: { [k: string]: Connections } | undefined;
};

/** @internal */
export const GetApiConnectionsLinks$inboundSchema: z.ZodType<
  GetApiConnectionsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiConnectionsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiConnectionsLinks$outboundSchema: z.ZodType<
  GetApiConnectionsLinks$Outbound,
  z.ZodTypeDef,
  GetApiConnectionsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiConnectionsLinks$ {
  /** @deprecated use `GetApiConnectionsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiConnectionsLinks$inboundSchema;
  /** @deprecated use `GetApiConnectionsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiConnectionsLinks$outboundSchema;
  /** @deprecated use `GetApiConnectionsLinks$Outbound` instead. */
  export type Outbound = GetApiConnectionsLinks$Outbound;
}

export function getApiConnectionsLinksToJSON(
  getApiConnectionsLinks: GetApiConnectionsLinks,
): string {
  return JSON.stringify(
    GetApiConnectionsLinks$outboundSchema.parse(getApiConnectionsLinks),
  );
}

export function getApiConnectionsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiConnectionsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiConnectionsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiConnectionsLinks' from JSON`,
  );
}

/** @internal */
export const Connections$inboundSchema: z.ZodType<
  Connections,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Connections$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Connections$outboundSchema: z.ZodType<
  Connections$Outbound,
  z.ZodTypeDef,
  Connections
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Connections$ {
  /** @deprecated use `Connections$inboundSchema` instead. */
  export const inboundSchema = Connections$inboundSchema;
  /** @deprecated use `Connections$outboundSchema` instead. */
  export const outboundSchema = Connections$outboundSchema;
  /** @deprecated use `Connections$Outbound` instead. */
  export type Outbound = Connections$Outbound;
}

export function connectionsToJSON(connections: Connections): string {
  return JSON.stringify(Connections$outboundSchema.parse(connections));
}

export function connectionsFromJSON(
  jsonString: string,
): SafeParseResult<Connections, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Connections$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Connections' from JSON`,
  );
}

/** @internal */
export const GetApiConnectionsResponseBody$inboundSchema: z.ZodType<
  GetApiConnectionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiConnectionsLinks$inboundSchema).optional(),
  connections: z.record(z.lazy(() => Connections$inboundSchema)).optional(),
});

/** @internal */
export type GetApiConnectionsResponseBody$Outbound = {
  links?: GetApiConnectionsLinks$Outbound | undefined;
  connections?: { [k: string]: Connections$Outbound } | undefined;
};

/** @internal */
export const GetApiConnectionsResponseBody$outboundSchema: z.ZodType<
  GetApiConnectionsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiConnectionsResponseBody
> = z.object({
  links: z.lazy(() => GetApiConnectionsLinks$outboundSchema).optional(),
  connections: z.record(z.lazy(() => Connections$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiConnectionsResponseBody$ {
  /** @deprecated use `GetApiConnectionsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiConnectionsResponseBody$inboundSchema;
  /** @deprecated use `GetApiConnectionsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiConnectionsResponseBody$outboundSchema;
  /** @deprecated use `GetApiConnectionsResponseBody$Outbound` instead. */
  export type Outbound = GetApiConnectionsResponseBody$Outbound;
}

export function getApiConnectionsResponseBodyToJSON(
  getApiConnectionsResponseBody: GetApiConnectionsResponseBody,
): string {
  return JSON.stringify(
    GetApiConnectionsResponseBody$outboundSchema.parse(
      getApiConnectionsResponseBody,
    ),
  );
}

export function getApiConnectionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiConnectionsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiConnectionsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiConnectionsResponseBody' from JSON`,
  );
}

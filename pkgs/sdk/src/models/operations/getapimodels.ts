/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiModelsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Models = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiModelsResponseBody = {
  links?: GetApiModelsLinks | undefined;
  models?: { [k: string]: Models } | undefined;
};

/** @internal */
export const GetApiModelsLinks$inboundSchema: z.ZodType<
  GetApiModelsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiModelsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiModelsLinks$outboundSchema: z.ZodType<
  GetApiModelsLinks$Outbound,
  z.ZodTypeDef,
  GetApiModelsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiModelsLinks$ {
  /** @deprecated use `GetApiModelsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiModelsLinks$inboundSchema;
  /** @deprecated use `GetApiModelsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiModelsLinks$outboundSchema;
  /** @deprecated use `GetApiModelsLinks$Outbound` instead. */
  export type Outbound = GetApiModelsLinks$Outbound;
}

export function getApiModelsLinksToJSON(
  getApiModelsLinks: GetApiModelsLinks,
): string {
  return JSON.stringify(
    GetApiModelsLinks$outboundSchema.parse(getApiModelsLinks),
  );
}

export function getApiModelsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiModelsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiModelsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiModelsLinks' from JSON`,
  );
}

/** @internal */
export const Models$inboundSchema: z.ZodType<Models, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
  });

/** @internal */
export type Models$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Models$outboundSchema: z.ZodType<
  Models$Outbound,
  z.ZodTypeDef,
  Models
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Models$ {
  /** @deprecated use `Models$inboundSchema` instead. */
  export const inboundSchema = Models$inboundSchema;
  /** @deprecated use `Models$outboundSchema` instead. */
  export const outboundSchema = Models$outboundSchema;
  /** @deprecated use `Models$Outbound` instead. */
  export type Outbound = Models$Outbound;
}

export function modelsToJSON(models: Models): string {
  return JSON.stringify(Models$outboundSchema.parse(models));
}

export function modelsFromJSON(
  jsonString: string,
): SafeParseResult<Models, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Models$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Models' from JSON`,
  );
}

/** @internal */
export const GetApiModelsResponseBody$inboundSchema: z.ZodType<
  GetApiModelsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiModelsLinks$inboundSchema).optional(),
  models: z.record(z.lazy(() => Models$inboundSchema)).optional(),
});

/** @internal */
export type GetApiModelsResponseBody$Outbound = {
  links?: GetApiModelsLinks$Outbound | undefined;
  models?: { [k: string]: Models$Outbound } | undefined;
};

/** @internal */
export const GetApiModelsResponseBody$outboundSchema: z.ZodType<
  GetApiModelsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiModelsResponseBody
> = z.object({
  links: z.lazy(() => GetApiModelsLinks$outboundSchema).optional(),
  models: z.record(z.lazy(() => Models$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiModelsResponseBody$ {
  /** @deprecated use `GetApiModelsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiModelsResponseBody$inboundSchema;
  /** @deprecated use `GetApiModelsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiModelsResponseBody$outboundSchema;
  /** @deprecated use `GetApiModelsResponseBody$Outbound` instead. */
  export type Outbound = GetApiModelsResponseBody$Outbound;
}

export function getApiModelsResponseBodyToJSON(
  getApiModelsResponseBody: GetApiModelsResponseBody,
): string {
  return JSON.stringify(
    GetApiModelsResponseBody$outboundSchema.parse(getApiModelsResponseBody),
  );
}

export function getApiModelsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiModelsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiModelsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiModelsResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiApikeysLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Apikeys = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiApikeysResponseBody = {
  links?: GetApiApikeysLinks | undefined;
  apikeys?: { [k: string]: Apikeys } | undefined;
};

/** @internal */
export const GetApiApikeysLinks$inboundSchema: z.ZodType<
  GetApiApikeysLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiApikeysLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiApikeysLinks$outboundSchema: z.ZodType<
  GetApiApikeysLinks$Outbound,
  z.ZodTypeDef,
  GetApiApikeysLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiApikeysLinks$ {
  /** @deprecated use `GetApiApikeysLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiApikeysLinks$inboundSchema;
  /** @deprecated use `GetApiApikeysLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiApikeysLinks$outboundSchema;
  /** @deprecated use `GetApiApikeysLinks$Outbound` instead. */
  export type Outbound = GetApiApikeysLinks$Outbound;
}

export function getApiApikeysLinksToJSON(
  getApiApikeysLinks: GetApiApikeysLinks,
): string {
  return JSON.stringify(
    GetApiApikeysLinks$outboundSchema.parse(getApiApikeysLinks),
  );
}

export function getApiApikeysLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiApikeysLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiApikeysLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiApikeysLinks' from JSON`,
  );
}

/** @internal */
export const Apikeys$inboundSchema: z.ZodType<Apikeys, z.ZodTypeDef, unknown> =
  z.object({
    href: z.string().optional(),
  });

/** @internal */
export type Apikeys$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Apikeys$outboundSchema: z.ZodType<
  Apikeys$Outbound,
  z.ZodTypeDef,
  Apikeys
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Apikeys$ {
  /** @deprecated use `Apikeys$inboundSchema` instead. */
  export const inboundSchema = Apikeys$inboundSchema;
  /** @deprecated use `Apikeys$outboundSchema` instead. */
  export const outboundSchema = Apikeys$outboundSchema;
  /** @deprecated use `Apikeys$Outbound` instead. */
  export type Outbound = Apikeys$Outbound;
}

export function apikeysToJSON(apikeys: Apikeys): string {
  return JSON.stringify(Apikeys$outboundSchema.parse(apikeys));
}

export function apikeysFromJSON(
  jsonString: string,
): SafeParseResult<Apikeys, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Apikeys$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Apikeys' from JSON`,
  );
}

/** @internal */
export const GetApiApikeysResponseBody$inboundSchema: z.ZodType<
  GetApiApikeysResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiApikeysLinks$inboundSchema).optional(),
  apikeys: z.record(z.lazy(() => Apikeys$inboundSchema)).optional(),
});

/** @internal */
export type GetApiApikeysResponseBody$Outbound = {
  links?: GetApiApikeysLinks$Outbound | undefined;
  apikeys?: { [k: string]: Apikeys$Outbound } | undefined;
};

/** @internal */
export const GetApiApikeysResponseBody$outboundSchema: z.ZodType<
  GetApiApikeysResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiApikeysResponseBody
> = z.object({
  links: z.lazy(() => GetApiApikeysLinks$outboundSchema).optional(),
  apikeys: z.record(z.lazy(() => Apikeys$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiApikeysResponseBody$ {
  /** @deprecated use `GetApiApikeysResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiApikeysResponseBody$inboundSchema;
  /** @deprecated use `GetApiApikeysResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiApikeysResponseBody$outboundSchema;
  /** @deprecated use `GetApiApikeysResponseBody$Outbound` instead. */
  export type Outbound = GetApiApikeysResponseBody$Outbound;
}

export function getApiApikeysResponseBodyToJSON(
  getApiApikeysResponseBody: GetApiApikeysResponseBody,
): string {
  return JSON.stringify(
    GetApiApikeysResponseBody$outboundSchema.parse(getApiApikeysResponseBody),
  );
}

export function getApiApikeysResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiApikeysResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiApikeysResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiApikeysResponseBody' from JSON`,
  );
}

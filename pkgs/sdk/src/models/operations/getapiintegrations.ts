/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiIntegrationsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Integrations = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiIntegrationsResponseBody = {
  links?: GetApiIntegrationsLinks | undefined;
  integrations?: { [k: string]: Integrations } | undefined;
};

/** @internal */
export const GetApiIntegrationsLinks$inboundSchema: z.ZodType<
  GetApiIntegrationsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiIntegrationsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiIntegrationsLinks$outboundSchema: z.ZodType<
  GetApiIntegrationsLinks$Outbound,
  z.ZodTypeDef,
  GetApiIntegrationsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiIntegrationsLinks$ {
  /** @deprecated use `GetApiIntegrationsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiIntegrationsLinks$inboundSchema;
  /** @deprecated use `GetApiIntegrationsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiIntegrationsLinks$outboundSchema;
  /** @deprecated use `GetApiIntegrationsLinks$Outbound` instead. */
  export type Outbound = GetApiIntegrationsLinks$Outbound;
}

export function getApiIntegrationsLinksToJSON(
  getApiIntegrationsLinks: GetApiIntegrationsLinks,
): string {
  return JSON.stringify(
    GetApiIntegrationsLinks$outboundSchema.parse(getApiIntegrationsLinks),
  );
}

export function getApiIntegrationsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiIntegrationsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiIntegrationsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiIntegrationsLinks' from JSON`,
  );
}

/** @internal */
export const Integrations$inboundSchema: z.ZodType<
  Integrations,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Integrations$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Integrations$outboundSchema: z.ZodType<
  Integrations$Outbound,
  z.ZodTypeDef,
  Integrations
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Integrations$ {
  /** @deprecated use `Integrations$inboundSchema` instead. */
  export const inboundSchema = Integrations$inboundSchema;
  /** @deprecated use `Integrations$outboundSchema` instead. */
  export const outboundSchema = Integrations$outboundSchema;
  /** @deprecated use `Integrations$Outbound` instead. */
  export type Outbound = Integrations$Outbound;
}

export function integrationsToJSON(integrations: Integrations): string {
  return JSON.stringify(Integrations$outboundSchema.parse(integrations));
}

export function integrationsFromJSON(
  jsonString: string,
): SafeParseResult<Integrations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Integrations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Integrations' from JSON`,
  );
}

/** @internal */
export const GetApiIntegrationsResponseBody$inboundSchema: z.ZodType<
  GetApiIntegrationsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiIntegrationsLinks$inboundSchema).optional(),
  integrations: z.record(z.lazy(() => Integrations$inboundSchema)).optional(),
});

/** @internal */
export type GetApiIntegrationsResponseBody$Outbound = {
  links?: GetApiIntegrationsLinks$Outbound | undefined;
  integrations?: { [k: string]: Integrations$Outbound } | undefined;
};

/** @internal */
export const GetApiIntegrationsResponseBody$outboundSchema: z.ZodType<
  GetApiIntegrationsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiIntegrationsResponseBody
> = z.object({
  links: z.lazy(() => GetApiIntegrationsLinks$outboundSchema).optional(),
  integrations: z.record(z.lazy(() => Integrations$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiIntegrationsResponseBody$ {
  /** @deprecated use `GetApiIntegrationsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiIntegrationsResponseBody$inboundSchema;
  /** @deprecated use `GetApiIntegrationsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiIntegrationsResponseBody$outboundSchema;
  /** @deprecated use `GetApiIntegrationsResponseBody$Outbound` instead. */
  export type Outbound = GetApiIntegrationsResponseBody$Outbound;
}

export function getApiIntegrationsResponseBodyToJSON(
  getApiIntegrationsResponseBody: GetApiIntegrationsResponseBody,
): string {
  return JSON.stringify(
    GetApiIntegrationsResponseBody$outboundSchema.parse(
      getApiIntegrationsResponseBody,
    ),
  );
}

export function getApiIntegrationsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiIntegrationsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiIntegrationsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiIntegrationsResponseBody' from JSON`,
  );
}

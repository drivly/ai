/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiErrorsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Errors = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiErrorsResponseBody = {
  links?: GetApiErrorsLinks | undefined;
  errors?: { [k: string]: Errors } | undefined;
};

/** @internal */
export const GetApiErrorsLinks$inboundSchema: z.ZodType<
  GetApiErrorsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiErrorsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiErrorsLinks$outboundSchema: z.ZodType<
  GetApiErrorsLinks$Outbound,
  z.ZodTypeDef,
  GetApiErrorsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiErrorsLinks$ {
  /** @deprecated use `GetApiErrorsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiErrorsLinks$inboundSchema;
  /** @deprecated use `GetApiErrorsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiErrorsLinks$outboundSchema;
  /** @deprecated use `GetApiErrorsLinks$Outbound` instead. */
  export type Outbound = GetApiErrorsLinks$Outbound;
}

export function getApiErrorsLinksToJSON(
  getApiErrorsLinks: GetApiErrorsLinks,
): string {
  return JSON.stringify(
    GetApiErrorsLinks$outboundSchema.parse(getApiErrorsLinks),
  );
}

export function getApiErrorsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiErrorsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiErrorsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiErrorsLinks' from JSON`,
  );
}

/** @internal */
export const Errors$inboundSchema: z.ZodType<Errors, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
  });

/** @internal */
export type Errors$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Errors$outboundSchema: z.ZodType<
  Errors$Outbound,
  z.ZodTypeDef,
  Errors
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Errors$ {
  /** @deprecated use `Errors$inboundSchema` instead. */
  export const inboundSchema = Errors$inboundSchema;
  /** @deprecated use `Errors$outboundSchema` instead. */
  export const outboundSchema = Errors$outboundSchema;
  /** @deprecated use `Errors$Outbound` instead. */
  export type Outbound = Errors$Outbound;
}

export function errorsToJSON(errors: Errors): string {
  return JSON.stringify(Errors$outboundSchema.parse(errors));
}

export function errorsFromJSON(
  jsonString: string,
): SafeParseResult<Errors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Errors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Errors' from JSON`,
  );
}

/** @internal */
export const GetApiErrorsResponseBody$inboundSchema: z.ZodType<
  GetApiErrorsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiErrorsLinks$inboundSchema).optional(),
  errors: z.record(z.lazy(() => Errors$inboundSchema)).optional(),
});

/** @internal */
export type GetApiErrorsResponseBody$Outbound = {
  links?: GetApiErrorsLinks$Outbound | undefined;
  errors?: { [k: string]: Errors$Outbound } | undefined;
};

/** @internal */
export const GetApiErrorsResponseBody$outboundSchema: z.ZodType<
  GetApiErrorsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiErrorsResponseBody
> = z.object({
  links: z.lazy(() => GetApiErrorsLinks$outboundSchema).optional(),
  errors: z.record(z.lazy(() => Errors$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiErrorsResponseBody$ {
  /** @deprecated use `GetApiErrorsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiErrorsResponseBody$inboundSchema;
  /** @deprecated use `GetApiErrorsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiErrorsResponseBody$outboundSchema;
  /** @deprecated use `GetApiErrorsResponseBody$Outbound` instead. */
  export type Outbound = GetApiErrorsResponseBody$Outbound;
}

export function getApiErrorsResponseBodyToJSON(
  getApiErrorsResponseBody: GetApiErrorsResponseBody,
): string {
  return JSON.stringify(
    GetApiErrorsResponseBody$outboundSchema.parse(getApiErrorsResponseBody),
  );
}

export function getApiErrorsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiErrorsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiErrorsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiErrorsResponseBody' from JSON`,
  );
}

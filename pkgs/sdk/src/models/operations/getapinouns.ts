/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiNounsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Nouns = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiNounsResponseBody = {
  links?: GetApiNounsLinks | undefined;
  nouns?: { [k: string]: Nouns } | undefined;
};

/** @internal */
export const GetApiNounsLinks$inboundSchema: z.ZodType<
  GetApiNounsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiNounsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiNounsLinks$outboundSchema: z.ZodType<
  GetApiNounsLinks$Outbound,
  z.ZodTypeDef,
  GetApiNounsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiNounsLinks$ {
  /** @deprecated use `GetApiNounsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiNounsLinks$inboundSchema;
  /** @deprecated use `GetApiNounsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiNounsLinks$outboundSchema;
  /** @deprecated use `GetApiNounsLinks$Outbound` instead. */
  export type Outbound = GetApiNounsLinks$Outbound;
}

export function getApiNounsLinksToJSON(
  getApiNounsLinks: GetApiNounsLinks,
): string {
  return JSON.stringify(
    GetApiNounsLinks$outboundSchema.parse(getApiNounsLinks),
  );
}

export function getApiNounsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiNounsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiNounsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiNounsLinks' from JSON`,
  );
}

/** @internal */
export const Nouns$inboundSchema: z.ZodType<Nouns, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
  });

/** @internal */
export type Nouns$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Nouns$outboundSchema: z.ZodType<
  Nouns$Outbound,
  z.ZodTypeDef,
  Nouns
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Nouns$ {
  /** @deprecated use `Nouns$inboundSchema` instead. */
  export const inboundSchema = Nouns$inboundSchema;
  /** @deprecated use `Nouns$outboundSchema` instead. */
  export const outboundSchema = Nouns$outboundSchema;
  /** @deprecated use `Nouns$Outbound` instead. */
  export type Outbound = Nouns$Outbound;
}

export function nounsToJSON(nouns: Nouns): string {
  return JSON.stringify(Nouns$outboundSchema.parse(nouns));
}

export function nounsFromJSON(
  jsonString: string,
): SafeParseResult<Nouns, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Nouns$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Nouns' from JSON`,
  );
}

/** @internal */
export const GetApiNounsResponseBody$inboundSchema: z.ZodType<
  GetApiNounsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiNounsLinks$inboundSchema).optional(),
  nouns: z.record(z.lazy(() => Nouns$inboundSchema)).optional(),
});

/** @internal */
export type GetApiNounsResponseBody$Outbound = {
  links?: GetApiNounsLinks$Outbound | undefined;
  nouns?: { [k: string]: Nouns$Outbound } | undefined;
};

/** @internal */
export const GetApiNounsResponseBody$outboundSchema: z.ZodType<
  GetApiNounsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiNounsResponseBody
> = z.object({
  links: z.lazy(() => GetApiNounsLinks$outboundSchema).optional(),
  nouns: z.record(z.lazy(() => Nouns$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiNounsResponseBody$ {
  /** @deprecated use `GetApiNounsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiNounsResponseBody$inboundSchema;
  /** @deprecated use `GetApiNounsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiNounsResponseBody$outboundSchema;
  /** @deprecated use `GetApiNounsResponseBody$Outbound` instead. */
  export type Outbound = GetApiNounsResponseBody$Outbound;
}

export function getApiNounsResponseBodyToJSON(
  getApiNounsResponseBody: GetApiNounsResponseBody,
): string {
  return JSON.stringify(
    GetApiNounsResponseBody$outboundSchema.parse(getApiNounsResponseBody),
  );
}

export function getApiNounsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiNounsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiNounsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiNounsResponseBody' from JSON`,
  );
}

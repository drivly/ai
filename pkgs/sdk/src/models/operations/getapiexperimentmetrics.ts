/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiExperimentMetricsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type ExperimentMetrics = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiExperimentMetricsResponseBody = {
  links?: GetApiExperimentMetricsLinks | undefined;
  experimentMetrics?: { [k: string]: ExperimentMetrics } | undefined;
};

/** @internal */
export const GetApiExperimentMetricsLinks$inboundSchema: z.ZodType<
  GetApiExperimentMetricsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiExperimentMetricsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiExperimentMetricsLinks$outboundSchema: z.ZodType<
  GetApiExperimentMetricsLinks$Outbound,
  z.ZodTypeDef,
  GetApiExperimentMetricsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiExperimentMetricsLinks$ {
  /** @deprecated use `GetApiExperimentMetricsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiExperimentMetricsLinks$inboundSchema;
  /** @deprecated use `GetApiExperimentMetricsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiExperimentMetricsLinks$outboundSchema;
  /** @deprecated use `GetApiExperimentMetricsLinks$Outbound` instead. */
  export type Outbound = GetApiExperimentMetricsLinks$Outbound;
}

export function getApiExperimentMetricsLinksToJSON(
  getApiExperimentMetricsLinks: GetApiExperimentMetricsLinks,
): string {
  return JSON.stringify(
    GetApiExperimentMetricsLinks$outboundSchema.parse(
      getApiExperimentMetricsLinks,
    ),
  );
}

export function getApiExperimentMetricsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiExperimentMetricsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiExperimentMetricsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiExperimentMetricsLinks' from JSON`,
  );
}

/** @internal */
export const ExperimentMetrics$inboundSchema: z.ZodType<
  ExperimentMetrics,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type ExperimentMetrics$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const ExperimentMetrics$outboundSchema: z.ZodType<
  ExperimentMetrics$Outbound,
  z.ZodTypeDef,
  ExperimentMetrics
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentMetrics$ {
  /** @deprecated use `ExperimentMetrics$inboundSchema` instead. */
  export const inboundSchema = ExperimentMetrics$inboundSchema;
  /** @deprecated use `ExperimentMetrics$outboundSchema` instead. */
  export const outboundSchema = ExperimentMetrics$outboundSchema;
  /** @deprecated use `ExperimentMetrics$Outbound` instead. */
  export type Outbound = ExperimentMetrics$Outbound;
}

export function experimentMetricsToJSON(
  experimentMetrics: ExperimentMetrics,
): string {
  return JSON.stringify(
    ExperimentMetrics$outboundSchema.parse(experimentMetrics),
  );
}

export function experimentMetricsFromJSON(
  jsonString: string,
): SafeParseResult<ExperimentMetrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExperimentMetrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExperimentMetrics' from JSON`,
  );
}

/** @internal */
export const GetApiExperimentMetricsResponseBody$inboundSchema: z.ZodType<
  GetApiExperimentMetricsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiExperimentMetricsLinks$inboundSchema).optional(),
  "experiment-metrics": z.record(z.lazy(() => ExperimentMetrics$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "experiment-metrics": "experimentMetrics",
  });
});

/** @internal */
export type GetApiExperimentMetricsResponseBody$Outbound = {
  links?: GetApiExperimentMetricsLinks$Outbound | undefined;
  "experiment-metrics"?:
    | { [k: string]: ExperimentMetrics$Outbound }
    | undefined;
};

/** @internal */
export const GetApiExperimentMetricsResponseBody$outboundSchema: z.ZodType<
  GetApiExperimentMetricsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiExperimentMetricsResponseBody
> = z.object({
  links: z.lazy(() => GetApiExperimentMetricsLinks$outboundSchema).optional(),
  experimentMetrics: z.record(z.lazy(() => ExperimentMetrics$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    experimentMetrics: "experiment-metrics",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiExperimentMetricsResponseBody$ {
  /** @deprecated use `GetApiExperimentMetricsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetApiExperimentMetricsResponseBody$inboundSchema;
  /** @deprecated use `GetApiExperimentMetricsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetApiExperimentMetricsResponseBody$outboundSchema;
  /** @deprecated use `GetApiExperimentMetricsResponseBody$Outbound` instead. */
  export type Outbound = GetApiExperimentMetricsResponseBody$Outbound;
}

export function getApiExperimentMetricsResponseBodyToJSON(
  getApiExperimentMetricsResponseBody: GetApiExperimentMetricsResponseBody,
): string {
  return JSON.stringify(
    GetApiExperimentMetricsResponseBody$outboundSchema.parse(
      getApiExperimentMetricsResponseBody,
    ),
  );
}

export function getApiExperimentMetricsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiExperimentMetricsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiExperimentMetricsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiExperimentMetricsResponseBody' from JSON`,
  );
}

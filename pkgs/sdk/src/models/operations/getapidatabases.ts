/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiDatabasesLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Databases = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiDatabasesResponseBody = {
  links?: GetApiDatabasesLinks | undefined;
  databases?: { [k: string]: Databases } | undefined;
};

/** @internal */
export const GetApiDatabasesLinks$inboundSchema: z.ZodType<
  GetApiDatabasesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiDatabasesLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiDatabasesLinks$outboundSchema: z.ZodType<
  GetApiDatabasesLinks$Outbound,
  z.ZodTypeDef,
  GetApiDatabasesLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiDatabasesLinks$ {
  /** @deprecated use `GetApiDatabasesLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiDatabasesLinks$inboundSchema;
  /** @deprecated use `GetApiDatabasesLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiDatabasesLinks$outboundSchema;
  /** @deprecated use `GetApiDatabasesLinks$Outbound` instead. */
  export type Outbound = GetApiDatabasesLinks$Outbound;
}

export function getApiDatabasesLinksToJSON(
  getApiDatabasesLinks: GetApiDatabasesLinks,
): string {
  return JSON.stringify(
    GetApiDatabasesLinks$outboundSchema.parse(getApiDatabasesLinks),
  );
}

export function getApiDatabasesLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiDatabasesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiDatabasesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiDatabasesLinks' from JSON`,
  );
}

/** @internal */
export const Databases$inboundSchema: z.ZodType<
  Databases,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Databases$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Databases$outboundSchema: z.ZodType<
  Databases$Outbound,
  z.ZodTypeDef,
  Databases
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Databases$ {
  /** @deprecated use `Databases$inboundSchema` instead. */
  export const inboundSchema = Databases$inboundSchema;
  /** @deprecated use `Databases$outboundSchema` instead. */
  export const outboundSchema = Databases$outboundSchema;
  /** @deprecated use `Databases$Outbound` instead. */
  export type Outbound = Databases$Outbound;
}

export function databasesToJSON(databases: Databases): string {
  return JSON.stringify(Databases$outboundSchema.parse(databases));
}

export function databasesFromJSON(
  jsonString: string,
): SafeParseResult<Databases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Databases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Databases' from JSON`,
  );
}

/** @internal */
export const GetApiDatabasesResponseBody$inboundSchema: z.ZodType<
  GetApiDatabasesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiDatabasesLinks$inboundSchema).optional(),
  databases: z.record(z.lazy(() => Databases$inboundSchema)).optional(),
});

/** @internal */
export type GetApiDatabasesResponseBody$Outbound = {
  links?: GetApiDatabasesLinks$Outbound | undefined;
  databases?: { [k: string]: Databases$Outbound } | undefined;
};

/** @internal */
export const GetApiDatabasesResponseBody$outboundSchema: z.ZodType<
  GetApiDatabasesResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiDatabasesResponseBody
> = z.object({
  links: z.lazy(() => GetApiDatabasesLinks$outboundSchema).optional(),
  databases: z.record(z.lazy(() => Databases$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiDatabasesResponseBody$ {
  /** @deprecated use `GetApiDatabasesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiDatabasesResponseBody$inboundSchema;
  /** @deprecated use `GetApiDatabasesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiDatabasesResponseBody$outboundSchema;
  /** @deprecated use `GetApiDatabasesResponseBody$Outbound` instead. */
  export type Outbound = GetApiDatabasesResponseBody$Outbound;
}

export function getApiDatabasesResponseBodyToJSON(
  getApiDatabasesResponseBody: GetApiDatabasesResponseBody,
): string {
  return JSON.stringify(
    GetApiDatabasesResponseBody$outboundSchema.parse(
      getApiDatabasesResponseBody,
    ),
  );
}

export function getApiDatabasesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiDatabasesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiDatabasesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiDatabasesResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiVerbsIdRequest = {
  /**
   * The ID of the Verb
   */
  id: string;
};

/**
 * Successfully deleted
 */
export type DeleteApiVerbsIdResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiVerbsIdRequest$inboundSchema: z.ZodType<
  DeleteApiVerbsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteApiVerbsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteApiVerbsIdRequest$outboundSchema: z.ZodType<
  DeleteApiVerbsIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiVerbsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiVerbsIdRequest$ {
  /** @deprecated use `DeleteApiVerbsIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApiVerbsIdRequest$inboundSchema;
  /** @deprecated use `DeleteApiVerbsIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApiVerbsIdRequest$outboundSchema;
  /** @deprecated use `DeleteApiVerbsIdRequest$Outbound` instead. */
  export type Outbound = DeleteApiVerbsIdRequest$Outbound;
}

export function deleteApiVerbsIdRequestToJSON(
  deleteApiVerbsIdRequest: DeleteApiVerbsIdRequest,
): string {
  return JSON.stringify(
    DeleteApiVerbsIdRequest$outboundSchema.parse(deleteApiVerbsIdRequest),
  );
}

export function deleteApiVerbsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiVerbsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiVerbsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiVerbsIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteApiVerbsIdResponseBody$inboundSchema: z.ZodType<
  DeleteApiVerbsIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteApiVerbsIdResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiVerbsIdResponseBody$outboundSchema: z.ZodType<
  DeleteApiVerbsIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteApiVerbsIdResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiVerbsIdResponseBody$ {
  /** @deprecated use `DeleteApiVerbsIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteApiVerbsIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteApiVerbsIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteApiVerbsIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteApiVerbsIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteApiVerbsIdResponseBody$Outbound;
}

export function deleteApiVerbsIdResponseBodyToJSON(
  deleteApiVerbsIdResponseBody: DeleteApiVerbsIdResponseBody,
): string {
  return JSON.stringify(
    DeleteApiVerbsIdResponseBody$outboundSchema.parse(
      deleteApiVerbsIdResponseBody,
    ),
  );
}

export function deleteApiVerbsIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiVerbsIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiVerbsIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiVerbsIdResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiModulesIdRequest = {
  /**
   * The ID of the Module
   */
  id: string;
};

/**
 * Successfully deleted
 */
export type DeleteApiModulesIdResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiModulesIdRequest$inboundSchema: z.ZodType<
  DeleteApiModulesIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteApiModulesIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteApiModulesIdRequest$outboundSchema: z.ZodType<
  DeleteApiModulesIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiModulesIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiModulesIdRequest$ {
  /** @deprecated use `DeleteApiModulesIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApiModulesIdRequest$inboundSchema;
  /** @deprecated use `DeleteApiModulesIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApiModulesIdRequest$outboundSchema;
  /** @deprecated use `DeleteApiModulesIdRequest$Outbound` instead. */
  export type Outbound = DeleteApiModulesIdRequest$Outbound;
}

export function deleteApiModulesIdRequestToJSON(
  deleteApiModulesIdRequest: DeleteApiModulesIdRequest,
): string {
  return JSON.stringify(
    DeleteApiModulesIdRequest$outboundSchema.parse(deleteApiModulesIdRequest),
  );
}

export function deleteApiModulesIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiModulesIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiModulesIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiModulesIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteApiModulesIdResponseBody$inboundSchema: z.ZodType<
  DeleteApiModulesIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteApiModulesIdResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiModulesIdResponseBody$outboundSchema: z.ZodType<
  DeleteApiModulesIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteApiModulesIdResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiModulesIdResponseBody$ {
  /** @deprecated use `DeleteApiModulesIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteApiModulesIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteApiModulesIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteApiModulesIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteApiModulesIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteApiModulesIdResponseBody$Outbound;
}

export function deleteApiModulesIdResponseBodyToJSON(
  deleteApiModulesIdResponseBody: DeleteApiModulesIdResponseBody,
): string {
  return JSON.stringify(
    DeleteApiModulesIdResponseBody$outboundSchema.parse(
      deleteApiModulesIdResponseBody,
    ),
  );
}

export function deleteApiModulesIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiModulesIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiModulesIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiModulesIdResponseBody' from JSON`,
  );
}

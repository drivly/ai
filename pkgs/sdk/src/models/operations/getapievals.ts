/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiEvalsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Evals = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiEvalsResponseBody = {
  links?: GetApiEvalsLinks | undefined;
  evals?: { [k: string]: Evals } | undefined;
};

/** @internal */
export const GetApiEvalsLinks$inboundSchema: z.ZodType<
  GetApiEvalsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiEvalsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiEvalsLinks$outboundSchema: z.ZodType<
  GetApiEvalsLinks$Outbound,
  z.ZodTypeDef,
  GetApiEvalsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiEvalsLinks$ {
  /** @deprecated use `GetApiEvalsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiEvalsLinks$inboundSchema;
  /** @deprecated use `GetApiEvalsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiEvalsLinks$outboundSchema;
  /** @deprecated use `GetApiEvalsLinks$Outbound` instead. */
  export type Outbound = GetApiEvalsLinks$Outbound;
}

export function getApiEvalsLinksToJSON(
  getApiEvalsLinks: GetApiEvalsLinks,
): string {
  return JSON.stringify(
    GetApiEvalsLinks$outboundSchema.parse(getApiEvalsLinks),
  );
}

export function getApiEvalsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiEvalsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiEvalsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiEvalsLinks' from JSON`,
  );
}

/** @internal */
export const Evals$inboundSchema: z.ZodType<Evals, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
  });

/** @internal */
export type Evals$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Evals$outboundSchema: z.ZodType<
  Evals$Outbound,
  z.ZodTypeDef,
  Evals
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evals$ {
  /** @deprecated use `Evals$inboundSchema` instead. */
  export const inboundSchema = Evals$inboundSchema;
  /** @deprecated use `Evals$outboundSchema` instead. */
  export const outboundSchema = Evals$outboundSchema;
  /** @deprecated use `Evals$Outbound` instead. */
  export type Outbound = Evals$Outbound;
}

export function evalsToJSON(evals: Evals): string {
  return JSON.stringify(Evals$outboundSchema.parse(evals));
}

export function evalsFromJSON(
  jsonString: string,
): SafeParseResult<Evals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evals' from JSON`,
  );
}

/** @internal */
export const GetApiEvalsResponseBody$inboundSchema: z.ZodType<
  GetApiEvalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiEvalsLinks$inboundSchema).optional(),
  evals: z.record(z.lazy(() => Evals$inboundSchema)).optional(),
});

/** @internal */
export type GetApiEvalsResponseBody$Outbound = {
  links?: GetApiEvalsLinks$Outbound | undefined;
  evals?: { [k: string]: Evals$Outbound } | undefined;
};

/** @internal */
export const GetApiEvalsResponseBody$outboundSchema: z.ZodType<
  GetApiEvalsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiEvalsResponseBody
> = z.object({
  links: z.lazy(() => GetApiEvalsLinks$outboundSchema).optional(),
  evals: z.record(z.lazy(() => Evals$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiEvalsResponseBody$ {
  /** @deprecated use `GetApiEvalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiEvalsResponseBody$inboundSchema;
  /** @deprecated use `GetApiEvalsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiEvalsResponseBody$outboundSchema;
  /** @deprecated use `GetApiEvalsResponseBody$Outbound` instead. */
  export type Outbound = GetApiEvalsResponseBody$Outbound;
}

export function getApiEvalsResponseBodyToJSON(
  getApiEvalsResponseBody: GetApiEvalsResponseBody,
): string {
  return JSON.stringify(
    GetApiEvalsResponseBody$outboundSchema.parse(getApiEvalsResponseBody),
  );
}

export function getApiEvalsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiEvalsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiEvalsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiEvalsResponseBody' from JSON`,
  );
}

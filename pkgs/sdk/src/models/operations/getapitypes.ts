/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiTypesLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Types = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiTypesResponseBody = {
  links?: GetApiTypesLinks | undefined;
  types?: { [k: string]: Types } | undefined;
};

/** @internal */
export const GetApiTypesLinks$inboundSchema: z.ZodType<
  GetApiTypesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiTypesLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiTypesLinks$outboundSchema: z.ZodType<
  GetApiTypesLinks$Outbound,
  z.ZodTypeDef,
  GetApiTypesLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiTypesLinks$ {
  /** @deprecated use `GetApiTypesLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiTypesLinks$inboundSchema;
  /** @deprecated use `GetApiTypesLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiTypesLinks$outboundSchema;
  /** @deprecated use `GetApiTypesLinks$Outbound` instead. */
  export type Outbound = GetApiTypesLinks$Outbound;
}

export function getApiTypesLinksToJSON(
  getApiTypesLinks: GetApiTypesLinks,
): string {
  return JSON.stringify(
    GetApiTypesLinks$outboundSchema.parse(getApiTypesLinks),
  );
}

export function getApiTypesLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiTypesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiTypesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiTypesLinks' from JSON`,
  );
}

/** @internal */
export const Types$inboundSchema: z.ZodType<Types, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
  });

/** @internal */
export type Types$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Types$outboundSchema: z.ZodType<
  Types$Outbound,
  z.ZodTypeDef,
  Types
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Types$ {
  /** @deprecated use `Types$inboundSchema` instead. */
  export const inboundSchema = Types$inboundSchema;
  /** @deprecated use `Types$outboundSchema` instead. */
  export const outboundSchema = Types$outboundSchema;
  /** @deprecated use `Types$Outbound` instead. */
  export type Outbound = Types$Outbound;
}

export function typesToJSON(types: Types): string {
  return JSON.stringify(Types$outboundSchema.parse(types));
}

export function typesFromJSON(
  jsonString: string,
): SafeParseResult<Types, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Types$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Types' from JSON`,
  );
}

/** @internal */
export const GetApiTypesResponseBody$inboundSchema: z.ZodType<
  GetApiTypesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiTypesLinks$inboundSchema).optional(),
  types: z.record(z.lazy(() => Types$inboundSchema)).optional(),
});

/** @internal */
export type GetApiTypesResponseBody$Outbound = {
  links?: GetApiTypesLinks$Outbound | undefined;
  types?: { [k: string]: Types$Outbound } | undefined;
};

/** @internal */
export const GetApiTypesResponseBody$outboundSchema: z.ZodType<
  GetApiTypesResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiTypesResponseBody
> = z.object({
  links: z.lazy(() => GetApiTypesLinks$outboundSchema).optional(),
  types: z.record(z.lazy(() => Types$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiTypesResponseBody$ {
  /** @deprecated use `GetApiTypesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiTypesResponseBody$inboundSchema;
  /** @deprecated use `GetApiTypesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiTypesResponseBody$outboundSchema;
  /** @deprecated use `GetApiTypesResponseBody$Outbound` instead. */
  export type Outbound = GetApiTypesResponseBody$Outbound;
}

export function getApiTypesResponseBodyToJSON(
  getApiTypesResponseBody: GetApiTypesResponseBody,
): string {
  return JSON.stringify(
    GetApiTypesResponseBody$outboundSchema.parse(getApiTypesResponseBody),
  );
}

export function getApiTypesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiTypesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiTypesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiTypesResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiEvalRunsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type EvalRuns = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiEvalRunsResponseBody = {
  links?: GetApiEvalRunsLinks | undefined;
  evalRuns?: { [k: string]: EvalRuns } | undefined;
};

/** @internal */
export const GetApiEvalRunsLinks$inboundSchema: z.ZodType<
  GetApiEvalRunsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiEvalRunsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiEvalRunsLinks$outboundSchema: z.ZodType<
  GetApiEvalRunsLinks$Outbound,
  z.ZodTypeDef,
  GetApiEvalRunsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiEvalRunsLinks$ {
  /** @deprecated use `GetApiEvalRunsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiEvalRunsLinks$inboundSchema;
  /** @deprecated use `GetApiEvalRunsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiEvalRunsLinks$outboundSchema;
  /** @deprecated use `GetApiEvalRunsLinks$Outbound` instead. */
  export type Outbound = GetApiEvalRunsLinks$Outbound;
}

export function getApiEvalRunsLinksToJSON(
  getApiEvalRunsLinks: GetApiEvalRunsLinks,
): string {
  return JSON.stringify(
    GetApiEvalRunsLinks$outboundSchema.parse(getApiEvalRunsLinks),
  );
}

export function getApiEvalRunsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiEvalRunsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiEvalRunsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiEvalRunsLinks' from JSON`,
  );
}

/** @internal */
export const EvalRuns$inboundSchema: z.ZodType<
  EvalRuns,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type EvalRuns$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const EvalRuns$outboundSchema: z.ZodType<
  EvalRuns$Outbound,
  z.ZodTypeDef,
  EvalRuns
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalRuns$ {
  /** @deprecated use `EvalRuns$inboundSchema` instead. */
  export const inboundSchema = EvalRuns$inboundSchema;
  /** @deprecated use `EvalRuns$outboundSchema` instead. */
  export const outboundSchema = EvalRuns$outboundSchema;
  /** @deprecated use `EvalRuns$Outbound` instead. */
  export type Outbound = EvalRuns$Outbound;
}

export function evalRunsToJSON(evalRuns: EvalRuns): string {
  return JSON.stringify(EvalRuns$outboundSchema.parse(evalRuns));
}

export function evalRunsFromJSON(
  jsonString: string,
): SafeParseResult<EvalRuns, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalRuns$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalRuns' from JSON`,
  );
}

/** @internal */
export const GetApiEvalRunsResponseBody$inboundSchema: z.ZodType<
  GetApiEvalRunsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiEvalRunsLinks$inboundSchema).optional(),
  evalRuns: z.record(z.lazy(() => EvalRuns$inboundSchema)).optional(),
});

/** @internal */
export type GetApiEvalRunsResponseBody$Outbound = {
  links?: GetApiEvalRunsLinks$Outbound | undefined;
  evalRuns?: { [k: string]: EvalRuns$Outbound } | undefined;
};

/** @internal */
export const GetApiEvalRunsResponseBody$outboundSchema: z.ZodType<
  GetApiEvalRunsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiEvalRunsResponseBody
> = z.object({
  links: z.lazy(() => GetApiEvalRunsLinks$outboundSchema).optional(),
  evalRuns: z.record(z.lazy(() => EvalRuns$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiEvalRunsResponseBody$ {
  /** @deprecated use `GetApiEvalRunsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiEvalRunsResponseBody$inboundSchema;
  /** @deprecated use `GetApiEvalRunsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiEvalRunsResponseBody$outboundSchema;
  /** @deprecated use `GetApiEvalRunsResponseBody$Outbound` instead. */
  export type Outbound = GetApiEvalRunsResponseBody$Outbound;
}

export function getApiEvalRunsResponseBodyToJSON(
  getApiEvalRunsResponseBody: GetApiEvalRunsResponseBody,
): string {
  return JSON.stringify(
    GetApiEvalRunsResponseBody$outboundSchema.parse(getApiEvalRunsResponseBody),
  );
}

export function getApiEvalRunsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiEvalRunsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiEvalRunsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiEvalRunsResponseBody' from JSON`,
  );
}

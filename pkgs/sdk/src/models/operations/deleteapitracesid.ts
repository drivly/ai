/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiTracesIdRequest = {
  /**
   * The ID of the Trace
   */
  id: string;
};

/**
 * Successfully deleted
 */
export type DeleteApiTracesIdResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiTracesIdRequest$inboundSchema: z.ZodType<
  DeleteApiTracesIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteApiTracesIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteApiTracesIdRequest$outboundSchema: z.ZodType<
  DeleteApiTracesIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiTracesIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiTracesIdRequest$ {
  /** @deprecated use `DeleteApiTracesIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApiTracesIdRequest$inboundSchema;
  /** @deprecated use `DeleteApiTracesIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApiTracesIdRequest$outboundSchema;
  /** @deprecated use `DeleteApiTracesIdRequest$Outbound` instead. */
  export type Outbound = DeleteApiTracesIdRequest$Outbound;
}

export function deleteApiTracesIdRequestToJSON(
  deleteApiTracesIdRequest: DeleteApiTracesIdRequest,
): string {
  return JSON.stringify(
    DeleteApiTracesIdRequest$outboundSchema.parse(deleteApiTracesIdRequest),
  );
}

export function deleteApiTracesIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiTracesIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiTracesIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiTracesIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteApiTracesIdResponseBody$inboundSchema: z.ZodType<
  DeleteApiTracesIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteApiTracesIdResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiTracesIdResponseBody$outboundSchema: z.ZodType<
  DeleteApiTracesIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteApiTracesIdResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiTracesIdResponseBody$ {
  /** @deprecated use `DeleteApiTracesIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteApiTracesIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteApiTracesIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteApiTracesIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteApiTracesIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteApiTracesIdResponseBody$Outbound;
}

export function deleteApiTracesIdResponseBodyToJSON(
  deleteApiTracesIdResponseBody: DeleteApiTracesIdResponseBody,
): string {
  return JSON.stringify(
    DeleteApiTracesIdResponseBody$outboundSchema.parse(
      deleteApiTracesIdResponseBody,
    ),
  );
}

export function deleteApiTracesIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiTracesIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiTracesIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiTracesIdResponseBody' from JSON`,
  );
}

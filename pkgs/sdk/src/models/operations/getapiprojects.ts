/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiProjectsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Projects = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiProjectsResponseBody = {
  links?: GetApiProjectsLinks | undefined;
  projects?: { [k: string]: Projects } | undefined;
};

/** @internal */
export const GetApiProjectsLinks$inboundSchema: z.ZodType<
  GetApiProjectsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiProjectsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiProjectsLinks$outboundSchema: z.ZodType<
  GetApiProjectsLinks$Outbound,
  z.ZodTypeDef,
  GetApiProjectsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiProjectsLinks$ {
  /** @deprecated use `GetApiProjectsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiProjectsLinks$inboundSchema;
  /** @deprecated use `GetApiProjectsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiProjectsLinks$outboundSchema;
  /** @deprecated use `GetApiProjectsLinks$Outbound` instead. */
  export type Outbound = GetApiProjectsLinks$Outbound;
}

export function getApiProjectsLinksToJSON(
  getApiProjectsLinks: GetApiProjectsLinks,
): string {
  return JSON.stringify(
    GetApiProjectsLinks$outboundSchema.parse(getApiProjectsLinks),
  );
}

export function getApiProjectsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiProjectsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiProjectsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiProjectsLinks' from JSON`,
  );
}

/** @internal */
export const Projects$inboundSchema: z.ZodType<
  Projects,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Projects$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Projects$outboundSchema: z.ZodType<
  Projects$Outbound,
  z.ZodTypeDef,
  Projects
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Projects$ {
  /** @deprecated use `Projects$inboundSchema` instead. */
  export const inboundSchema = Projects$inboundSchema;
  /** @deprecated use `Projects$outboundSchema` instead. */
  export const outboundSchema = Projects$outboundSchema;
  /** @deprecated use `Projects$Outbound` instead. */
  export type Outbound = Projects$Outbound;
}

export function projectsToJSON(projects: Projects): string {
  return JSON.stringify(Projects$outboundSchema.parse(projects));
}

export function projectsFromJSON(
  jsonString: string,
): SafeParseResult<Projects, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Projects$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Projects' from JSON`,
  );
}

/** @internal */
export const GetApiProjectsResponseBody$inboundSchema: z.ZodType<
  GetApiProjectsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiProjectsLinks$inboundSchema).optional(),
  projects: z.record(z.lazy(() => Projects$inboundSchema)).optional(),
});

/** @internal */
export type GetApiProjectsResponseBody$Outbound = {
  links?: GetApiProjectsLinks$Outbound | undefined;
  projects?: { [k: string]: Projects$Outbound } | undefined;
};

/** @internal */
export const GetApiProjectsResponseBody$outboundSchema: z.ZodType<
  GetApiProjectsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiProjectsResponseBody
> = z.object({
  links: z.lazy(() => GetApiProjectsLinks$outboundSchema).optional(),
  projects: z.record(z.lazy(() => Projects$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiProjectsResponseBody$ {
  /** @deprecated use `GetApiProjectsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiProjectsResponseBody$inboundSchema;
  /** @deprecated use `GetApiProjectsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiProjectsResponseBody$outboundSchema;
  /** @deprecated use `GetApiProjectsResponseBody$Outbound` instead. */
  export type Outbound = GetApiProjectsResponseBody$Outbound;
}

export function getApiProjectsResponseBodyToJSON(
  getApiProjectsResponseBody: GetApiProjectsResponseBody,
): string {
  return JSON.stringify(
    GetApiProjectsResponseBody$outboundSchema.parse(getApiProjectsResponseBody),
  );
}

export function getApiProjectsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiProjectsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiProjectsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiProjectsResponseBody' from JSON`,
  );
}

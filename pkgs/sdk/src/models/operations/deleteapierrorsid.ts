/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiErrorsIdRequest = {
  /**
   * The ID of the Error
   */
  id: string;
};

/**
 * Successfully deleted
 */
export type DeleteApiErrorsIdResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiErrorsIdRequest$inboundSchema: z.ZodType<
  DeleteApiErrorsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteApiErrorsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteApiErrorsIdRequest$outboundSchema: z.ZodType<
  DeleteApiErrorsIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiErrorsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiErrorsIdRequest$ {
  /** @deprecated use `DeleteApiErrorsIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApiErrorsIdRequest$inboundSchema;
  /** @deprecated use `DeleteApiErrorsIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApiErrorsIdRequest$outboundSchema;
  /** @deprecated use `DeleteApiErrorsIdRequest$Outbound` instead. */
  export type Outbound = DeleteApiErrorsIdRequest$Outbound;
}

export function deleteApiErrorsIdRequestToJSON(
  deleteApiErrorsIdRequest: DeleteApiErrorsIdRequest,
): string {
  return JSON.stringify(
    DeleteApiErrorsIdRequest$outboundSchema.parse(deleteApiErrorsIdRequest),
  );
}

export function deleteApiErrorsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiErrorsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiErrorsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiErrorsIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteApiErrorsIdResponseBody$inboundSchema: z.ZodType<
  DeleteApiErrorsIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteApiErrorsIdResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiErrorsIdResponseBody$outboundSchema: z.ZodType<
  DeleteApiErrorsIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteApiErrorsIdResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiErrorsIdResponseBody$ {
  /** @deprecated use `DeleteApiErrorsIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteApiErrorsIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteApiErrorsIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteApiErrorsIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteApiErrorsIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteApiErrorsIdResponseBody$Outbound;
}

export function deleteApiErrorsIdResponseBodyToJSON(
  deleteApiErrorsIdResponseBody: DeleteApiErrorsIdResponseBody,
): string {
  return JSON.stringify(
    DeleteApiErrorsIdResponseBody$outboundSchema.parse(
      deleteApiErrorsIdResponseBody,
    ),
  );
}

export function deleteApiErrorsIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiErrorsIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiErrorsIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiErrorsIdResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiGoalsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Goals = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiGoalsResponseBody = {
  links?: GetApiGoalsLinks | undefined;
  goals?: { [k: string]: Goals } | undefined;
};

/** @internal */
export const GetApiGoalsLinks$inboundSchema: z.ZodType<
  GetApiGoalsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiGoalsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiGoalsLinks$outboundSchema: z.ZodType<
  GetApiGoalsLinks$Outbound,
  z.ZodTypeDef,
  GetApiGoalsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiGoalsLinks$ {
  /** @deprecated use `GetApiGoalsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiGoalsLinks$inboundSchema;
  /** @deprecated use `GetApiGoalsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiGoalsLinks$outboundSchema;
  /** @deprecated use `GetApiGoalsLinks$Outbound` instead. */
  export type Outbound = GetApiGoalsLinks$Outbound;
}

export function getApiGoalsLinksToJSON(
  getApiGoalsLinks: GetApiGoalsLinks,
): string {
  return JSON.stringify(
    GetApiGoalsLinks$outboundSchema.parse(getApiGoalsLinks),
  );
}

export function getApiGoalsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiGoalsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiGoalsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiGoalsLinks' from JSON`,
  );
}

/** @internal */
export const Goals$inboundSchema: z.ZodType<Goals, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
  });

/** @internal */
export type Goals$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Goals$outboundSchema: z.ZodType<
  Goals$Outbound,
  z.ZodTypeDef,
  Goals
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Goals$ {
  /** @deprecated use `Goals$inboundSchema` instead. */
  export const inboundSchema = Goals$inboundSchema;
  /** @deprecated use `Goals$outboundSchema` instead. */
  export const outboundSchema = Goals$outboundSchema;
  /** @deprecated use `Goals$Outbound` instead. */
  export type Outbound = Goals$Outbound;
}

export function goalsToJSON(goals: Goals): string {
  return JSON.stringify(Goals$outboundSchema.parse(goals));
}

export function goalsFromJSON(
  jsonString: string,
): SafeParseResult<Goals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Goals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Goals' from JSON`,
  );
}

/** @internal */
export const GetApiGoalsResponseBody$inboundSchema: z.ZodType<
  GetApiGoalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiGoalsLinks$inboundSchema).optional(),
  goals: z.record(z.lazy(() => Goals$inboundSchema)).optional(),
});

/** @internal */
export type GetApiGoalsResponseBody$Outbound = {
  links?: GetApiGoalsLinks$Outbound | undefined;
  goals?: { [k: string]: Goals$Outbound } | undefined;
};

/** @internal */
export const GetApiGoalsResponseBody$outboundSchema: z.ZodType<
  GetApiGoalsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiGoalsResponseBody
> = z.object({
  links: z.lazy(() => GetApiGoalsLinks$outboundSchema).optional(),
  goals: z.record(z.lazy(() => Goals$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiGoalsResponseBody$ {
  /** @deprecated use `GetApiGoalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiGoalsResponseBody$inboundSchema;
  /** @deprecated use `GetApiGoalsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiGoalsResponseBody$outboundSchema;
  /** @deprecated use `GetApiGoalsResponseBody$Outbound` instead. */
  export type Outbound = GetApiGoalsResponseBody$Outbound;
}

export function getApiGoalsResponseBodyToJSON(
  getApiGoalsResponseBody: GetApiGoalsResponseBody,
): string {
  return JSON.stringify(
    GetApiGoalsResponseBody$outboundSchema.parse(getApiGoalsResponseBody),
  );
}

export function getApiGoalsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiGoalsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiGoalsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiGoalsResponseBody' from JSON`,
  );
}

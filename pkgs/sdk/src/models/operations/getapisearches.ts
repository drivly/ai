/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiSearchesLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Searches = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiSearchesResponseBody = {
  links?: GetApiSearchesLinks | undefined;
  searches?: { [k: string]: Searches } | undefined;
};

/** @internal */
export const GetApiSearchesLinks$inboundSchema: z.ZodType<
  GetApiSearchesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiSearchesLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiSearchesLinks$outboundSchema: z.ZodType<
  GetApiSearchesLinks$Outbound,
  z.ZodTypeDef,
  GetApiSearchesLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiSearchesLinks$ {
  /** @deprecated use `GetApiSearchesLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiSearchesLinks$inboundSchema;
  /** @deprecated use `GetApiSearchesLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiSearchesLinks$outboundSchema;
  /** @deprecated use `GetApiSearchesLinks$Outbound` instead. */
  export type Outbound = GetApiSearchesLinks$Outbound;
}

export function getApiSearchesLinksToJSON(
  getApiSearchesLinks: GetApiSearchesLinks,
): string {
  return JSON.stringify(
    GetApiSearchesLinks$outboundSchema.parse(getApiSearchesLinks),
  );
}

export function getApiSearchesLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiSearchesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiSearchesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiSearchesLinks' from JSON`,
  );
}

/** @internal */
export const Searches$inboundSchema: z.ZodType<
  Searches,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Searches$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Searches$outboundSchema: z.ZodType<
  Searches$Outbound,
  z.ZodTypeDef,
  Searches
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Searches$ {
  /** @deprecated use `Searches$inboundSchema` instead. */
  export const inboundSchema = Searches$inboundSchema;
  /** @deprecated use `Searches$outboundSchema` instead. */
  export const outboundSchema = Searches$outboundSchema;
  /** @deprecated use `Searches$Outbound` instead. */
  export type Outbound = Searches$Outbound;
}

export function searchesToJSON(searches: Searches): string {
  return JSON.stringify(Searches$outboundSchema.parse(searches));
}

export function searchesFromJSON(
  jsonString: string,
): SafeParseResult<Searches, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Searches$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Searches' from JSON`,
  );
}

/** @internal */
export const GetApiSearchesResponseBody$inboundSchema: z.ZodType<
  GetApiSearchesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiSearchesLinks$inboundSchema).optional(),
  searches: z.record(z.lazy(() => Searches$inboundSchema)).optional(),
});

/** @internal */
export type GetApiSearchesResponseBody$Outbound = {
  links?: GetApiSearchesLinks$Outbound | undefined;
  searches?: { [k: string]: Searches$Outbound } | undefined;
};

/** @internal */
export const GetApiSearchesResponseBody$outboundSchema: z.ZodType<
  GetApiSearchesResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiSearchesResponseBody
> = z.object({
  links: z.lazy(() => GetApiSearchesLinks$outboundSchema).optional(),
  searches: z.record(z.lazy(() => Searches$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiSearchesResponseBody$ {
  /** @deprecated use `GetApiSearchesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiSearchesResponseBody$inboundSchema;
  /** @deprecated use `GetApiSearchesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiSearchesResponseBody$outboundSchema;
  /** @deprecated use `GetApiSearchesResponseBody$Outbound` instead. */
  export type Outbound = GetApiSearchesResponseBody$Outbound;
}

export function getApiSearchesResponseBodyToJSON(
  getApiSearchesResponseBody: GetApiSearchesResponseBody,
): string {
  return JSON.stringify(
    GetApiSearchesResponseBody$outboundSchema.parse(getApiSearchesResponseBody),
  );
}

export function getApiSearchesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiSearchesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiSearchesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiSearchesResponseBody' from JSON`,
  );
}

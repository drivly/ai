/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Links = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Functions = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiFunctionsResponseBody = {
  links?: Links | undefined;
  functions?: { [k: string]: Functions } | undefined;
};

/** @internal */
export const Links$inboundSchema: z.ZodType<Links, z.ZodTypeDef, unknown> = z
  .object({
    home: z.string().optional(),
    next: z.string().optional(),
    prev: z.string().optional(),
  });

/** @internal */
export type Links$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const Links$outboundSchema: z.ZodType<
  Links$Outbound,
  z.ZodTypeDef,
  Links
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Links$ {
  /** @deprecated use `Links$inboundSchema` instead. */
  export const inboundSchema = Links$inboundSchema;
  /** @deprecated use `Links$outboundSchema` instead. */
  export const outboundSchema = Links$outboundSchema;
  /** @deprecated use `Links$Outbound` instead. */
  export type Outbound = Links$Outbound;
}

export function linksToJSON(links: Links): string {
  return JSON.stringify(Links$outboundSchema.parse(links));
}

export function linksFromJSON(
  jsonString: string,
): SafeParseResult<Links, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Links$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Links' from JSON`,
  );
}

/** @internal */
export const Functions$inboundSchema: z.ZodType<
  Functions,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Functions$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Functions$outboundSchema: z.ZodType<
  Functions$Outbound,
  z.ZodTypeDef,
  Functions
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Functions$ {
  /** @deprecated use `Functions$inboundSchema` instead. */
  export const inboundSchema = Functions$inboundSchema;
  /** @deprecated use `Functions$outboundSchema` instead. */
  export const outboundSchema = Functions$outboundSchema;
  /** @deprecated use `Functions$Outbound` instead. */
  export type Outbound = Functions$Outbound;
}

export function functionsToJSON(functions: Functions): string {
  return JSON.stringify(Functions$outboundSchema.parse(functions));
}

export function functionsFromJSON(
  jsonString: string,
): SafeParseResult<Functions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Functions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Functions' from JSON`,
  );
}

/** @internal */
export const GetApiFunctionsResponseBody$inboundSchema: z.ZodType<
  GetApiFunctionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => Links$inboundSchema).optional(),
  functions: z.record(z.lazy(() => Functions$inboundSchema)).optional(),
});

/** @internal */
export type GetApiFunctionsResponseBody$Outbound = {
  links?: Links$Outbound | undefined;
  functions?: { [k: string]: Functions$Outbound } | undefined;
};

/** @internal */
export const GetApiFunctionsResponseBody$outboundSchema: z.ZodType<
  GetApiFunctionsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiFunctionsResponseBody
> = z.object({
  links: z.lazy(() => Links$outboundSchema).optional(),
  functions: z.record(z.lazy(() => Functions$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiFunctionsResponseBody$ {
  /** @deprecated use `GetApiFunctionsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiFunctionsResponseBody$inboundSchema;
  /** @deprecated use `GetApiFunctionsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiFunctionsResponseBody$outboundSchema;
  /** @deprecated use `GetApiFunctionsResponseBody$Outbound` instead. */
  export type Outbound = GetApiFunctionsResponseBody$Outbound;
}

export function getApiFunctionsResponseBodyToJSON(
  getApiFunctionsResponseBody: GetApiFunctionsResponseBody,
): string {
  return JSON.stringify(
    GetApiFunctionsResponseBody$outboundSchema.parse(
      getApiFunctionsResponseBody,
    ),
  );
}

export function getApiFunctionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiFunctionsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiFunctionsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiFunctionsResponseBody' from JSON`,
  );
}

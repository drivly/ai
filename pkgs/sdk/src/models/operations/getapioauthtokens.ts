/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiOauthTokensLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type OauthTokens = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiOauthTokensResponseBody = {
  links?: GetApiOauthTokensLinks | undefined;
  oauthTokens?: { [k: string]: OauthTokens } | undefined;
};

/** @internal */
export const GetApiOauthTokensLinks$inboundSchema: z.ZodType<
  GetApiOauthTokensLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiOauthTokensLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiOauthTokensLinks$outboundSchema: z.ZodType<
  GetApiOauthTokensLinks$Outbound,
  z.ZodTypeDef,
  GetApiOauthTokensLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiOauthTokensLinks$ {
  /** @deprecated use `GetApiOauthTokensLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiOauthTokensLinks$inboundSchema;
  /** @deprecated use `GetApiOauthTokensLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiOauthTokensLinks$outboundSchema;
  /** @deprecated use `GetApiOauthTokensLinks$Outbound` instead. */
  export type Outbound = GetApiOauthTokensLinks$Outbound;
}

export function getApiOauthTokensLinksToJSON(
  getApiOauthTokensLinks: GetApiOauthTokensLinks,
): string {
  return JSON.stringify(
    GetApiOauthTokensLinks$outboundSchema.parse(getApiOauthTokensLinks),
  );
}

export function getApiOauthTokensLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiOauthTokensLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiOauthTokensLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiOauthTokensLinks' from JSON`,
  );
}

/** @internal */
export const OauthTokens$inboundSchema: z.ZodType<
  OauthTokens,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type OauthTokens$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const OauthTokens$outboundSchema: z.ZodType<
  OauthTokens$Outbound,
  z.ZodTypeDef,
  OauthTokens
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OauthTokens$ {
  /** @deprecated use `OauthTokens$inboundSchema` instead. */
  export const inboundSchema = OauthTokens$inboundSchema;
  /** @deprecated use `OauthTokens$outboundSchema` instead. */
  export const outboundSchema = OauthTokens$outboundSchema;
  /** @deprecated use `OauthTokens$Outbound` instead. */
  export type Outbound = OauthTokens$Outbound;
}

export function oauthTokensToJSON(oauthTokens: OauthTokens): string {
  return JSON.stringify(OauthTokens$outboundSchema.parse(oauthTokens));
}

export function oauthTokensFromJSON(
  jsonString: string,
): SafeParseResult<OauthTokens, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OauthTokens$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OauthTokens' from JSON`,
  );
}

/** @internal */
export const GetApiOauthTokensResponseBody$inboundSchema: z.ZodType<
  GetApiOauthTokensResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiOauthTokensLinks$inboundSchema).optional(),
  "oauth-tokens": z.record(z.lazy(() => OauthTokens$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "oauth-tokens": "oauthTokens",
  });
});

/** @internal */
export type GetApiOauthTokensResponseBody$Outbound = {
  links?: GetApiOauthTokensLinks$Outbound | undefined;
  "oauth-tokens"?: { [k: string]: OauthTokens$Outbound } | undefined;
};

/** @internal */
export const GetApiOauthTokensResponseBody$outboundSchema: z.ZodType<
  GetApiOauthTokensResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiOauthTokensResponseBody
> = z.object({
  links: z.lazy(() => GetApiOauthTokensLinks$outboundSchema).optional(),
  oauthTokens: z.record(z.lazy(() => OauthTokens$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    oauthTokens: "oauth-tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiOauthTokensResponseBody$ {
  /** @deprecated use `GetApiOauthTokensResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiOauthTokensResponseBody$inboundSchema;
  /** @deprecated use `GetApiOauthTokensResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiOauthTokensResponseBody$outboundSchema;
  /** @deprecated use `GetApiOauthTokensResponseBody$Outbound` instead. */
  export type Outbound = GetApiOauthTokensResponseBody$Outbound;
}

export function getApiOauthTokensResponseBodyToJSON(
  getApiOauthTokensResponseBody: GetApiOauthTokensResponseBody,
): string {
  return JSON.stringify(
    GetApiOauthTokensResponseBody$outboundSchema.parse(
      getApiOauthTokensResponseBody,
    ),
  );
}

export function getApiOauthTokensResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiOauthTokensResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiOauthTokensResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiOauthTokensResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiIntegrationTriggersLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type IntegrationTriggers = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiIntegrationTriggersResponseBody = {
  links?: GetApiIntegrationTriggersLinks | undefined;
  integrationTriggers?: { [k: string]: IntegrationTriggers } | undefined;
};

/** @internal */
export const GetApiIntegrationTriggersLinks$inboundSchema: z.ZodType<
  GetApiIntegrationTriggersLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiIntegrationTriggersLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiIntegrationTriggersLinks$outboundSchema: z.ZodType<
  GetApiIntegrationTriggersLinks$Outbound,
  z.ZodTypeDef,
  GetApiIntegrationTriggersLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiIntegrationTriggersLinks$ {
  /** @deprecated use `GetApiIntegrationTriggersLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiIntegrationTriggersLinks$inboundSchema;
  /** @deprecated use `GetApiIntegrationTriggersLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiIntegrationTriggersLinks$outboundSchema;
  /** @deprecated use `GetApiIntegrationTriggersLinks$Outbound` instead. */
  export type Outbound = GetApiIntegrationTriggersLinks$Outbound;
}

export function getApiIntegrationTriggersLinksToJSON(
  getApiIntegrationTriggersLinks: GetApiIntegrationTriggersLinks,
): string {
  return JSON.stringify(
    GetApiIntegrationTriggersLinks$outboundSchema.parse(
      getApiIntegrationTriggersLinks,
    ),
  );
}

export function getApiIntegrationTriggersLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiIntegrationTriggersLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiIntegrationTriggersLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiIntegrationTriggersLinks' from JSON`,
  );
}

/** @internal */
export const IntegrationTriggers$inboundSchema: z.ZodType<
  IntegrationTriggers,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type IntegrationTriggers$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const IntegrationTriggers$outboundSchema: z.ZodType<
  IntegrationTriggers$Outbound,
  z.ZodTypeDef,
  IntegrationTriggers
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationTriggers$ {
  /** @deprecated use `IntegrationTriggers$inboundSchema` instead. */
  export const inboundSchema = IntegrationTriggers$inboundSchema;
  /** @deprecated use `IntegrationTriggers$outboundSchema` instead. */
  export const outboundSchema = IntegrationTriggers$outboundSchema;
  /** @deprecated use `IntegrationTriggers$Outbound` instead. */
  export type Outbound = IntegrationTriggers$Outbound;
}

export function integrationTriggersToJSON(
  integrationTriggers: IntegrationTriggers,
): string {
  return JSON.stringify(
    IntegrationTriggers$outboundSchema.parse(integrationTriggers),
  );
}

export function integrationTriggersFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationTriggers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationTriggers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationTriggers' from JSON`,
  );
}

/** @internal */
export const GetApiIntegrationTriggersResponseBody$inboundSchema: z.ZodType<
  GetApiIntegrationTriggersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiIntegrationTriggersLinks$inboundSchema).optional(),
  integrationTriggers: z.record(z.lazy(() => IntegrationTriggers$inboundSchema))
    .optional(),
});

/** @internal */
export type GetApiIntegrationTriggersResponseBody$Outbound = {
  links?: GetApiIntegrationTriggersLinks$Outbound | undefined;
  integrationTriggers?:
    | { [k: string]: IntegrationTriggers$Outbound }
    | undefined;
};

/** @internal */
export const GetApiIntegrationTriggersResponseBody$outboundSchema: z.ZodType<
  GetApiIntegrationTriggersResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiIntegrationTriggersResponseBody
> = z.object({
  links: z.lazy(() => GetApiIntegrationTriggersLinks$outboundSchema).optional(),
  integrationTriggers: z.record(
    z.lazy(() => IntegrationTriggers$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiIntegrationTriggersResponseBody$ {
  /** @deprecated use `GetApiIntegrationTriggersResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetApiIntegrationTriggersResponseBody$inboundSchema;
  /** @deprecated use `GetApiIntegrationTriggersResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetApiIntegrationTriggersResponseBody$outboundSchema;
  /** @deprecated use `GetApiIntegrationTriggersResponseBody$Outbound` instead. */
  export type Outbound = GetApiIntegrationTriggersResponseBody$Outbound;
}

export function getApiIntegrationTriggersResponseBodyToJSON(
  getApiIntegrationTriggersResponseBody: GetApiIntegrationTriggersResponseBody,
): string {
  return JSON.stringify(
    GetApiIntegrationTriggersResponseBody$outboundSchema.parse(
      getApiIntegrationTriggersResponseBody,
    ),
  );
}

export function getApiIntegrationTriggersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiIntegrationTriggersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiIntegrationTriggersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiIntegrationTriggersResponseBody' from JSON`,
  );
}

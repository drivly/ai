/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiLabsIdRequest = {
  /**
   * The ID of the Lab
   */
  id: string;
};

/**
 * Successfully deleted
 */
export type DeleteApiLabsIdResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiLabsIdRequest$inboundSchema: z.ZodType<
  DeleteApiLabsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteApiLabsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteApiLabsIdRequest$outboundSchema: z.ZodType<
  DeleteApiLabsIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiLabsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiLabsIdRequest$ {
  /** @deprecated use `DeleteApiLabsIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApiLabsIdRequest$inboundSchema;
  /** @deprecated use `DeleteApiLabsIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApiLabsIdRequest$outboundSchema;
  /** @deprecated use `DeleteApiLabsIdRequest$Outbound` instead. */
  export type Outbound = DeleteApiLabsIdRequest$Outbound;
}

export function deleteApiLabsIdRequestToJSON(
  deleteApiLabsIdRequest: DeleteApiLabsIdRequest,
): string {
  return JSON.stringify(
    DeleteApiLabsIdRequest$outboundSchema.parse(deleteApiLabsIdRequest),
  );
}

export function deleteApiLabsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiLabsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiLabsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiLabsIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteApiLabsIdResponseBody$inboundSchema: z.ZodType<
  DeleteApiLabsIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteApiLabsIdResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiLabsIdResponseBody$outboundSchema: z.ZodType<
  DeleteApiLabsIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteApiLabsIdResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiLabsIdResponseBody$ {
  /** @deprecated use `DeleteApiLabsIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteApiLabsIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteApiLabsIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteApiLabsIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteApiLabsIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteApiLabsIdResponseBody$Outbound;
}

export function deleteApiLabsIdResponseBodyToJSON(
  deleteApiLabsIdResponseBody: DeleteApiLabsIdResponseBody,
): string {
  return JSON.stringify(
    DeleteApiLabsIdResponseBody$outboundSchema.parse(
      deleteApiLabsIdResponseBody,
    ),
  );
}

export function deleteApiLabsIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiLabsIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiLabsIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiLabsIdResponseBody' from JSON`,
  );
}

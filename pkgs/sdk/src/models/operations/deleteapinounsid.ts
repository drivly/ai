/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiNounsIdRequest = {
  /**
   * The ID of the Noun
   */
  id: string;
};

/**
 * Successfully deleted
 */
export type DeleteApiNounsIdResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiNounsIdRequest$inboundSchema: z.ZodType<
  DeleteApiNounsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteApiNounsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteApiNounsIdRequest$outboundSchema: z.ZodType<
  DeleteApiNounsIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiNounsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiNounsIdRequest$ {
  /** @deprecated use `DeleteApiNounsIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApiNounsIdRequest$inboundSchema;
  /** @deprecated use `DeleteApiNounsIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApiNounsIdRequest$outboundSchema;
  /** @deprecated use `DeleteApiNounsIdRequest$Outbound` instead. */
  export type Outbound = DeleteApiNounsIdRequest$Outbound;
}

export function deleteApiNounsIdRequestToJSON(
  deleteApiNounsIdRequest: DeleteApiNounsIdRequest,
): string {
  return JSON.stringify(
    DeleteApiNounsIdRequest$outboundSchema.parse(deleteApiNounsIdRequest),
  );
}

export function deleteApiNounsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiNounsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiNounsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiNounsIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteApiNounsIdResponseBody$inboundSchema: z.ZodType<
  DeleteApiNounsIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteApiNounsIdResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiNounsIdResponseBody$outboundSchema: z.ZodType<
  DeleteApiNounsIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteApiNounsIdResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiNounsIdResponseBody$ {
  /** @deprecated use `DeleteApiNounsIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteApiNounsIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteApiNounsIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteApiNounsIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteApiNounsIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteApiNounsIdResponseBody$Outbound;
}

export function deleteApiNounsIdResponseBodyToJSON(
  deleteApiNounsIdResponseBody: DeleteApiNounsIdResponseBody,
): string {
  return JSON.stringify(
    DeleteApiNounsIdResponseBody$outboundSchema.parse(
      deleteApiNounsIdResponseBody,
    ),
  );
}

export function deleteApiNounsIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiNounsIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiNounsIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiNounsIdResponseBody' from JSON`,
  );
}

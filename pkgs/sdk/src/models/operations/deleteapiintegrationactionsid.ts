/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiIntegrationActionsIdRequest = {
  /**
   * The ID of the Action
   */
  id: string;
};

/**
 * Successfully deleted
 */
export type DeleteApiIntegrationActionsIdResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiIntegrationActionsIdRequest$inboundSchema: z.ZodType<
  DeleteApiIntegrationActionsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteApiIntegrationActionsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteApiIntegrationActionsIdRequest$outboundSchema: z.ZodType<
  DeleteApiIntegrationActionsIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiIntegrationActionsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiIntegrationActionsIdRequest$ {
  /** @deprecated use `DeleteApiIntegrationActionsIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteApiIntegrationActionsIdRequest$inboundSchema;
  /** @deprecated use `DeleteApiIntegrationActionsIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteApiIntegrationActionsIdRequest$outboundSchema;
  /** @deprecated use `DeleteApiIntegrationActionsIdRequest$Outbound` instead. */
  export type Outbound = DeleteApiIntegrationActionsIdRequest$Outbound;
}

export function deleteApiIntegrationActionsIdRequestToJSON(
  deleteApiIntegrationActionsIdRequest: DeleteApiIntegrationActionsIdRequest,
): string {
  return JSON.stringify(
    DeleteApiIntegrationActionsIdRequest$outboundSchema.parse(
      deleteApiIntegrationActionsIdRequest,
    ),
  );
}

export function deleteApiIntegrationActionsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiIntegrationActionsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteApiIntegrationActionsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiIntegrationActionsIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteApiIntegrationActionsIdResponseBody$inboundSchema: z.ZodType<
  DeleteApiIntegrationActionsIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteApiIntegrationActionsIdResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiIntegrationActionsIdResponseBody$outboundSchema:
  z.ZodType<
    DeleteApiIntegrationActionsIdResponseBody$Outbound,
    z.ZodTypeDef,
    DeleteApiIntegrationActionsIdResponseBody
  > = z.object({
    message: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiIntegrationActionsIdResponseBody$ {
  /** @deprecated use `DeleteApiIntegrationActionsIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DeleteApiIntegrationActionsIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteApiIntegrationActionsIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DeleteApiIntegrationActionsIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteApiIntegrationActionsIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteApiIntegrationActionsIdResponseBody$Outbound;
}

export function deleteApiIntegrationActionsIdResponseBodyToJSON(
  deleteApiIntegrationActionsIdResponseBody:
    DeleteApiIntegrationActionsIdResponseBody,
): string {
  return JSON.stringify(
    DeleteApiIntegrationActionsIdResponseBody$outboundSchema.parse(
      deleteApiIntegrationActionsIdResponseBody,
    ),
  );
}

export function deleteApiIntegrationActionsIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteApiIntegrationActionsIdResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteApiIntegrationActionsIdResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteApiIntegrationActionsIdResponseBody' from JSON`,
  );
}

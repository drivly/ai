/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiDomainsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Domains = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiDomainsResponseBody = {
  links?: GetApiDomainsLinks | undefined;
  domains?: { [k: string]: Domains } | undefined;
};

/** @internal */
export const GetApiDomainsLinks$inboundSchema: z.ZodType<
  GetApiDomainsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiDomainsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiDomainsLinks$outboundSchema: z.ZodType<
  GetApiDomainsLinks$Outbound,
  z.ZodTypeDef,
  GetApiDomainsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiDomainsLinks$ {
  /** @deprecated use `GetApiDomainsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiDomainsLinks$inboundSchema;
  /** @deprecated use `GetApiDomainsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiDomainsLinks$outboundSchema;
  /** @deprecated use `GetApiDomainsLinks$Outbound` instead. */
  export type Outbound = GetApiDomainsLinks$Outbound;
}

export function getApiDomainsLinksToJSON(
  getApiDomainsLinks: GetApiDomainsLinks,
): string {
  return JSON.stringify(
    GetApiDomainsLinks$outboundSchema.parse(getApiDomainsLinks),
  );
}

export function getApiDomainsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiDomainsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiDomainsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiDomainsLinks' from JSON`,
  );
}

/** @internal */
export const Domains$inboundSchema: z.ZodType<Domains, z.ZodTypeDef, unknown> =
  z.object({
    href: z.string().optional(),
  });

/** @internal */
export type Domains$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Domains$outboundSchema: z.ZodType<
  Domains$Outbound,
  z.ZodTypeDef,
  Domains
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Domains$ {
  /** @deprecated use `Domains$inboundSchema` instead. */
  export const inboundSchema = Domains$inboundSchema;
  /** @deprecated use `Domains$outboundSchema` instead. */
  export const outboundSchema = Domains$outboundSchema;
  /** @deprecated use `Domains$Outbound` instead. */
  export type Outbound = Domains$Outbound;
}

export function domainsToJSON(domains: Domains): string {
  return JSON.stringify(Domains$outboundSchema.parse(domains));
}

export function domainsFromJSON(
  jsonString: string,
): SafeParseResult<Domains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Domains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Domains' from JSON`,
  );
}

/** @internal */
export const GetApiDomainsResponseBody$inboundSchema: z.ZodType<
  GetApiDomainsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiDomainsLinks$inboundSchema).optional(),
  domains: z.record(z.lazy(() => Domains$inboundSchema)).optional(),
});

/** @internal */
export type GetApiDomainsResponseBody$Outbound = {
  links?: GetApiDomainsLinks$Outbound | undefined;
  domains?: { [k: string]: Domains$Outbound } | undefined;
};

/** @internal */
export const GetApiDomainsResponseBody$outboundSchema: z.ZodType<
  GetApiDomainsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiDomainsResponseBody
> = z.object({
  links: z.lazy(() => GetApiDomainsLinks$outboundSchema).optional(),
  domains: z.record(z.lazy(() => Domains$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiDomainsResponseBody$ {
  /** @deprecated use `GetApiDomainsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiDomainsResponseBody$inboundSchema;
  /** @deprecated use `GetApiDomainsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiDomainsResponseBody$outboundSchema;
  /** @deprecated use `GetApiDomainsResponseBody$Outbound` instead. */
  export type Outbound = GetApiDomainsResponseBody$Outbound;
}

export function getApiDomainsResponseBodyToJSON(
  getApiDomainsResponseBody: GetApiDomainsResponseBody,
): string {
  return JSON.stringify(
    GetApiDomainsResponseBody$outboundSchema.parse(getApiDomainsResponseBody),
  );
}

export function getApiDomainsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiDomainsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiDomainsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiDomainsResponseBody' from JSON`,
  );
}

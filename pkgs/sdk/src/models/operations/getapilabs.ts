/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiLabsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Labs = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiLabsResponseBody = {
  links?: GetApiLabsLinks | undefined;
  labs?: { [k: string]: Labs } | undefined;
};

/** @internal */
export const GetApiLabsLinks$inboundSchema: z.ZodType<
  GetApiLabsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiLabsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiLabsLinks$outboundSchema: z.ZodType<
  GetApiLabsLinks$Outbound,
  z.ZodTypeDef,
  GetApiLabsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLabsLinks$ {
  /** @deprecated use `GetApiLabsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiLabsLinks$inboundSchema;
  /** @deprecated use `GetApiLabsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiLabsLinks$outboundSchema;
  /** @deprecated use `GetApiLabsLinks$Outbound` instead. */
  export type Outbound = GetApiLabsLinks$Outbound;
}

export function getApiLabsLinksToJSON(
  getApiLabsLinks: GetApiLabsLinks,
): string {
  return JSON.stringify(GetApiLabsLinks$outboundSchema.parse(getApiLabsLinks));
}

export function getApiLabsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiLabsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiLabsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiLabsLinks' from JSON`,
  );
}

/** @internal */
export const Labs$inboundSchema: z.ZodType<Labs, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
  });

/** @internal */
export type Labs$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Labs$outboundSchema: z.ZodType<Labs$Outbound, z.ZodTypeDef, Labs> =
  z.object({
    href: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Labs$ {
  /** @deprecated use `Labs$inboundSchema` instead. */
  export const inboundSchema = Labs$inboundSchema;
  /** @deprecated use `Labs$outboundSchema` instead. */
  export const outboundSchema = Labs$outboundSchema;
  /** @deprecated use `Labs$Outbound` instead. */
  export type Outbound = Labs$Outbound;
}

export function labsToJSON(labs: Labs): string {
  return JSON.stringify(Labs$outboundSchema.parse(labs));
}

export function labsFromJSON(
  jsonString: string,
): SafeParseResult<Labs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Labs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Labs' from JSON`,
  );
}

/** @internal */
export const GetApiLabsResponseBody$inboundSchema: z.ZodType<
  GetApiLabsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiLabsLinks$inboundSchema).optional(),
  labs: z.record(z.lazy(() => Labs$inboundSchema)).optional(),
});

/** @internal */
export type GetApiLabsResponseBody$Outbound = {
  links?: GetApiLabsLinks$Outbound | undefined;
  labs?: { [k: string]: Labs$Outbound } | undefined;
};

/** @internal */
export const GetApiLabsResponseBody$outboundSchema: z.ZodType<
  GetApiLabsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiLabsResponseBody
> = z.object({
  links: z.lazy(() => GetApiLabsLinks$outboundSchema).optional(),
  labs: z.record(z.lazy(() => Labs$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLabsResponseBody$ {
  /** @deprecated use `GetApiLabsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiLabsResponseBody$inboundSchema;
  /** @deprecated use `GetApiLabsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiLabsResponseBody$outboundSchema;
  /** @deprecated use `GetApiLabsResponseBody$Outbound` instead. */
  export type Outbound = GetApiLabsResponseBody$Outbound;
}

export function getApiLabsResponseBodyToJSON(
  getApiLabsResponseBody: GetApiLabsResponseBody,
): string {
  return JSON.stringify(
    GetApiLabsResponseBody$outboundSchema.parse(getApiLabsResponseBody),
  );
}

export function getApiLabsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiLabsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiLabsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiLabsResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiProvidersLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Providers = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiProvidersResponseBody = {
  links?: GetApiProvidersLinks | undefined;
  providers?: { [k: string]: Providers } | undefined;
};

/** @internal */
export const GetApiProvidersLinks$inboundSchema: z.ZodType<
  GetApiProvidersLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiProvidersLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiProvidersLinks$outboundSchema: z.ZodType<
  GetApiProvidersLinks$Outbound,
  z.ZodTypeDef,
  GetApiProvidersLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiProvidersLinks$ {
  /** @deprecated use `GetApiProvidersLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiProvidersLinks$inboundSchema;
  /** @deprecated use `GetApiProvidersLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiProvidersLinks$outboundSchema;
  /** @deprecated use `GetApiProvidersLinks$Outbound` instead. */
  export type Outbound = GetApiProvidersLinks$Outbound;
}

export function getApiProvidersLinksToJSON(
  getApiProvidersLinks: GetApiProvidersLinks,
): string {
  return JSON.stringify(
    GetApiProvidersLinks$outboundSchema.parse(getApiProvidersLinks),
  );
}

export function getApiProvidersLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiProvidersLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiProvidersLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiProvidersLinks' from JSON`,
  );
}

/** @internal */
export const Providers$inboundSchema: z.ZodType<
  Providers,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Providers$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Providers$outboundSchema: z.ZodType<
  Providers$Outbound,
  z.ZodTypeDef,
  Providers
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Providers$ {
  /** @deprecated use `Providers$inboundSchema` instead. */
  export const inboundSchema = Providers$inboundSchema;
  /** @deprecated use `Providers$outboundSchema` instead. */
  export const outboundSchema = Providers$outboundSchema;
  /** @deprecated use `Providers$Outbound` instead. */
  export type Outbound = Providers$Outbound;
}

export function providersToJSON(providers: Providers): string {
  return JSON.stringify(Providers$outboundSchema.parse(providers));
}

export function providersFromJSON(
  jsonString: string,
): SafeParseResult<Providers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Providers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Providers' from JSON`,
  );
}

/** @internal */
export const GetApiProvidersResponseBody$inboundSchema: z.ZodType<
  GetApiProvidersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiProvidersLinks$inboundSchema).optional(),
  providers: z.record(z.lazy(() => Providers$inboundSchema)).optional(),
});

/** @internal */
export type GetApiProvidersResponseBody$Outbound = {
  links?: GetApiProvidersLinks$Outbound | undefined;
  providers?: { [k: string]: Providers$Outbound } | undefined;
};

/** @internal */
export const GetApiProvidersResponseBody$outboundSchema: z.ZodType<
  GetApiProvidersResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiProvidersResponseBody
> = z.object({
  links: z.lazy(() => GetApiProvidersLinks$outboundSchema).optional(),
  providers: z.record(z.lazy(() => Providers$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiProvidersResponseBody$ {
  /** @deprecated use `GetApiProvidersResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiProvidersResponseBody$inboundSchema;
  /** @deprecated use `GetApiProvidersResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiProvidersResponseBody$outboundSchema;
  /** @deprecated use `GetApiProvidersResponseBody$Outbound` instead. */
  export type Outbound = GetApiProvidersResponseBody$Outbound;
}

export function getApiProvidersResponseBodyToJSON(
  getApiProvidersResponseBody: GetApiProvidersResponseBody,
): string {
  return JSON.stringify(
    GetApiProvidersResponseBody$outboundSchema.parse(
      getApiProvidersResponseBody,
    ),
  );
}

export function getApiProvidersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiProvidersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiProvidersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiProvidersResponseBody' from JSON`,
  );
}

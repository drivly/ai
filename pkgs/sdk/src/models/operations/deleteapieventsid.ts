/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiEventsIdRequest = {
  /**
   * The ID of the Event
   */
  id: string;
};

/**
 * Successfully deleted
 */
export type DeleteApiEventsIdResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiEventsIdRequest$inboundSchema: z.ZodType<
  DeleteApiEventsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteApiEventsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteApiEventsIdRequest$outboundSchema: z.ZodType<
  DeleteApiEventsIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiEventsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiEventsIdRequest$ {
  /** @deprecated use `DeleteApiEventsIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApiEventsIdRequest$inboundSchema;
  /** @deprecated use `DeleteApiEventsIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApiEventsIdRequest$outboundSchema;
  /** @deprecated use `DeleteApiEventsIdRequest$Outbound` instead. */
  export type Outbound = DeleteApiEventsIdRequest$Outbound;
}

export function deleteApiEventsIdRequestToJSON(
  deleteApiEventsIdRequest: DeleteApiEventsIdRequest,
): string {
  return JSON.stringify(
    DeleteApiEventsIdRequest$outboundSchema.parse(deleteApiEventsIdRequest),
  );
}

export function deleteApiEventsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiEventsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiEventsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiEventsIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteApiEventsIdResponseBody$inboundSchema: z.ZodType<
  DeleteApiEventsIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteApiEventsIdResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiEventsIdResponseBody$outboundSchema: z.ZodType<
  DeleteApiEventsIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteApiEventsIdResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiEventsIdResponseBody$ {
  /** @deprecated use `DeleteApiEventsIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteApiEventsIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteApiEventsIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteApiEventsIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteApiEventsIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteApiEventsIdResponseBody$Outbound;
}

export function deleteApiEventsIdResponseBodyToJSON(
  deleteApiEventsIdResponseBody: DeleteApiEventsIdResponseBody,
): string {
  return JSON.stringify(
    DeleteApiEventsIdResponseBody$outboundSchema.parse(
      deleteApiEventsIdResponseBody,
    ),
  );
}

export function deleteApiEventsIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiEventsIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiEventsIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiEventsIdResponseBody' from JSON`,
  );
}

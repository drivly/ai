/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiResourcesLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Resources = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiResourcesResponseBody = {
  links?: GetApiResourcesLinks | undefined;
  resources?: { [k: string]: Resources } | undefined;
};

/** @internal */
export const GetApiResourcesLinks$inboundSchema: z.ZodType<
  GetApiResourcesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiResourcesLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiResourcesLinks$outboundSchema: z.ZodType<
  GetApiResourcesLinks$Outbound,
  z.ZodTypeDef,
  GetApiResourcesLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiResourcesLinks$ {
  /** @deprecated use `GetApiResourcesLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiResourcesLinks$inboundSchema;
  /** @deprecated use `GetApiResourcesLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiResourcesLinks$outboundSchema;
  /** @deprecated use `GetApiResourcesLinks$Outbound` instead. */
  export type Outbound = GetApiResourcesLinks$Outbound;
}

export function getApiResourcesLinksToJSON(
  getApiResourcesLinks: GetApiResourcesLinks,
): string {
  return JSON.stringify(
    GetApiResourcesLinks$outboundSchema.parse(getApiResourcesLinks),
  );
}

export function getApiResourcesLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiResourcesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiResourcesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiResourcesLinks' from JSON`,
  );
}

/** @internal */
export const Resources$inboundSchema: z.ZodType<
  Resources,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Resources$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Resources$outboundSchema: z.ZodType<
  Resources$Outbound,
  z.ZodTypeDef,
  Resources
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Resources$ {
  /** @deprecated use `Resources$inboundSchema` instead. */
  export const inboundSchema = Resources$inboundSchema;
  /** @deprecated use `Resources$outboundSchema` instead. */
  export const outboundSchema = Resources$outboundSchema;
  /** @deprecated use `Resources$Outbound` instead. */
  export type Outbound = Resources$Outbound;
}

export function resourcesToJSON(resources: Resources): string {
  return JSON.stringify(Resources$outboundSchema.parse(resources));
}

export function resourcesFromJSON(
  jsonString: string,
): SafeParseResult<Resources, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Resources$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Resources' from JSON`,
  );
}

/** @internal */
export const GetApiResourcesResponseBody$inboundSchema: z.ZodType<
  GetApiResourcesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiResourcesLinks$inboundSchema).optional(),
  resources: z.record(z.lazy(() => Resources$inboundSchema)).optional(),
});

/** @internal */
export type GetApiResourcesResponseBody$Outbound = {
  links?: GetApiResourcesLinks$Outbound | undefined;
  resources?: { [k: string]: Resources$Outbound } | undefined;
};

/** @internal */
export const GetApiResourcesResponseBody$outboundSchema: z.ZodType<
  GetApiResourcesResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiResourcesResponseBody
> = z.object({
  links: z.lazy(() => GetApiResourcesLinks$outboundSchema).optional(),
  resources: z.record(z.lazy(() => Resources$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiResourcesResponseBody$ {
  /** @deprecated use `GetApiResourcesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiResourcesResponseBody$inboundSchema;
  /** @deprecated use `GetApiResourcesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiResourcesResponseBody$outboundSchema;
  /** @deprecated use `GetApiResourcesResponseBody$Outbound` instead. */
  export type Outbound = GetApiResourcesResponseBody$Outbound;
}

export function getApiResourcesResponseBodyToJSON(
  getApiResourcesResponseBody: GetApiResourcesResponseBody,
): string {
  return JSON.stringify(
    GetApiResourcesResponseBody$outboundSchema.parse(
      getApiResourcesResponseBody,
    ),
  );
}

export function getApiResourcesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiResourcesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiResourcesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiResourcesResponseBody' from JSON`,
  );
}

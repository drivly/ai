/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiModulesLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Modules = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiModulesResponseBody = {
  links?: GetApiModulesLinks | undefined;
  modules?: { [k: string]: Modules } | undefined;
};

/** @internal */
export const GetApiModulesLinks$inboundSchema: z.ZodType<
  GetApiModulesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiModulesLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiModulesLinks$outboundSchema: z.ZodType<
  GetApiModulesLinks$Outbound,
  z.ZodTypeDef,
  GetApiModulesLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiModulesLinks$ {
  /** @deprecated use `GetApiModulesLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiModulesLinks$inboundSchema;
  /** @deprecated use `GetApiModulesLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiModulesLinks$outboundSchema;
  /** @deprecated use `GetApiModulesLinks$Outbound` instead. */
  export type Outbound = GetApiModulesLinks$Outbound;
}

export function getApiModulesLinksToJSON(
  getApiModulesLinks: GetApiModulesLinks,
): string {
  return JSON.stringify(
    GetApiModulesLinks$outboundSchema.parse(getApiModulesLinks),
  );
}

export function getApiModulesLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiModulesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiModulesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiModulesLinks' from JSON`,
  );
}

/** @internal */
export const Modules$inboundSchema: z.ZodType<Modules, z.ZodTypeDef, unknown> =
  z.object({
    href: z.string().optional(),
  });

/** @internal */
export type Modules$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Modules$outboundSchema: z.ZodType<
  Modules$Outbound,
  z.ZodTypeDef,
  Modules
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Modules$ {
  /** @deprecated use `Modules$inboundSchema` instead. */
  export const inboundSchema = Modules$inboundSchema;
  /** @deprecated use `Modules$outboundSchema` instead. */
  export const outboundSchema = Modules$outboundSchema;
  /** @deprecated use `Modules$Outbound` instead. */
  export type Outbound = Modules$Outbound;
}

export function modulesToJSON(modules: Modules): string {
  return JSON.stringify(Modules$outboundSchema.parse(modules));
}

export function modulesFromJSON(
  jsonString: string,
): SafeParseResult<Modules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Modules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Modules' from JSON`,
  );
}

/** @internal */
export const GetApiModulesResponseBody$inboundSchema: z.ZodType<
  GetApiModulesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiModulesLinks$inboundSchema).optional(),
  modules: z.record(z.lazy(() => Modules$inboundSchema)).optional(),
});

/** @internal */
export type GetApiModulesResponseBody$Outbound = {
  links?: GetApiModulesLinks$Outbound | undefined;
  modules?: { [k: string]: Modules$Outbound } | undefined;
};

/** @internal */
export const GetApiModulesResponseBody$outboundSchema: z.ZodType<
  GetApiModulesResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiModulesResponseBody
> = z.object({
  links: z.lazy(() => GetApiModulesLinks$outboundSchema).optional(),
  modules: z.record(z.lazy(() => Modules$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiModulesResponseBody$ {
  /** @deprecated use `GetApiModulesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiModulesResponseBody$inboundSchema;
  /** @deprecated use `GetApiModulesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiModulesResponseBody$outboundSchema;
  /** @deprecated use `GetApiModulesResponseBody$Outbound` instead. */
  export type Outbound = GetApiModulesResponseBody$Outbound;
}

export function getApiModulesResponseBodyToJSON(
  getApiModulesResponseBody: GetApiModulesResponseBody,
): string {
  return JSON.stringify(
    GetApiModulesResponseBody$outboundSchema.parse(getApiModulesResponseBody),
  );
}

export function getApiModulesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiModulesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiModulesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiModulesResponseBody' from JSON`,
  );
}

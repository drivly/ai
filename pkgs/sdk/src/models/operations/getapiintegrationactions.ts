/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiIntegrationActionsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type IntegrationActions = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiIntegrationActionsResponseBody = {
  links?: GetApiIntegrationActionsLinks | undefined;
  integrationActions?: { [k: string]: IntegrationActions } | undefined;
};

/** @internal */
export const GetApiIntegrationActionsLinks$inboundSchema: z.ZodType<
  GetApiIntegrationActionsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiIntegrationActionsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiIntegrationActionsLinks$outboundSchema: z.ZodType<
  GetApiIntegrationActionsLinks$Outbound,
  z.ZodTypeDef,
  GetApiIntegrationActionsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiIntegrationActionsLinks$ {
  /** @deprecated use `GetApiIntegrationActionsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiIntegrationActionsLinks$inboundSchema;
  /** @deprecated use `GetApiIntegrationActionsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiIntegrationActionsLinks$outboundSchema;
  /** @deprecated use `GetApiIntegrationActionsLinks$Outbound` instead. */
  export type Outbound = GetApiIntegrationActionsLinks$Outbound;
}

export function getApiIntegrationActionsLinksToJSON(
  getApiIntegrationActionsLinks: GetApiIntegrationActionsLinks,
): string {
  return JSON.stringify(
    GetApiIntegrationActionsLinks$outboundSchema.parse(
      getApiIntegrationActionsLinks,
    ),
  );
}

export function getApiIntegrationActionsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiIntegrationActionsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiIntegrationActionsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiIntegrationActionsLinks' from JSON`,
  );
}

/** @internal */
export const IntegrationActions$inboundSchema: z.ZodType<
  IntegrationActions,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type IntegrationActions$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const IntegrationActions$outboundSchema: z.ZodType<
  IntegrationActions$Outbound,
  z.ZodTypeDef,
  IntegrationActions
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationActions$ {
  /** @deprecated use `IntegrationActions$inboundSchema` instead. */
  export const inboundSchema = IntegrationActions$inboundSchema;
  /** @deprecated use `IntegrationActions$outboundSchema` instead. */
  export const outboundSchema = IntegrationActions$outboundSchema;
  /** @deprecated use `IntegrationActions$Outbound` instead. */
  export type Outbound = IntegrationActions$Outbound;
}

export function integrationActionsToJSON(
  integrationActions: IntegrationActions,
): string {
  return JSON.stringify(
    IntegrationActions$outboundSchema.parse(integrationActions),
  );
}

export function integrationActionsFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationActions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationActions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationActions' from JSON`,
  );
}

/** @internal */
export const GetApiIntegrationActionsResponseBody$inboundSchema: z.ZodType<
  GetApiIntegrationActionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiIntegrationActionsLinks$inboundSchema).optional(),
  integrationActions: z.record(z.lazy(() => IntegrationActions$inboundSchema))
    .optional(),
});

/** @internal */
export type GetApiIntegrationActionsResponseBody$Outbound = {
  links?: GetApiIntegrationActionsLinks$Outbound | undefined;
  integrationActions?: { [k: string]: IntegrationActions$Outbound } | undefined;
};

/** @internal */
export const GetApiIntegrationActionsResponseBody$outboundSchema: z.ZodType<
  GetApiIntegrationActionsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiIntegrationActionsResponseBody
> = z.object({
  links: z.lazy(() => GetApiIntegrationActionsLinks$outboundSchema).optional(),
  integrationActions: z.record(z.lazy(() => IntegrationActions$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiIntegrationActionsResponseBody$ {
  /** @deprecated use `GetApiIntegrationActionsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetApiIntegrationActionsResponseBody$inboundSchema;
  /** @deprecated use `GetApiIntegrationActionsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetApiIntegrationActionsResponseBody$outboundSchema;
  /** @deprecated use `GetApiIntegrationActionsResponseBody$Outbound` instead. */
  export type Outbound = GetApiIntegrationActionsResponseBody$Outbound;
}

export function getApiIntegrationActionsResponseBodyToJSON(
  getApiIntegrationActionsResponseBody: GetApiIntegrationActionsResponseBody,
): string {
  return JSON.stringify(
    GetApiIntegrationActionsResponseBody$outboundSchema.parse(
      getApiIntegrationActionsResponseBody,
    ),
  );
}

export function getApiIntegrationActionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiIntegrationActionsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiIntegrationActionsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiIntegrationActionsResponseBody' from JSON`,
  );
}

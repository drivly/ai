/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiDatasetsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Datasets = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiDatasetsResponseBody = {
  links?: GetApiDatasetsLinks | undefined;
  datasets?: { [k: string]: Datasets } | undefined;
};

/** @internal */
export const GetApiDatasetsLinks$inboundSchema: z.ZodType<
  GetApiDatasetsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiDatasetsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiDatasetsLinks$outboundSchema: z.ZodType<
  GetApiDatasetsLinks$Outbound,
  z.ZodTypeDef,
  GetApiDatasetsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiDatasetsLinks$ {
  /** @deprecated use `GetApiDatasetsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiDatasetsLinks$inboundSchema;
  /** @deprecated use `GetApiDatasetsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiDatasetsLinks$outboundSchema;
  /** @deprecated use `GetApiDatasetsLinks$Outbound` instead. */
  export type Outbound = GetApiDatasetsLinks$Outbound;
}

export function getApiDatasetsLinksToJSON(
  getApiDatasetsLinks: GetApiDatasetsLinks,
): string {
  return JSON.stringify(
    GetApiDatasetsLinks$outboundSchema.parse(getApiDatasetsLinks),
  );
}

export function getApiDatasetsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiDatasetsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiDatasetsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiDatasetsLinks' from JSON`,
  );
}

/** @internal */
export const Datasets$inboundSchema: z.ZodType<
  Datasets,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Datasets$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Datasets$outboundSchema: z.ZodType<
  Datasets$Outbound,
  z.ZodTypeDef,
  Datasets
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Datasets$ {
  /** @deprecated use `Datasets$inboundSchema` instead. */
  export const inboundSchema = Datasets$inboundSchema;
  /** @deprecated use `Datasets$outboundSchema` instead. */
  export const outboundSchema = Datasets$outboundSchema;
  /** @deprecated use `Datasets$Outbound` instead. */
  export type Outbound = Datasets$Outbound;
}

export function datasetsToJSON(datasets: Datasets): string {
  return JSON.stringify(Datasets$outboundSchema.parse(datasets));
}

export function datasetsFromJSON(
  jsonString: string,
): SafeParseResult<Datasets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Datasets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Datasets' from JSON`,
  );
}

/** @internal */
export const GetApiDatasetsResponseBody$inboundSchema: z.ZodType<
  GetApiDatasetsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiDatasetsLinks$inboundSchema).optional(),
  datasets: z.record(z.lazy(() => Datasets$inboundSchema)).optional(),
});

/** @internal */
export type GetApiDatasetsResponseBody$Outbound = {
  links?: GetApiDatasetsLinks$Outbound | undefined;
  datasets?: { [k: string]: Datasets$Outbound } | undefined;
};

/** @internal */
export const GetApiDatasetsResponseBody$outboundSchema: z.ZodType<
  GetApiDatasetsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiDatasetsResponseBody
> = z.object({
  links: z.lazy(() => GetApiDatasetsLinks$outboundSchema).optional(),
  datasets: z.record(z.lazy(() => Datasets$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiDatasetsResponseBody$ {
  /** @deprecated use `GetApiDatasetsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiDatasetsResponseBody$inboundSchema;
  /** @deprecated use `GetApiDatasetsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiDatasetsResponseBody$outboundSchema;
  /** @deprecated use `GetApiDatasetsResponseBody$Outbound` instead. */
  export type Outbound = GetApiDatasetsResponseBody$Outbound;
}

export function getApiDatasetsResponseBodyToJSON(
  getApiDatasetsResponseBody: GetApiDatasetsResponseBody,
): string {
  return JSON.stringify(
    GetApiDatasetsResponseBody$outboundSchema.parse(getApiDatasetsResponseBody),
  );
}

export function getApiDatasetsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiDatasetsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiDatasetsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiDatasetsResponseBody' from JSON`,
  );
}

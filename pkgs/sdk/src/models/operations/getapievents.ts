/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiEventsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Events = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiEventsResponseBody = {
  links?: GetApiEventsLinks | undefined;
  events?: { [k: string]: Events } | undefined;
};

/** @internal */
export const GetApiEventsLinks$inboundSchema: z.ZodType<
  GetApiEventsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiEventsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiEventsLinks$outboundSchema: z.ZodType<
  GetApiEventsLinks$Outbound,
  z.ZodTypeDef,
  GetApiEventsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiEventsLinks$ {
  /** @deprecated use `GetApiEventsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiEventsLinks$inboundSchema;
  /** @deprecated use `GetApiEventsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiEventsLinks$outboundSchema;
  /** @deprecated use `GetApiEventsLinks$Outbound` instead. */
  export type Outbound = GetApiEventsLinks$Outbound;
}

export function getApiEventsLinksToJSON(
  getApiEventsLinks: GetApiEventsLinks,
): string {
  return JSON.stringify(
    GetApiEventsLinks$outboundSchema.parse(getApiEventsLinks),
  );
}

export function getApiEventsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiEventsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiEventsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiEventsLinks' from JSON`,
  );
}

/** @internal */
export const Events$inboundSchema: z.ZodType<Events, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
  });

/** @internal */
export type Events$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Events$outboundSchema: z.ZodType<
  Events$Outbound,
  z.ZodTypeDef,
  Events
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Events$ {
  /** @deprecated use `Events$inboundSchema` instead. */
  export const inboundSchema = Events$inboundSchema;
  /** @deprecated use `Events$outboundSchema` instead. */
  export const outboundSchema = Events$outboundSchema;
  /** @deprecated use `Events$Outbound` instead. */
  export type Outbound = Events$Outbound;
}

export function eventsToJSON(events: Events): string {
  return JSON.stringify(Events$outboundSchema.parse(events));
}

export function eventsFromJSON(
  jsonString: string,
): SafeParseResult<Events, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Events$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Events' from JSON`,
  );
}

/** @internal */
export const GetApiEventsResponseBody$inboundSchema: z.ZodType<
  GetApiEventsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiEventsLinks$inboundSchema).optional(),
  events: z.record(z.lazy(() => Events$inboundSchema)).optional(),
});

/** @internal */
export type GetApiEventsResponseBody$Outbound = {
  links?: GetApiEventsLinks$Outbound | undefined;
  events?: { [k: string]: Events$Outbound } | undefined;
};

/** @internal */
export const GetApiEventsResponseBody$outboundSchema: z.ZodType<
  GetApiEventsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiEventsResponseBody
> = z.object({
  links: z.lazy(() => GetApiEventsLinks$outboundSchema).optional(),
  events: z.record(z.lazy(() => Events$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiEventsResponseBody$ {
  /** @deprecated use `GetApiEventsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiEventsResponseBody$inboundSchema;
  /** @deprecated use `GetApiEventsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiEventsResponseBody$outboundSchema;
  /** @deprecated use `GetApiEventsResponseBody$Outbound` instead. */
  export type Outbound = GetApiEventsResponseBody$Outbound;
}

export function getApiEventsResponseBodyToJSON(
  getApiEventsResponseBody: GetApiEventsResponseBody,
): string {
  return JSON.stringify(
    GetApiEventsResponseBody$outboundSchema.parse(getApiEventsResponseBody),
  );
}

export function getApiEventsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiEventsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiEventsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiEventsResponseBody' from JSON`,
  );
}

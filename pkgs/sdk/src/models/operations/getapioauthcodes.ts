/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiOauthCodesLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type OauthCodes = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiOauthCodesResponseBody = {
  links?: GetApiOauthCodesLinks | undefined;
  oauthCodes?: { [k: string]: OauthCodes } | undefined;
};

/** @internal */
export const GetApiOauthCodesLinks$inboundSchema: z.ZodType<
  GetApiOauthCodesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiOauthCodesLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiOauthCodesLinks$outboundSchema: z.ZodType<
  GetApiOauthCodesLinks$Outbound,
  z.ZodTypeDef,
  GetApiOauthCodesLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiOauthCodesLinks$ {
  /** @deprecated use `GetApiOauthCodesLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiOauthCodesLinks$inboundSchema;
  /** @deprecated use `GetApiOauthCodesLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiOauthCodesLinks$outboundSchema;
  /** @deprecated use `GetApiOauthCodesLinks$Outbound` instead. */
  export type Outbound = GetApiOauthCodesLinks$Outbound;
}

export function getApiOauthCodesLinksToJSON(
  getApiOauthCodesLinks: GetApiOauthCodesLinks,
): string {
  return JSON.stringify(
    GetApiOauthCodesLinks$outboundSchema.parse(getApiOauthCodesLinks),
  );
}

export function getApiOauthCodesLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiOauthCodesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiOauthCodesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiOauthCodesLinks' from JSON`,
  );
}

/** @internal */
export const OauthCodes$inboundSchema: z.ZodType<
  OauthCodes,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type OauthCodes$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const OauthCodes$outboundSchema: z.ZodType<
  OauthCodes$Outbound,
  z.ZodTypeDef,
  OauthCodes
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OauthCodes$ {
  /** @deprecated use `OauthCodes$inboundSchema` instead. */
  export const inboundSchema = OauthCodes$inboundSchema;
  /** @deprecated use `OauthCodes$outboundSchema` instead. */
  export const outboundSchema = OauthCodes$outboundSchema;
  /** @deprecated use `OauthCodes$Outbound` instead. */
  export type Outbound = OauthCodes$Outbound;
}

export function oauthCodesToJSON(oauthCodes: OauthCodes): string {
  return JSON.stringify(OauthCodes$outboundSchema.parse(oauthCodes));
}

export function oauthCodesFromJSON(
  jsonString: string,
): SafeParseResult<OauthCodes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OauthCodes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OauthCodes' from JSON`,
  );
}

/** @internal */
export const GetApiOauthCodesResponseBody$inboundSchema: z.ZodType<
  GetApiOauthCodesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiOauthCodesLinks$inboundSchema).optional(),
  "oauth-codes": z.record(z.lazy(() => OauthCodes$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "oauth-codes": "oauthCodes",
  });
});

/** @internal */
export type GetApiOauthCodesResponseBody$Outbound = {
  links?: GetApiOauthCodesLinks$Outbound | undefined;
  "oauth-codes"?: { [k: string]: OauthCodes$Outbound } | undefined;
};

/** @internal */
export const GetApiOauthCodesResponseBody$outboundSchema: z.ZodType<
  GetApiOauthCodesResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiOauthCodesResponseBody
> = z.object({
  links: z.lazy(() => GetApiOauthCodesLinks$outboundSchema).optional(),
  oauthCodes: z.record(z.lazy(() => OauthCodes$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    oauthCodes: "oauth-codes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiOauthCodesResponseBody$ {
  /** @deprecated use `GetApiOauthCodesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiOauthCodesResponseBody$inboundSchema;
  /** @deprecated use `GetApiOauthCodesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiOauthCodesResponseBody$outboundSchema;
  /** @deprecated use `GetApiOauthCodesResponseBody$Outbound` instead. */
  export type Outbound = GetApiOauthCodesResponseBody$Outbound;
}

export function getApiOauthCodesResponseBodyToJSON(
  getApiOauthCodesResponseBody: GetApiOauthCodesResponseBody,
): string {
  return JSON.stringify(
    GetApiOauthCodesResponseBody$outboundSchema.parse(
      getApiOauthCodesResponseBody,
    ),
  );
}

export function getApiOauthCodesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiOauthCodesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiOauthCodesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiOauthCodesResponseBody' from JSON`,
  );
}

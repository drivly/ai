/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiWorkflowsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Workflows = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiWorkflowsResponseBody = {
  links?: GetApiWorkflowsLinks | undefined;
  workflows?: { [k: string]: Workflows } | undefined;
};

/** @internal */
export const GetApiWorkflowsLinks$inboundSchema: z.ZodType<
  GetApiWorkflowsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiWorkflowsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiWorkflowsLinks$outboundSchema: z.ZodType<
  GetApiWorkflowsLinks$Outbound,
  z.ZodTypeDef,
  GetApiWorkflowsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkflowsLinks$ {
  /** @deprecated use `GetApiWorkflowsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiWorkflowsLinks$inboundSchema;
  /** @deprecated use `GetApiWorkflowsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiWorkflowsLinks$outboundSchema;
  /** @deprecated use `GetApiWorkflowsLinks$Outbound` instead. */
  export type Outbound = GetApiWorkflowsLinks$Outbound;
}

export function getApiWorkflowsLinksToJSON(
  getApiWorkflowsLinks: GetApiWorkflowsLinks,
): string {
  return JSON.stringify(
    GetApiWorkflowsLinks$outboundSchema.parse(getApiWorkflowsLinks),
  );
}

export function getApiWorkflowsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiWorkflowsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiWorkflowsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkflowsLinks' from JSON`,
  );
}

/** @internal */
export const Workflows$inboundSchema: z.ZodType<
  Workflows,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Workflows$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Workflows$outboundSchema: z.ZodType<
  Workflows$Outbound,
  z.ZodTypeDef,
  Workflows
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Workflows$ {
  /** @deprecated use `Workflows$inboundSchema` instead. */
  export const inboundSchema = Workflows$inboundSchema;
  /** @deprecated use `Workflows$outboundSchema` instead. */
  export const outboundSchema = Workflows$outboundSchema;
  /** @deprecated use `Workflows$Outbound` instead. */
  export type Outbound = Workflows$Outbound;
}

export function workflowsToJSON(workflows: Workflows): string {
  return JSON.stringify(Workflows$outboundSchema.parse(workflows));
}

export function workflowsFromJSON(
  jsonString: string,
): SafeParseResult<Workflows, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Workflows$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Workflows' from JSON`,
  );
}

/** @internal */
export const GetApiWorkflowsResponseBody$inboundSchema: z.ZodType<
  GetApiWorkflowsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiWorkflowsLinks$inboundSchema).optional(),
  workflows: z.record(z.lazy(() => Workflows$inboundSchema)).optional(),
});

/** @internal */
export type GetApiWorkflowsResponseBody$Outbound = {
  links?: GetApiWorkflowsLinks$Outbound | undefined;
  workflows?: { [k: string]: Workflows$Outbound } | undefined;
};

/** @internal */
export const GetApiWorkflowsResponseBody$outboundSchema: z.ZodType<
  GetApiWorkflowsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiWorkflowsResponseBody
> = z.object({
  links: z.lazy(() => GetApiWorkflowsLinks$outboundSchema).optional(),
  workflows: z.record(z.lazy(() => Workflows$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkflowsResponseBody$ {
  /** @deprecated use `GetApiWorkflowsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiWorkflowsResponseBody$inboundSchema;
  /** @deprecated use `GetApiWorkflowsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiWorkflowsResponseBody$outboundSchema;
  /** @deprecated use `GetApiWorkflowsResponseBody$Outbound` instead. */
  export type Outbound = GetApiWorkflowsResponseBody$Outbound;
}

export function getApiWorkflowsResponseBodyToJSON(
  getApiWorkflowsResponseBody: GetApiWorkflowsResponseBody,
): string {
  return JSON.stringify(
    GetApiWorkflowsResponseBody$outboundSchema.parse(
      getApiWorkflowsResponseBody,
    ),
  );
}

export function getApiWorkflowsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiWorkflowsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiWorkflowsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkflowsResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiActionsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Actions = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiActionsResponseBody = {
  links?: GetApiActionsLinks | undefined;
  actions?: { [k: string]: Actions } | undefined;
};

/** @internal */
export const GetApiActionsLinks$inboundSchema: z.ZodType<
  GetApiActionsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiActionsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiActionsLinks$outboundSchema: z.ZodType<
  GetApiActionsLinks$Outbound,
  z.ZodTypeDef,
  GetApiActionsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiActionsLinks$ {
  /** @deprecated use `GetApiActionsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiActionsLinks$inboundSchema;
  /** @deprecated use `GetApiActionsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiActionsLinks$outboundSchema;
  /** @deprecated use `GetApiActionsLinks$Outbound` instead. */
  export type Outbound = GetApiActionsLinks$Outbound;
}

export function getApiActionsLinksToJSON(
  getApiActionsLinks: GetApiActionsLinks,
): string {
  return JSON.stringify(
    GetApiActionsLinks$outboundSchema.parse(getApiActionsLinks),
  );
}

export function getApiActionsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiActionsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiActionsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiActionsLinks' from JSON`,
  );
}

/** @internal */
export const Actions$inboundSchema: z.ZodType<Actions, z.ZodTypeDef, unknown> =
  z.object({
    href: z.string().optional(),
  });

/** @internal */
export type Actions$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Actions$outboundSchema: z.ZodType<
  Actions$Outbound,
  z.ZodTypeDef,
  Actions
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Actions$ {
  /** @deprecated use `Actions$inboundSchema` instead. */
  export const inboundSchema = Actions$inboundSchema;
  /** @deprecated use `Actions$outboundSchema` instead. */
  export const outboundSchema = Actions$outboundSchema;
  /** @deprecated use `Actions$Outbound` instead. */
  export type Outbound = Actions$Outbound;
}

export function actionsToJSON(actions: Actions): string {
  return JSON.stringify(Actions$outboundSchema.parse(actions));
}

export function actionsFromJSON(
  jsonString: string,
): SafeParseResult<Actions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Actions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Actions' from JSON`,
  );
}

/** @internal */
export const GetApiActionsResponseBody$inboundSchema: z.ZodType<
  GetApiActionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiActionsLinks$inboundSchema).optional(),
  actions: z.record(z.lazy(() => Actions$inboundSchema)).optional(),
});

/** @internal */
export type GetApiActionsResponseBody$Outbound = {
  links?: GetApiActionsLinks$Outbound | undefined;
  actions?: { [k: string]: Actions$Outbound } | undefined;
};

/** @internal */
export const GetApiActionsResponseBody$outboundSchema: z.ZodType<
  GetApiActionsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiActionsResponseBody
> = z.object({
  links: z.lazy(() => GetApiActionsLinks$outboundSchema).optional(),
  actions: z.record(z.lazy(() => Actions$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiActionsResponseBody$ {
  /** @deprecated use `GetApiActionsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiActionsResponseBody$inboundSchema;
  /** @deprecated use `GetApiActionsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiActionsResponseBody$outboundSchema;
  /** @deprecated use `GetApiActionsResponseBody$Outbound` instead. */
  export type Outbound = GetApiActionsResponseBody$Outbound;
}

export function getApiActionsResponseBodyToJSON(
  getApiActionsResponseBody: GetApiActionsResponseBody,
): string {
  return JSON.stringify(
    GetApiActionsResponseBody$outboundSchema.parse(getApiActionsResponseBody),
  );
}

export function getApiActionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiActionsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiActionsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiActionsResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiDeploymentsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Deployments = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiDeploymentsResponseBody = {
  links?: GetApiDeploymentsLinks | undefined;
  deployments?: { [k: string]: Deployments } | undefined;
};

/** @internal */
export const GetApiDeploymentsLinks$inboundSchema: z.ZodType<
  GetApiDeploymentsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiDeploymentsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiDeploymentsLinks$outboundSchema: z.ZodType<
  GetApiDeploymentsLinks$Outbound,
  z.ZodTypeDef,
  GetApiDeploymentsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiDeploymentsLinks$ {
  /** @deprecated use `GetApiDeploymentsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiDeploymentsLinks$inboundSchema;
  /** @deprecated use `GetApiDeploymentsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiDeploymentsLinks$outboundSchema;
  /** @deprecated use `GetApiDeploymentsLinks$Outbound` instead. */
  export type Outbound = GetApiDeploymentsLinks$Outbound;
}

export function getApiDeploymentsLinksToJSON(
  getApiDeploymentsLinks: GetApiDeploymentsLinks,
): string {
  return JSON.stringify(
    GetApiDeploymentsLinks$outboundSchema.parse(getApiDeploymentsLinks),
  );
}

export function getApiDeploymentsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiDeploymentsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiDeploymentsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiDeploymentsLinks' from JSON`,
  );
}

/** @internal */
export const Deployments$inboundSchema: z.ZodType<
  Deployments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Deployments$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Deployments$outboundSchema: z.ZodType<
  Deployments$Outbound,
  z.ZodTypeDef,
  Deployments
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deployments$ {
  /** @deprecated use `Deployments$inboundSchema` instead. */
  export const inboundSchema = Deployments$inboundSchema;
  /** @deprecated use `Deployments$outboundSchema` instead. */
  export const outboundSchema = Deployments$outboundSchema;
  /** @deprecated use `Deployments$Outbound` instead. */
  export type Outbound = Deployments$Outbound;
}

export function deploymentsToJSON(deployments: Deployments): string {
  return JSON.stringify(Deployments$outboundSchema.parse(deployments));
}

export function deploymentsFromJSON(
  jsonString: string,
): SafeParseResult<Deployments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Deployments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Deployments' from JSON`,
  );
}

/** @internal */
export const GetApiDeploymentsResponseBody$inboundSchema: z.ZodType<
  GetApiDeploymentsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiDeploymentsLinks$inboundSchema).optional(),
  deployments: z.record(z.lazy(() => Deployments$inboundSchema)).optional(),
});

/** @internal */
export type GetApiDeploymentsResponseBody$Outbound = {
  links?: GetApiDeploymentsLinks$Outbound | undefined;
  deployments?: { [k: string]: Deployments$Outbound } | undefined;
};

/** @internal */
export const GetApiDeploymentsResponseBody$outboundSchema: z.ZodType<
  GetApiDeploymentsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiDeploymentsResponseBody
> = z.object({
  links: z.lazy(() => GetApiDeploymentsLinks$outboundSchema).optional(),
  deployments: z.record(z.lazy(() => Deployments$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiDeploymentsResponseBody$ {
  /** @deprecated use `GetApiDeploymentsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiDeploymentsResponseBody$inboundSchema;
  /** @deprecated use `GetApiDeploymentsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiDeploymentsResponseBody$outboundSchema;
  /** @deprecated use `GetApiDeploymentsResponseBody$Outbound` instead. */
  export type Outbound = GetApiDeploymentsResponseBody$Outbound;
}

export function getApiDeploymentsResponseBodyToJSON(
  getApiDeploymentsResponseBody: GetApiDeploymentsResponseBody,
): string {
  return JSON.stringify(
    GetApiDeploymentsResponseBody$outboundSchema.parse(
      getApiDeploymentsResponseBody,
    ),
  );
}

export function getApiDeploymentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiDeploymentsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiDeploymentsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiDeploymentsResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiTracesLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Traces = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiTracesResponseBody = {
  links?: GetApiTracesLinks | undefined;
  traces?: { [k: string]: Traces } | undefined;
};

/** @internal */
export const GetApiTracesLinks$inboundSchema: z.ZodType<
  GetApiTracesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiTracesLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiTracesLinks$outboundSchema: z.ZodType<
  GetApiTracesLinks$Outbound,
  z.ZodTypeDef,
  GetApiTracesLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiTracesLinks$ {
  /** @deprecated use `GetApiTracesLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiTracesLinks$inboundSchema;
  /** @deprecated use `GetApiTracesLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiTracesLinks$outboundSchema;
  /** @deprecated use `GetApiTracesLinks$Outbound` instead. */
  export type Outbound = GetApiTracesLinks$Outbound;
}

export function getApiTracesLinksToJSON(
  getApiTracesLinks: GetApiTracesLinks,
): string {
  return JSON.stringify(
    GetApiTracesLinks$outboundSchema.parse(getApiTracesLinks),
  );
}

export function getApiTracesLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiTracesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiTracesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiTracesLinks' from JSON`,
  );
}

/** @internal */
export const Traces$inboundSchema: z.ZodType<Traces, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
  });

/** @internal */
export type Traces$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Traces$outboundSchema: z.ZodType<
  Traces$Outbound,
  z.ZodTypeDef,
  Traces
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Traces$ {
  /** @deprecated use `Traces$inboundSchema` instead. */
  export const inboundSchema = Traces$inboundSchema;
  /** @deprecated use `Traces$outboundSchema` instead. */
  export const outboundSchema = Traces$outboundSchema;
  /** @deprecated use `Traces$Outbound` instead. */
  export type Outbound = Traces$Outbound;
}

export function tracesToJSON(traces: Traces): string {
  return JSON.stringify(Traces$outboundSchema.parse(traces));
}

export function tracesFromJSON(
  jsonString: string,
): SafeParseResult<Traces, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Traces$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Traces' from JSON`,
  );
}

/** @internal */
export const GetApiTracesResponseBody$inboundSchema: z.ZodType<
  GetApiTracesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiTracesLinks$inboundSchema).optional(),
  traces: z.record(z.lazy(() => Traces$inboundSchema)).optional(),
});

/** @internal */
export type GetApiTracesResponseBody$Outbound = {
  links?: GetApiTracesLinks$Outbound | undefined;
  traces?: { [k: string]: Traces$Outbound } | undefined;
};

/** @internal */
export const GetApiTracesResponseBody$outboundSchema: z.ZodType<
  GetApiTracesResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiTracesResponseBody
> = z.object({
  links: z.lazy(() => GetApiTracesLinks$outboundSchema).optional(),
  traces: z.record(z.lazy(() => Traces$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiTracesResponseBody$ {
  /** @deprecated use `GetApiTracesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiTracesResponseBody$inboundSchema;
  /** @deprecated use `GetApiTracesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiTracesResponseBody$outboundSchema;
  /** @deprecated use `GetApiTracesResponseBody$Outbound` instead. */
  export type Outbound = GetApiTracesResponseBody$Outbound;
}

export function getApiTracesResponseBodyToJSON(
  getApiTracesResponseBody: GetApiTracesResponseBody,
): string {
  return JSON.stringify(
    GetApiTracesResponseBody$outboundSchema.parse(getApiTracesResponseBody),
  );
}

export function getApiTracesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiTracesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiTracesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiTracesResponseBody' from JSON`,
  );
}

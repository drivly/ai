/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiThingsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Things = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiThingsResponseBody = {
  links?: GetApiThingsLinks | undefined;
  things?: { [k: string]: Things } | undefined;
};

/** @internal */
export const GetApiThingsLinks$inboundSchema: z.ZodType<
  GetApiThingsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiThingsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiThingsLinks$outboundSchema: z.ZodType<
  GetApiThingsLinks$Outbound,
  z.ZodTypeDef,
  GetApiThingsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiThingsLinks$ {
  /** @deprecated use `GetApiThingsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiThingsLinks$inboundSchema;
  /** @deprecated use `GetApiThingsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiThingsLinks$outboundSchema;
  /** @deprecated use `GetApiThingsLinks$Outbound` instead. */
  export type Outbound = GetApiThingsLinks$Outbound;
}

export function getApiThingsLinksToJSON(
  getApiThingsLinks: GetApiThingsLinks,
): string {
  return JSON.stringify(
    GetApiThingsLinks$outboundSchema.parse(getApiThingsLinks),
  );
}

export function getApiThingsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiThingsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiThingsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiThingsLinks' from JSON`,
  );
}

/** @internal */
export const Things$inboundSchema: z.ZodType<Things, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
  });

/** @internal */
export type Things$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Things$outboundSchema: z.ZodType<
  Things$Outbound,
  z.ZodTypeDef,
  Things
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Things$ {
  /** @deprecated use `Things$inboundSchema` instead. */
  export const inboundSchema = Things$inboundSchema;
  /** @deprecated use `Things$outboundSchema` instead. */
  export const outboundSchema = Things$outboundSchema;
  /** @deprecated use `Things$Outbound` instead. */
  export type Outbound = Things$Outbound;
}

export function thingsToJSON(things: Things): string {
  return JSON.stringify(Things$outboundSchema.parse(things));
}

export function thingsFromJSON(
  jsonString: string,
): SafeParseResult<Things, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Things$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Things' from JSON`,
  );
}

/** @internal */
export const GetApiThingsResponseBody$inboundSchema: z.ZodType<
  GetApiThingsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiThingsLinks$inboundSchema).optional(),
  things: z.record(z.lazy(() => Things$inboundSchema)).optional(),
});

/** @internal */
export type GetApiThingsResponseBody$Outbound = {
  links?: GetApiThingsLinks$Outbound | undefined;
  things?: { [k: string]: Things$Outbound } | undefined;
};

/** @internal */
export const GetApiThingsResponseBody$outboundSchema: z.ZodType<
  GetApiThingsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiThingsResponseBody
> = z.object({
  links: z.lazy(() => GetApiThingsLinks$outboundSchema).optional(),
  things: z.record(z.lazy(() => Things$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiThingsResponseBody$ {
  /** @deprecated use `GetApiThingsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiThingsResponseBody$inboundSchema;
  /** @deprecated use `GetApiThingsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiThingsResponseBody$outboundSchema;
  /** @deprecated use `GetApiThingsResponseBody$Outbound` instead. */
  export type Outbound = GetApiThingsResponseBody$Outbound;
}

export function getApiThingsResponseBodyToJSON(
  getApiThingsResponseBody: GetApiThingsResponseBody,
): string {
  return JSON.stringify(
    GetApiThingsResponseBody$outboundSchema.parse(getApiThingsResponseBody),
  );
}

export function getApiThingsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiThingsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiThingsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiThingsResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiBenchmarksLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Benchmarks = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiBenchmarksResponseBody = {
  links?: GetApiBenchmarksLinks | undefined;
  benchmarks?: { [k: string]: Benchmarks } | undefined;
};

/** @internal */
export const GetApiBenchmarksLinks$inboundSchema: z.ZodType<
  GetApiBenchmarksLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiBenchmarksLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiBenchmarksLinks$outboundSchema: z.ZodType<
  GetApiBenchmarksLinks$Outbound,
  z.ZodTypeDef,
  GetApiBenchmarksLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiBenchmarksLinks$ {
  /** @deprecated use `GetApiBenchmarksLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiBenchmarksLinks$inboundSchema;
  /** @deprecated use `GetApiBenchmarksLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiBenchmarksLinks$outboundSchema;
  /** @deprecated use `GetApiBenchmarksLinks$Outbound` instead. */
  export type Outbound = GetApiBenchmarksLinks$Outbound;
}

export function getApiBenchmarksLinksToJSON(
  getApiBenchmarksLinks: GetApiBenchmarksLinks,
): string {
  return JSON.stringify(
    GetApiBenchmarksLinks$outboundSchema.parse(getApiBenchmarksLinks),
  );
}

export function getApiBenchmarksLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiBenchmarksLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiBenchmarksLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiBenchmarksLinks' from JSON`,
  );
}

/** @internal */
export const Benchmarks$inboundSchema: z.ZodType<
  Benchmarks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Benchmarks$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Benchmarks$outboundSchema: z.ZodType<
  Benchmarks$Outbound,
  z.ZodTypeDef,
  Benchmarks
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Benchmarks$ {
  /** @deprecated use `Benchmarks$inboundSchema` instead. */
  export const inboundSchema = Benchmarks$inboundSchema;
  /** @deprecated use `Benchmarks$outboundSchema` instead. */
  export const outboundSchema = Benchmarks$outboundSchema;
  /** @deprecated use `Benchmarks$Outbound` instead. */
  export type Outbound = Benchmarks$Outbound;
}

export function benchmarksToJSON(benchmarks: Benchmarks): string {
  return JSON.stringify(Benchmarks$outboundSchema.parse(benchmarks));
}

export function benchmarksFromJSON(
  jsonString: string,
): SafeParseResult<Benchmarks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Benchmarks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Benchmarks' from JSON`,
  );
}

/** @internal */
export const GetApiBenchmarksResponseBody$inboundSchema: z.ZodType<
  GetApiBenchmarksResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiBenchmarksLinks$inboundSchema).optional(),
  benchmarks: z.record(z.lazy(() => Benchmarks$inboundSchema)).optional(),
});

/** @internal */
export type GetApiBenchmarksResponseBody$Outbound = {
  links?: GetApiBenchmarksLinks$Outbound | undefined;
  benchmarks?: { [k: string]: Benchmarks$Outbound } | undefined;
};

/** @internal */
export const GetApiBenchmarksResponseBody$outboundSchema: z.ZodType<
  GetApiBenchmarksResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiBenchmarksResponseBody
> = z.object({
  links: z.lazy(() => GetApiBenchmarksLinks$outboundSchema).optional(),
  benchmarks: z.record(z.lazy(() => Benchmarks$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiBenchmarksResponseBody$ {
  /** @deprecated use `GetApiBenchmarksResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiBenchmarksResponseBody$inboundSchema;
  /** @deprecated use `GetApiBenchmarksResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiBenchmarksResponseBody$outboundSchema;
  /** @deprecated use `GetApiBenchmarksResponseBody$Outbound` instead. */
  export type Outbound = GetApiBenchmarksResponseBody$Outbound;
}

export function getApiBenchmarksResponseBodyToJSON(
  getApiBenchmarksResponseBody: GetApiBenchmarksResponseBody,
): string {
  return JSON.stringify(
    GetApiBenchmarksResponseBody$outboundSchema.parse(
      getApiBenchmarksResponseBody,
    ),
  );
}

export function getApiBenchmarksResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiBenchmarksResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiBenchmarksResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiBenchmarksResponseBody' from JSON`,
  );
}

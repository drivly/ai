/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiExperimentsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Experiments = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiExperimentsResponseBody = {
  links?: GetApiExperimentsLinks | undefined;
  experiments?: { [k: string]: Experiments } | undefined;
};

/** @internal */
export const GetApiExperimentsLinks$inboundSchema: z.ZodType<
  GetApiExperimentsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiExperimentsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiExperimentsLinks$outboundSchema: z.ZodType<
  GetApiExperimentsLinks$Outbound,
  z.ZodTypeDef,
  GetApiExperimentsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiExperimentsLinks$ {
  /** @deprecated use `GetApiExperimentsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiExperimentsLinks$inboundSchema;
  /** @deprecated use `GetApiExperimentsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiExperimentsLinks$outboundSchema;
  /** @deprecated use `GetApiExperimentsLinks$Outbound` instead. */
  export type Outbound = GetApiExperimentsLinks$Outbound;
}

export function getApiExperimentsLinksToJSON(
  getApiExperimentsLinks: GetApiExperimentsLinks,
): string {
  return JSON.stringify(
    GetApiExperimentsLinks$outboundSchema.parse(getApiExperimentsLinks),
  );
}

export function getApiExperimentsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiExperimentsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiExperimentsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiExperimentsLinks' from JSON`,
  );
}

/** @internal */
export const Experiments$inboundSchema: z.ZodType<
  Experiments,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Experiments$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Experiments$outboundSchema: z.ZodType<
  Experiments$Outbound,
  z.ZodTypeDef,
  Experiments
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Experiments$ {
  /** @deprecated use `Experiments$inboundSchema` instead. */
  export const inboundSchema = Experiments$inboundSchema;
  /** @deprecated use `Experiments$outboundSchema` instead. */
  export const outboundSchema = Experiments$outboundSchema;
  /** @deprecated use `Experiments$Outbound` instead. */
  export type Outbound = Experiments$Outbound;
}

export function experimentsToJSON(experiments: Experiments): string {
  return JSON.stringify(Experiments$outboundSchema.parse(experiments));
}

export function experimentsFromJSON(
  jsonString: string,
): SafeParseResult<Experiments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Experiments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Experiments' from JSON`,
  );
}

/** @internal */
export const GetApiExperimentsResponseBody$inboundSchema: z.ZodType<
  GetApiExperimentsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiExperimentsLinks$inboundSchema).optional(),
  experiments: z.record(z.lazy(() => Experiments$inboundSchema)).optional(),
});

/** @internal */
export type GetApiExperimentsResponseBody$Outbound = {
  links?: GetApiExperimentsLinks$Outbound | undefined;
  experiments?: { [k: string]: Experiments$Outbound } | undefined;
};

/** @internal */
export const GetApiExperimentsResponseBody$outboundSchema: z.ZodType<
  GetApiExperimentsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiExperimentsResponseBody
> = z.object({
  links: z.lazy(() => GetApiExperimentsLinks$outboundSchema).optional(),
  experiments: z.record(z.lazy(() => Experiments$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiExperimentsResponseBody$ {
  /** @deprecated use `GetApiExperimentsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiExperimentsResponseBody$inboundSchema;
  /** @deprecated use `GetApiExperimentsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiExperimentsResponseBody$outboundSchema;
  /** @deprecated use `GetApiExperimentsResponseBody$Outbound` instead. */
  export type Outbound = GetApiExperimentsResponseBody$Outbound;
}

export function getApiExperimentsResponseBodyToJSON(
  getApiExperimentsResponseBody: GetApiExperimentsResponseBody,
): string {
  return JSON.stringify(
    GetApiExperimentsResponseBody$outboundSchema.parse(
      getApiExperimentsResponseBody,
    ),
  );
}

export function getApiExperimentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiExperimentsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiExperimentsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiExperimentsResponseBody' from JSON`,
  );
}

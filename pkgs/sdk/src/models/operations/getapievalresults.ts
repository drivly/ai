/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiEvalResultsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type EvalResults = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiEvalResultsResponseBody = {
  links?: GetApiEvalResultsLinks | undefined;
  evalResults?: { [k: string]: EvalResults } | undefined;
};

/** @internal */
export const GetApiEvalResultsLinks$inboundSchema: z.ZodType<
  GetApiEvalResultsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiEvalResultsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiEvalResultsLinks$outboundSchema: z.ZodType<
  GetApiEvalResultsLinks$Outbound,
  z.ZodTypeDef,
  GetApiEvalResultsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiEvalResultsLinks$ {
  /** @deprecated use `GetApiEvalResultsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiEvalResultsLinks$inboundSchema;
  /** @deprecated use `GetApiEvalResultsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiEvalResultsLinks$outboundSchema;
  /** @deprecated use `GetApiEvalResultsLinks$Outbound` instead. */
  export type Outbound = GetApiEvalResultsLinks$Outbound;
}

export function getApiEvalResultsLinksToJSON(
  getApiEvalResultsLinks: GetApiEvalResultsLinks,
): string {
  return JSON.stringify(
    GetApiEvalResultsLinks$outboundSchema.parse(getApiEvalResultsLinks),
  );
}

export function getApiEvalResultsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiEvalResultsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiEvalResultsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiEvalResultsLinks' from JSON`,
  );
}

/** @internal */
export const EvalResults$inboundSchema: z.ZodType<
  EvalResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type EvalResults$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const EvalResults$outboundSchema: z.ZodType<
  EvalResults$Outbound,
  z.ZodTypeDef,
  EvalResults
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalResults$ {
  /** @deprecated use `EvalResults$inboundSchema` instead. */
  export const inboundSchema = EvalResults$inboundSchema;
  /** @deprecated use `EvalResults$outboundSchema` instead. */
  export const outboundSchema = EvalResults$outboundSchema;
  /** @deprecated use `EvalResults$Outbound` instead. */
  export type Outbound = EvalResults$Outbound;
}

export function evalResultsToJSON(evalResults: EvalResults): string {
  return JSON.stringify(EvalResults$outboundSchema.parse(evalResults));
}

export function evalResultsFromJSON(
  jsonString: string,
): SafeParseResult<EvalResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalResults' from JSON`,
  );
}

/** @internal */
export const GetApiEvalResultsResponseBody$inboundSchema: z.ZodType<
  GetApiEvalResultsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiEvalResultsLinks$inboundSchema).optional(),
  evalResults: z.record(z.lazy(() => EvalResults$inboundSchema)).optional(),
});

/** @internal */
export type GetApiEvalResultsResponseBody$Outbound = {
  links?: GetApiEvalResultsLinks$Outbound | undefined;
  evalResults?: { [k: string]: EvalResults$Outbound } | undefined;
};

/** @internal */
export const GetApiEvalResultsResponseBody$outboundSchema: z.ZodType<
  GetApiEvalResultsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiEvalResultsResponseBody
> = z.object({
  links: z.lazy(() => GetApiEvalResultsLinks$outboundSchema).optional(),
  evalResults: z.record(z.lazy(() => EvalResults$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiEvalResultsResponseBody$ {
  /** @deprecated use `GetApiEvalResultsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiEvalResultsResponseBody$inboundSchema;
  /** @deprecated use `GetApiEvalResultsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiEvalResultsResponseBody$outboundSchema;
  /** @deprecated use `GetApiEvalResultsResponseBody$Outbound` instead. */
  export type Outbound = GetApiEvalResultsResponseBody$Outbound;
}

export function getApiEvalResultsResponseBodyToJSON(
  getApiEvalResultsResponseBody: GetApiEvalResultsResponseBody,
): string {
  return JSON.stringify(
    GetApiEvalResultsResponseBody$outboundSchema.parse(
      getApiEvalResultsResponseBody,
    ),
  );
}

export function getApiEvalResultsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiEvalResultsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiEvalResultsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiEvalResultsResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiRolesIdRequest = {
  /**
   * The ID of the Role
   */
  id: string;
};

/**
 * Successfully deleted
 */
export type DeleteApiRolesIdResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiRolesIdRequest$inboundSchema: z.ZodType<
  DeleteApiRolesIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteApiRolesIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteApiRolesIdRequest$outboundSchema: z.ZodType<
  DeleteApiRolesIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiRolesIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiRolesIdRequest$ {
  /** @deprecated use `DeleteApiRolesIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApiRolesIdRequest$inboundSchema;
  /** @deprecated use `DeleteApiRolesIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApiRolesIdRequest$outboundSchema;
  /** @deprecated use `DeleteApiRolesIdRequest$Outbound` instead. */
  export type Outbound = DeleteApiRolesIdRequest$Outbound;
}

export function deleteApiRolesIdRequestToJSON(
  deleteApiRolesIdRequest: DeleteApiRolesIdRequest,
): string {
  return JSON.stringify(
    DeleteApiRolesIdRequest$outboundSchema.parse(deleteApiRolesIdRequest),
  );
}

export function deleteApiRolesIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiRolesIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiRolesIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiRolesIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteApiRolesIdResponseBody$inboundSchema: z.ZodType<
  DeleteApiRolesIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteApiRolesIdResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiRolesIdResponseBody$outboundSchema: z.ZodType<
  DeleteApiRolesIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteApiRolesIdResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiRolesIdResponseBody$ {
  /** @deprecated use `DeleteApiRolesIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteApiRolesIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteApiRolesIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteApiRolesIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteApiRolesIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteApiRolesIdResponseBody$Outbound;
}

export function deleteApiRolesIdResponseBodyToJSON(
  deleteApiRolesIdResponseBody: DeleteApiRolesIdResponseBody,
): string {
  return JSON.stringify(
    DeleteApiRolesIdResponseBody$outboundSchema.parse(
      deleteApiRolesIdResponseBody,
    ),
  );
}

export function deleteApiRolesIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiRolesIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiRolesIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiRolesIdResponseBody' from JSON`,
  );
}

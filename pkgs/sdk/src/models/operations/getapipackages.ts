/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiPackagesLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Packages = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiPackagesResponseBody = {
  links?: GetApiPackagesLinks | undefined;
  packages?: { [k: string]: Packages } | undefined;
};

/** @internal */
export const GetApiPackagesLinks$inboundSchema: z.ZodType<
  GetApiPackagesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiPackagesLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiPackagesLinks$outboundSchema: z.ZodType<
  GetApiPackagesLinks$Outbound,
  z.ZodTypeDef,
  GetApiPackagesLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiPackagesLinks$ {
  /** @deprecated use `GetApiPackagesLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiPackagesLinks$inboundSchema;
  /** @deprecated use `GetApiPackagesLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiPackagesLinks$outboundSchema;
  /** @deprecated use `GetApiPackagesLinks$Outbound` instead. */
  export type Outbound = GetApiPackagesLinks$Outbound;
}

export function getApiPackagesLinksToJSON(
  getApiPackagesLinks: GetApiPackagesLinks,
): string {
  return JSON.stringify(
    GetApiPackagesLinks$outboundSchema.parse(getApiPackagesLinks),
  );
}

export function getApiPackagesLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiPackagesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiPackagesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiPackagesLinks' from JSON`,
  );
}

/** @internal */
export const Packages$inboundSchema: z.ZodType<
  Packages,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Packages$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Packages$outboundSchema: z.ZodType<
  Packages$Outbound,
  z.ZodTypeDef,
  Packages
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Packages$ {
  /** @deprecated use `Packages$inboundSchema` instead. */
  export const inboundSchema = Packages$inboundSchema;
  /** @deprecated use `Packages$outboundSchema` instead. */
  export const outboundSchema = Packages$outboundSchema;
  /** @deprecated use `Packages$Outbound` instead. */
  export type Outbound = Packages$Outbound;
}

export function packagesToJSON(packages: Packages): string {
  return JSON.stringify(Packages$outboundSchema.parse(packages));
}

export function packagesFromJSON(
  jsonString: string,
): SafeParseResult<Packages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Packages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Packages' from JSON`,
  );
}

/** @internal */
export const GetApiPackagesResponseBody$inboundSchema: z.ZodType<
  GetApiPackagesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiPackagesLinks$inboundSchema).optional(),
  packages: z.record(z.lazy(() => Packages$inboundSchema)).optional(),
});

/** @internal */
export type GetApiPackagesResponseBody$Outbound = {
  links?: GetApiPackagesLinks$Outbound | undefined;
  packages?: { [k: string]: Packages$Outbound } | undefined;
};

/** @internal */
export const GetApiPackagesResponseBody$outboundSchema: z.ZodType<
  GetApiPackagesResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiPackagesResponseBody
> = z.object({
  links: z.lazy(() => GetApiPackagesLinks$outboundSchema).optional(),
  packages: z.record(z.lazy(() => Packages$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiPackagesResponseBody$ {
  /** @deprecated use `GetApiPackagesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiPackagesResponseBody$inboundSchema;
  /** @deprecated use `GetApiPackagesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiPackagesResponseBody$outboundSchema;
  /** @deprecated use `GetApiPackagesResponseBody$Outbound` instead. */
  export type Outbound = GetApiPackagesResponseBody$Outbound;
}

export function getApiPackagesResponseBodyToJSON(
  getApiPackagesResponseBody: GetApiPackagesResponseBody,
): string {
  return JSON.stringify(
    GetApiPackagesResponseBody$outboundSchema.parse(getApiPackagesResponseBody),
  );
}

export function getApiPackagesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiPackagesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiPackagesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiPackagesResponseBody' from JSON`,
  );
}

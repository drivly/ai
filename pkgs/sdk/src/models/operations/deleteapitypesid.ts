/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiTypesIdRequest = {
  /**
   * The ID of the Type
   */
  id: string;
};

/**
 * Successfully deleted
 */
export type DeleteApiTypesIdResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiTypesIdRequest$inboundSchema: z.ZodType<
  DeleteApiTypesIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteApiTypesIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteApiTypesIdRequest$outboundSchema: z.ZodType<
  DeleteApiTypesIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiTypesIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiTypesIdRequest$ {
  /** @deprecated use `DeleteApiTypesIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApiTypesIdRequest$inboundSchema;
  /** @deprecated use `DeleteApiTypesIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApiTypesIdRequest$outboundSchema;
  /** @deprecated use `DeleteApiTypesIdRequest$Outbound` instead. */
  export type Outbound = DeleteApiTypesIdRequest$Outbound;
}

export function deleteApiTypesIdRequestToJSON(
  deleteApiTypesIdRequest: DeleteApiTypesIdRequest,
): string {
  return JSON.stringify(
    DeleteApiTypesIdRequest$outboundSchema.parse(deleteApiTypesIdRequest),
  );
}

export function deleteApiTypesIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiTypesIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiTypesIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiTypesIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteApiTypesIdResponseBody$inboundSchema: z.ZodType<
  DeleteApiTypesIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteApiTypesIdResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiTypesIdResponseBody$outboundSchema: z.ZodType<
  DeleteApiTypesIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteApiTypesIdResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiTypesIdResponseBody$ {
  /** @deprecated use `DeleteApiTypesIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteApiTypesIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteApiTypesIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteApiTypesIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteApiTypesIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteApiTypesIdResponseBody$Outbound;
}

export function deleteApiTypesIdResponseBodyToJSON(
  deleteApiTypesIdResponseBody: DeleteApiTypesIdResponseBody,
): string {
  return JSON.stringify(
    DeleteApiTypesIdResponseBody$outboundSchema.parse(
      deleteApiTypesIdResponseBody,
    ),
  );
}

export function deleteApiTypesIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiTypesIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiTypesIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiTypesIdResponseBody' from JSON`,
  );
}

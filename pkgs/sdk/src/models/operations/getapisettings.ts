/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiSettingsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Settings = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiSettingsResponseBody = {
  links?: GetApiSettingsLinks | undefined;
  settings?: { [k: string]: Settings } | undefined;
};

/** @internal */
export const GetApiSettingsLinks$inboundSchema: z.ZodType<
  GetApiSettingsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiSettingsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiSettingsLinks$outboundSchema: z.ZodType<
  GetApiSettingsLinks$Outbound,
  z.ZodTypeDef,
  GetApiSettingsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiSettingsLinks$ {
  /** @deprecated use `GetApiSettingsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiSettingsLinks$inboundSchema;
  /** @deprecated use `GetApiSettingsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiSettingsLinks$outboundSchema;
  /** @deprecated use `GetApiSettingsLinks$Outbound` instead. */
  export type Outbound = GetApiSettingsLinks$Outbound;
}

export function getApiSettingsLinksToJSON(
  getApiSettingsLinks: GetApiSettingsLinks,
): string {
  return JSON.stringify(
    GetApiSettingsLinks$outboundSchema.parse(getApiSettingsLinks),
  );
}

export function getApiSettingsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiSettingsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiSettingsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiSettingsLinks' from JSON`,
  );
}

/** @internal */
export const Settings$inboundSchema: z.ZodType<
  Settings,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type Settings$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Settings$outboundSchema: z.ZodType<
  Settings$Outbound,
  z.ZodTypeDef,
  Settings
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Settings$ {
  /** @deprecated use `Settings$inboundSchema` instead. */
  export const inboundSchema = Settings$inboundSchema;
  /** @deprecated use `Settings$outboundSchema` instead. */
  export const outboundSchema = Settings$outboundSchema;
  /** @deprecated use `Settings$Outbound` instead. */
  export type Outbound = Settings$Outbound;
}

export function settingsToJSON(settings: Settings): string {
  return JSON.stringify(Settings$outboundSchema.parse(settings));
}

export function settingsFromJSON(
  jsonString: string,
): SafeParseResult<Settings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Settings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Settings' from JSON`,
  );
}

/** @internal */
export const GetApiSettingsResponseBody$inboundSchema: z.ZodType<
  GetApiSettingsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiSettingsLinks$inboundSchema).optional(),
  settings: z.record(z.lazy(() => Settings$inboundSchema)).optional(),
});

/** @internal */
export type GetApiSettingsResponseBody$Outbound = {
  links?: GetApiSettingsLinks$Outbound | undefined;
  settings?: { [k: string]: Settings$Outbound } | undefined;
};

/** @internal */
export const GetApiSettingsResponseBody$outboundSchema: z.ZodType<
  GetApiSettingsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiSettingsResponseBody
> = z.object({
  links: z.lazy(() => GetApiSettingsLinks$outboundSchema).optional(),
  settings: z.record(z.lazy(() => Settings$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiSettingsResponseBody$ {
  /** @deprecated use `GetApiSettingsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiSettingsResponseBody$inboundSchema;
  /** @deprecated use `GetApiSettingsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiSettingsResponseBody$outboundSchema;
  /** @deprecated use `GetApiSettingsResponseBody$Outbound` instead. */
  export type Outbound = GetApiSettingsResponseBody$Outbound;
}

export function getApiSettingsResponseBodyToJSON(
  getApiSettingsResponseBody: GetApiSettingsResponseBody,
): string {
  return JSON.stringify(
    GetApiSettingsResponseBody$outboundSchema.parse(getApiSettingsResponseBody),
  );
}

export function getApiSettingsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiSettingsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiSettingsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiSettingsResponseBody' from JSON`,
  );
}

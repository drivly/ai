/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiEvalsIdRequest = {
  /**
   * The ID of the Eval
   */
  id: string;
};

/**
 * Successfully deleted
 */
export type DeleteApiEvalsIdResponseBody = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiEvalsIdRequest$inboundSchema: z.ZodType<
  DeleteApiEvalsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteApiEvalsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteApiEvalsIdRequest$outboundSchema: z.ZodType<
  DeleteApiEvalsIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiEvalsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiEvalsIdRequest$ {
  /** @deprecated use `DeleteApiEvalsIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApiEvalsIdRequest$inboundSchema;
  /** @deprecated use `DeleteApiEvalsIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApiEvalsIdRequest$outboundSchema;
  /** @deprecated use `DeleteApiEvalsIdRequest$Outbound` instead. */
  export type Outbound = DeleteApiEvalsIdRequest$Outbound;
}

export function deleteApiEvalsIdRequestToJSON(
  deleteApiEvalsIdRequest: DeleteApiEvalsIdRequest,
): string {
  return JSON.stringify(
    DeleteApiEvalsIdRequest$outboundSchema.parse(deleteApiEvalsIdRequest),
  );
}

export function deleteApiEvalsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiEvalsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiEvalsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiEvalsIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteApiEvalsIdResponseBody$inboundSchema: z.ZodType<
  DeleteApiEvalsIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteApiEvalsIdResponseBody$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteApiEvalsIdResponseBody$outboundSchema: z.ZodType<
  DeleteApiEvalsIdResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteApiEvalsIdResponseBody
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiEvalsIdResponseBody$ {
  /** @deprecated use `DeleteApiEvalsIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteApiEvalsIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteApiEvalsIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteApiEvalsIdResponseBody$outboundSchema;
  /** @deprecated use `DeleteApiEvalsIdResponseBody$Outbound` instead. */
  export type Outbound = DeleteApiEvalsIdResponseBody$Outbound;
}

export function deleteApiEvalsIdResponseBodyToJSON(
  deleteApiEvalsIdResponseBody: DeleteApiEvalsIdResponseBody,
): string {
  return JSON.stringify(
    DeleteApiEvalsIdResponseBody$outboundSchema.parse(
      deleteApiEvalsIdResponseBody,
    ),
  );
}

export function deleteApiEvalsIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiEvalsIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiEvalsIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiEvalsIdResponseBody' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiOauthTokensIdRequest = {
  /**
   * The ID of the Oauth Token
   */
  id: string;
};

/** @internal */
export const GetApiOauthTokensIdRequest$inboundSchema: z.ZodType<
  GetApiOauthTokensIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetApiOauthTokensIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetApiOauthTokensIdRequest$outboundSchema: z.ZodType<
  GetApiOauthTokensIdRequest$Outbound,
  z.ZodTypeDef,
  GetApiOauthTokensIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiOauthTokensIdRequest$ {
  /** @deprecated use `GetApiOauthTokensIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiOauthTokensIdRequest$inboundSchema;
  /** @deprecated use `GetApiOauthTokensIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiOauthTokensIdRequest$outboundSchema;
  /** @deprecated use `GetApiOauthTokensIdRequest$Outbound` instead. */
  export type Outbound = GetApiOauthTokensIdRequest$Outbound;
}

export function getApiOauthTokensIdRequestToJSON(
  getApiOauthTokensIdRequest: GetApiOauthTokensIdRequest,
): string {
  return JSON.stringify(
    GetApiOauthTokensIdRequest$outboundSchema.parse(getApiOauthTokensIdRequest),
  );
}

export function getApiOauthTokensIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiOauthTokensIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiOauthTokensIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiOauthTokensIdRequest' from JSON`,
  );
}

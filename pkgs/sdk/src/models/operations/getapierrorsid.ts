/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiErrorsIdRequest = {
  /**
   * The ID of the Error
   */
  id: string;
};

/** @internal */
export const GetApiErrorsIdRequest$inboundSchema: z.ZodType<
  GetApiErrorsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetApiErrorsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetApiErrorsIdRequest$outboundSchema: z.ZodType<
  GetApiErrorsIdRequest$Outbound,
  z.ZodTypeDef,
  GetApiErrorsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiErrorsIdRequest$ {
  /** @deprecated use `GetApiErrorsIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiErrorsIdRequest$inboundSchema;
  /** @deprecated use `GetApiErrorsIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiErrorsIdRequest$outboundSchema;
  /** @deprecated use `GetApiErrorsIdRequest$Outbound` instead. */
  export type Outbound = GetApiErrorsIdRequest$Outbound;
}

export function getApiErrorsIdRequestToJSON(
  getApiErrorsIdRequest: GetApiErrorsIdRequest,
): string {
  return JSON.stringify(
    GetApiErrorsIdRequest$outboundSchema.parse(getApiErrorsIdRequest),
  );
}

export function getApiErrorsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiErrorsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiErrorsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiErrorsIdRequest' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiVerbsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Verbs = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiVerbsResponseBody = {
  links?: GetApiVerbsLinks | undefined;
  verbs?: { [k: string]: Verbs } | undefined;
};

/** @internal */
export const GetApiVerbsLinks$inboundSchema: z.ZodType<
  GetApiVerbsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiVerbsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiVerbsLinks$outboundSchema: z.ZodType<
  GetApiVerbsLinks$Outbound,
  z.ZodTypeDef,
  GetApiVerbsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiVerbsLinks$ {
  /** @deprecated use `GetApiVerbsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiVerbsLinks$inboundSchema;
  /** @deprecated use `GetApiVerbsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiVerbsLinks$outboundSchema;
  /** @deprecated use `GetApiVerbsLinks$Outbound` instead. */
  export type Outbound = GetApiVerbsLinks$Outbound;
}

export function getApiVerbsLinksToJSON(
  getApiVerbsLinks: GetApiVerbsLinks,
): string {
  return JSON.stringify(
    GetApiVerbsLinks$outboundSchema.parse(getApiVerbsLinks),
  );
}

export function getApiVerbsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiVerbsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiVerbsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiVerbsLinks' from JSON`,
  );
}

/** @internal */
export const Verbs$inboundSchema: z.ZodType<Verbs, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
  });

/** @internal */
export type Verbs$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Verbs$outboundSchema: z.ZodType<
  Verbs$Outbound,
  z.ZodTypeDef,
  Verbs
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Verbs$ {
  /** @deprecated use `Verbs$inboundSchema` instead. */
  export const inboundSchema = Verbs$inboundSchema;
  /** @deprecated use `Verbs$outboundSchema` instead. */
  export const outboundSchema = Verbs$outboundSchema;
  /** @deprecated use `Verbs$Outbound` instead. */
  export type Outbound = Verbs$Outbound;
}

export function verbsToJSON(verbs: Verbs): string {
  return JSON.stringify(Verbs$outboundSchema.parse(verbs));
}

export function verbsFromJSON(
  jsonString: string,
): SafeParseResult<Verbs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Verbs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Verbs' from JSON`,
  );
}

/** @internal */
export const GetApiVerbsResponseBody$inboundSchema: z.ZodType<
  GetApiVerbsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiVerbsLinks$inboundSchema).optional(),
  verbs: z.record(z.lazy(() => Verbs$inboundSchema)).optional(),
});

/** @internal */
export type GetApiVerbsResponseBody$Outbound = {
  links?: GetApiVerbsLinks$Outbound | undefined;
  verbs?: { [k: string]: Verbs$Outbound } | undefined;
};

/** @internal */
export const GetApiVerbsResponseBody$outboundSchema: z.ZodType<
  GetApiVerbsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiVerbsResponseBody
> = z.object({
  links: z.lazy(() => GetApiVerbsLinks$outboundSchema).optional(),
  verbs: z.record(z.lazy(() => Verbs$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiVerbsResponseBody$ {
  /** @deprecated use `GetApiVerbsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiVerbsResponseBody$inboundSchema;
  /** @deprecated use `GetApiVerbsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiVerbsResponseBody$outboundSchema;
  /** @deprecated use `GetApiVerbsResponseBody$Outbound` instead. */
  export type Outbound = GetApiVerbsResponseBody$Outbound;
}

export function getApiVerbsResponseBodyToJSON(
  getApiVerbsResponseBody: GetApiVerbsResponseBody,
): string {
  return JSON.stringify(
    GetApiVerbsResponseBody$outboundSchema.parse(getApiVerbsResponseBody),
  );
}

export function getApiVerbsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiVerbsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiVerbsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiVerbsResponseBody' from JSON`,
  );
}

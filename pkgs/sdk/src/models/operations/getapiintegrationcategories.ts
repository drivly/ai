/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiIntegrationCategoriesLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type IntegrationCategories = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiIntegrationCategoriesResponseBody = {
  links?: GetApiIntegrationCategoriesLinks | undefined;
  integrationCategories?: { [k: string]: IntegrationCategories } | undefined;
};

/** @internal */
export const GetApiIntegrationCategoriesLinks$inboundSchema: z.ZodType<
  GetApiIntegrationCategoriesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiIntegrationCategoriesLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiIntegrationCategoriesLinks$outboundSchema: z.ZodType<
  GetApiIntegrationCategoriesLinks$Outbound,
  z.ZodTypeDef,
  GetApiIntegrationCategoriesLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiIntegrationCategoriesLinks$ {
  /** @deprecated use `GetApiIntegrationCategoriesLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiIntegrationCategoriesLinks$inboundSchema;
  /** @deprecated use `GetApiIntegrationCategoriesLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiIntegrationCategoriesLinks$outboundSchema;
  /** @deprecated use `GetApiIntegrationCategoriesLinks$Outbound` instead. */
  export type Outbound = GetApiIntegrationCategoriesLinks$Outbound;
}

export function getApiIntegrationCategoriesLinksToJSON(
  getApiIntegrationCategoriesLinks: GetApiIntegrationCategoriesLinks,
): string {
  return JSON.stringify(
    GetApiIntegrationCategoriesLinks$outboundSchema.parse(
      getApiIntegrationCategoriesLinks,
    ),
  );
}

export function getApiIntegrationCategoriesLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiIntegrationCategoriesLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiIntegrationCategoriesLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiIntegrationCategoriesLinks' from JSON`,
  );
}

/** @internal */
export const IntegrationCategories$inboundSchema: z.ZodType<
  IntegrationCategories,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type IntegrationCategories$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const IntegrationCategories$outboundSchema: z.ZodType<
  IntegrationCategories$Outbound,
  z.ZodTypeDef,
  IntegrationCategories
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationCategories$ {
  /** @deprecated use `IntegrationCategories$inboundSchema` instead. */
  export const inboundSchema = IntegrationCategories$inboundSchema;
  /** @deprecated use `IntegrationCategories$outboundSchema` instead. */
  export const outboundSchema = IntegrationCategories$outboundSchema;
  /** @deprecated use `IntegrationCategories$Outbound` instead. */
  export type Outbound = IntegrationCategories$Outbound;
}

export function integrationCategoriesToJSON(
  integrationCategories: IntegrationCategories,
): string {
  return JSON.stringify(
    IntegrationCategories$outboundSchema.parse(integrationCategories),
  );
}

export function integrationCategoriesFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationCategories, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationCategories$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationCategories' from JSON`,
  );
}

/** @internal */
export const GetApiIntegrationCategoriesResponseBody$inboundSchema: z.ZodType<
  GetApiIntegrationCategoriesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiIntegrationCategoriesLinks$inboundSchema)
    .optional(),
  integrationCategories: z.record(
    z.lazy(() => IntegrationCategories$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetApiIntegrationCategoriesResponseBody$Outbound = {
  links?: GetApiIntegrationCategoriesLinks$Outbound | undefined;
  integrationCategories?:
    | { [k: string]: IntegrationCategories$Outbound }
    | undefined;
};

/** @internal */
export const GetApiIntegrationCategoriesResponseBody$outboundSchema: z.ZodType<
  GetApiIntegrationCategoriesResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiIntegrationCategoriesResponseBody
> = z.object({
  links: z.lazy(() => GetApiIntegrationCategoriesLinks$outboundSchema)
    .optional(),
  integrationCategories: z.record(
    z.lazy(() => IntegrationCategories$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiIntegrationCategoriesResponseBody$ {
  /** @deprecated use `GetApiIntegrationCategoriesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetApiIntegrationCategoriesResponseBody$inboundSchema;
  /** @deprecated use `GetApiIntegrationCategoriesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetApiIntegrationCategoriesResponseBody$outboundSchema;
  /** @deprecated use `GetApiIntegrationCategoriesResponseBody$Outbound` instead. */
  export type Outbound = GetApiIntegrationCategoriesResponseBody$Outbound;
}

export function getApiIntegrationCategoriesResponseBodyToJSON(
  getApiIntegrationCategoriesResponseBody:
    GetApiIntegrationCategoriesResponseBody,
): string {
  return JSON.stringify(
    GetApiIntegrationCategoriesResponseBody$outboundSchema.parse(
      getApiIntegrationCategoriesResponseBody,
    ),
  );
}

export function getApiIntegrationCategoriesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiIntegrationCategoriesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiIntegrationCategoriesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiIntegrationCategoriesResponseBody' from JSON`,
  );
}

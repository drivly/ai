/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiTagsLinks = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

export type Tags = {
  href?: string | undefined;
};

/**
 * Successful response
 */
export type GetApiTagsResponseBody = {
  links?: GetApiTagsLinks | undefined;
  tags?: { [k: string]: Tags } | undefined;
};

/** @internal */
export const GetApiTagsLinks$inboundSchema: z.ZodType<
  GetApiTagsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/** @internal */
export type GetApiTagsLinks$Outbound = {
  home?: string | undefined;
  next?: string | undefined;
  prev?: string | undefined;
};

/** @internal */
export const GetApiTagsLinks$outboundSchema: z.ZodType<
  GetApiTagsLinks$Outbound,
  z.ZodTypeDef,
  GetApiTagsLinks
> = z.object({
  home: z.string().optional(),
  next: z.string().optional(),
  prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiTagsLinks$ {
  /** @deprecated use `GetApiTagsLinks$inboundSchema` instead. */
  export const inboundSchema = GetApiTagsLinks$inboundSchema;
  /** @deprecated use `GetApiTagsLinks$outboundSchema` instead. */
  export const outboundSchema = GetApiTagsLinks$outboundSchema;
  /** @deprecated use `GetApiTagsLinks$Outbound` instead. */
  export type Outbound = GetApiTagsLinks$Outbound;
}

export function getApiTagsLinksToJSON(
  getApiTagsLinks: GetApiTagsLinks,
): string {
  return JSON.stringify(GetApiTagsLinks$outboundSchema.parse(getApiTagsLinks));
}

export function getApiTagsLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetApiTagsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiTagsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiTagsLinks' from JSON`,
  );
}

/** @internal */
export const Tags$inboundSchema: z.ZodType<Tags, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
  });

/** @internal */
export type Tags$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const Tags$outboundSchema: z.ZodType<Tags$Outbound, z.ZodTypeDef, Tags> =
  z.object({
    href: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tags$ {
  /** @deprecated use `Tags$inboundSchema` instead. */
  export const inboundSchema = Tags$inboundSchema;
  /** @deprecated use `Tags$outboundSchema` instead. */
  export const outboundSchema = Tags$outboundSchema;
  /** @deprecated use `Tags$Outbound` instead. */
  export type Outbound = Tags$Outbound;
}

export function tagsToJSON(tags: Tags): string {
  return JSON.stringify(Tags$outboundSchema.parse(tags));
}

export function tagsFromJSON(
  jsonString: string,
): SafeParseResult<Tags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tags' from JSON`,
  );
}

/** @internal */
export const GetApiTagsResponseBody$inboundSchema: z.ZodType<
  GetApiTagsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.lazy(() => GetApiTagsLinks$inboundSchema).optional(),
  tags: z.record(z.lazy(() => Tags$inboundSchema)).optional(),
});

/** @internal */
export type GetApiTagsResponseBody$Outbound = {
  links?: GetApiTagsLinks$Outbound | undefined;
  tags?: { [k: string]: Tags$Outbound } | undefined;
};

/** @internal */
export const GetApiTagsResponseBody$outboundSchema: z.ZodType<
  GetApiTagsResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiTagsResponseBody
> = z.object({
  links: z.lazy(() => GetApiTagsLinks$outboundSchema).optional(),
  tags: z.record(z.lazy(() => Tags$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiTagsResponseBody$ {
  /** @deprecated use `GetApiTagsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiTagsResponseBody$inboundSchema;
  /** @deprecated use `GetApiTagsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiTagsResponseBody$outboundSchema;
  /** @deprecated use `GetApiTagsResponseBody$Outbound` instead. */
  export type Outbound = GetApiTagsResponseBody$Outbound;
}

export function getApiTagsResponseBodyToJSON(
  getApiTagsResponseBody: GetApiTagsResponseBody,
): string {
  return JSON.stringify(
    GetApiTagsResponseBody$outboundSchema.parse(getApiTagsResponseBody),
  );
}

export function getApiTagsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiTagsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiTagsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiTagsResponseBody' from JSON`,
  );
}

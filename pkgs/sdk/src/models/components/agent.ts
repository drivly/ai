/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AgentPricing = {};

export type Agent = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  public?: boolean | undefined;
  /**
   * ID of related agents document
   */
  clonedFrom?: string | undefined;
  pricing?: AgentPricing | undefined;
};

/** @internal */
export const AgentPricing$inboundSchema: z.ZodType<
  AgentPricing,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AgentPricing$Outbound = {};

/** @internal */
export const AgentPricing$outboundSchema: z.ZodType<
  AgentPricing$Outbound,
  z.ZodTypeDef,
  AgentPricing
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentPricing$ {
  /** @deprecated use `AgentPricing$inboundSchema` instead. */
  export const inboundSchema = AgentPricing$inboundSchema;
  /** @deprecated use `AgentPricing$outboundSchema` instead. */
  export const outboundSchema = AgentPricing$outboundSchema;
  /** @deprecated use `AgentPricing$Outbound` instead. */
  export type Outbound = AgentPricing$Outbound;
}

export function agentPricingToJSON(agentPricing: AgentPricing): string {
  return JSON.stringify(AgentPricing$outboundSchema.parse(agentPricing));
}

export function agentPricingFromJSON(
  jsonString: string,
): SafeParseResult<AgentPricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentPricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentPricing' from JSON`,
  );
}

/** @internal */
export const Agent$inboundSchema: z.ZodType<Agent, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    public: z.boolean().optional(),
    clonedFrom: z.string().optional(),
    pricing: z.lazy(() => AgentPricing$inboundSchema).optional(),
  });

/** @internal */
export type Agent$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  public?: boolean | undefined;
  clonedFrom?: string | undefined;
  pricing?: AgentPricing$Outbound | undefined;
};

/** @internal */
export const Agent$outboundSchema: z.ZodType<
  Agent$Outbound,
  z.ZodTypeDef,
  Agent
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  public: z.boolean().optional(),
  clonedFrom: z.string().optional(),
  pricing: z.lazy(() => AgentPricing$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Agent$ {
  /** @deprecated use `Agent$inboundSchema` instead. */
  export const inboundSchema = Agent$inboundSchema;
  /** @deprecated use `Agent$outboundSchema` instead. */
  export const outboundSchema = Agent$outboundSchema;
  /** @deprecated use `Agent$Outbound` instead. */
  export type Outbound = Agent$Outbound;
}

export function agentToJSON(agent: Agent): string {
  return JSON.stringify(Agent$outboundSchema.parse(agent));
}

export function agentFromJSON(
  jsonString: string,
): SafeParseResult<Agent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Agent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Agent' from JSON`,
  );
}

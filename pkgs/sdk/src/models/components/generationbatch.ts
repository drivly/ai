/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GenerationBatchProvider = {
  Openai: "openai",
  Anthropic: "anthropic",
  Google: "google",
  Parasail: "parasail",
} as const;
export type GenerationBatchProvider = ClosedEnum<
  typeof GenerationBatchProvider
>;

export const GenerationBatchStatus = {
  Queued: "queued",
  Processing: "processing",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GenerationBatchStatus = ClosedEnum<typeof GenerationBatchStatus>;

export type BatchConfig = {};

export type GenerationBatch = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  provider?: GenerationBatchProvider | undefined;
  status?: GenerationBatchStatus | undefined;
  batchConfig?: BatchConfig | undefined;
  providerBatchId?: string | undefined;
  generations?: Array<string> | undefined;
  startedAt?: Date | undefined;
  completedAt?: Date | undefined;
};

/** @internal */
export const GenerationBatchProvider$inboundSchema: z.ZodNativeEnum<
  typeof GenerationBatchProvider
> = z.nativeEnum(GenerationBatchProvider);

/** @internal */
export const GenerationBatchProvider$outboundSchema: z.ZodNativeEnum<
  typeof GenerationBatchProvider
> = GenerationBatchProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerationBatchProvider$ {
  /** @deprecated use `GenerationBatchProvider$inboundSchema` instead. */
  export const inboundSchema = GenerationBatchProvider$inboundSchema;
  /** @deprecated use `GenerationBatchProvider$outboundSchema` instead. */
  export const outboundSchema = GenerationBatchProvider$outboundSchema;
}

/** @internal */
export const GenerationBatchStatus$inboundSchema: z.ZodNativeEnum<
  typeof GenerationBatchStatus
> = z.nativeEnum(GenerationBatchStatus);

/** @internal */
export const GenerationBatchStatus$outboundSchema: z.ZodNativeEnum<
  typeof GenerationBatchStatus
> = GenerationBatchStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerationBatchStatus$ {
  /** @deprecated use `GenerationBatchStatus$inboundSchema` instead. */
  export const inboundSchema = GenerationBatchStatus$inboundSchema;
  /** @deprecated use `GenerationBatchStatus$outboundSchema` instead. */
  export const outboundSchema = GenerationBatchStatus$outboundSchema;
}

/** @internal */
export const BatchConfig$inboundSchema: z.ZodType<
  BatchConfig,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type BatchConfig$Outbound = {};

/** @internal */
export const BatchConfig$outboundSchema: z.ZodType<
  BatchConfig$Outbound,
  z.ZodTypeDef,
  BatchConfig
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchConfig$ {
  /** @deprecated use `BatchConfig$inboundSchema` instead. */
  export const inboundSchema = BatchConfig$inboundSchema;
  /** @deprecated use `BatchConfig$outboundSchema` instead. */
  export const outboundSchema = BatchConfig$outboundSchema;
  /** @deprecated use `BatchConfig$Outbound` instead. */
  export type Outbound = BatchConfig$Outbound;
}

export function batchConfigToJSON(batchConfig: BatchConfig): string {
  return JSON.stringify(BatchConfig$outboundSchema.parse(batchConfig));
}

export function batchConfigFromJSON(
  jsonString: string,
): SafeParseResult<BatchConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchConfig' from JSON`,
  );
}

/** @internal */
export const GenerationBatch$inboundSchema: z.ZodType<
  GenerationBatch,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  provider: GenerationBatchProvider$inboundSchema.optional(),
  status: GenerationBatchStatus$inboundSchema.optional(),
  batchConfig: z.lazy(() => BatchConfig$inboundSchema).optional(),
  providerBatchId: z.string().optional(),
  generations: z.array(z.string()).optional(),
  startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  completedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GenerationBatch$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  provider?: string | undefined;
  status?: string | undefined;
  batchConfig?: BatchConfig$Outbound | undefined;
  providerBatchId?: string | undefined;
  generations?: Array<string> | undefined;
  startedAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const GenerationBatch$outboundSchema: z.ZodType<
  GenerationBatch$Outbound,
  z.ZodTypeDef,
  GenerationBatch
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  provider: GenerationBatchProvider$outboundSchema.optional(),
  status: GenerationBatchStatus$outboundSchema.optional(),
  batchConfig: z.lazy(() => BatchConfig$outboundSchema).optional(),
  providerBatchId: z.string().optional(),
  generations: z.array(z.string()).optional(),
  startedAt: z.date().transform(v => v.toISOString()).optional(),
  completedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerationBatch$ {
  /** @deprecated use `GenerationBatch$inboundSchema` instead. */
  export const inboundSchema = GenerationBatch$inboundSchema;
  /** @deprecated use `GenerationBatch$outboundSchema` instead. */
  export const outboundSchema = GenerationBatch$outboundSchema;
  /** @deprecated use `GenerationBatch$Outbound` instead. */
  export type Outbound = GenerationBatch$Outbound;
}

export function generationBatchToJSON(
  generationBatch: GenerationBatch,
): string {
  return JSON.stringify(GenerationBatch$outboundSchema.parse(generationBatch));
}

export function generationBatchFromJSON(
  jsonString: string,
): SafeParseResult<GenerationBatch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerationBatch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerationBatch' from JSON`,
  );
}

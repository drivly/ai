/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ExperimentMetricMetadata = {};

export type ExperimentMetric = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related experiments document
   */
  experimentId?: string | undefined;
  variantId?: string | undefined;
  userId?: string | undefined;
  sessionId?: string | undefined;
  metricName?: string | undefined;
  value?: number | undefined;
  timestamp?: Date | undefined;
  metadata?: ExperimentMetricMetadata | undefined;
};

/** @internal */
export const ExperimentMetricMetadata$inboundSchema: z.ZodType<
  ExperimentMetricMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ExperimentMetricMetadata$Outbound = {};

/** @internal */
export const ExperimentMetricMetadata$outboundSchema: z.ZodType<
  ExperimentMetricMetadata$Outbound,
  z.ZodTypeDef,
  ExperimentMetricMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentMetricMetadata$ {
  /** @deprecated use `ExperimentMetricMetadata$inboundSchema` instead. */
  export const inboundSchema = ExperimentMetricMetadata$inboundSchema;
  /** @deprecated use `ExperimentMetricMetadata$outboundSchema` instead. */
  export const outboundSchema = ExperimentMetricMetadata$outboundSchema;
  /** @deprecated use `ExperimentMetricMetadata$Outbound` instead. */
  export type Outbound = ExperimentMetricMetadata$Outbound;
}

export function experimentMetricMetadataToJSON(
  experimentMetricMetadata: ExperimentMetricMetadata,
): string {
  return JSON.stringify(
    ExperimentMetricMetadata$outboundSchema.parse(experimentMetricMetadata),
  );
}

export function experimentMetricMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ExperimentMetricMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExperimentMetricMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExperimentMetricMetadata' from JSON`,
  );
}

/** @internal */
export const ExperimentMetric$inboundSchema: z.ZodType<
  ExperimentMetric,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  experimentId: z.string().optional(),
  variantId: z.string().optional(),
  userId: z.string().optional(),
  sessionId: z.string().optional(),
  metricName: z.string().optional(),
  value: z.number().optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  metadata: z.lazy(() => ExperimentMetricMetadata$inboundSchema).optional(),
});

/** @internal */
export type ExperimentMetric$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  experimentId?: string | undefined;
  variantId?: string | undefined;
  userId?: string | undefined;
  sessionId?: string | undefined;
  metricName?: string | undefined;
  value?: number | undefined;
  timestamp?: string | undefined;
  metadata?: ExperimentMetricMetadata$Outbound | undefined;
};

/** @internal */
export const ExperimentMetric$outboundSchema: z.ZodType<
  ExperimentMetric$Outbound,
  z.ZodTypeDef,
  ExperimentMetric
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  experimentId: z.string().optional(),
  variantId: z.string().optional(),
  userId: z.string().optional(),
  sessionId: z.string().optional(),
  metricName: z.string().optional(),
  value: z.number().optional(),
  timestamp: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.lazy(() => ExperimentMetricMetadata$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentMetric$ {
  /** @deprecated use `ExperimentMetric$inboundSchema` instead. */
  export const inboundSchema = ExperimentMetric$inboundSchema;
  /** @deprecated use `ExperimentMetric$outboundSchema` instead. */
  export const outboundSchema = ExperimentMetric$outboundSchema;
  /** @deprecated use `ExperimentMetric$Outbound` instead. */
  export type Outbound = ExperimentMetric$Outbound;
}

export function experimentMetricToJSON(
  experimentMetric: ExperimentMetric,
): string {
  return JSON.stringify(
    ExperimentMetric$outboundSchema.parse(experimentMetric),
  );
}

export function experimentMetricFromJSON(
  jsonString: string,
): SafeParseResult<ExperimentMetric, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExperimentMetric$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExperimentMetric' from JSON`,
  );
}

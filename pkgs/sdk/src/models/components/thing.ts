/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ThingResources = {};

export type Thing = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  name?: string | undefined;
  singular?: string | undefined;
  plural?: string | undefined;
  possessive?: string | undefined;
  pluralPossessive?: string | undefined;
  verb?: string | undefined;
  act?: string | undefined;
  activity?: string | undefined;
  event?: string | undefined;
  resources?: ThingResources | undefined;
};

/** @internal */
export const ThingResources$inboundSchema: z.ZodType<
  ThingResources,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ThingResources$Outbound = {};

/** @internal */
export const ThingResources$outboundSchema: z.ZodType<
  ThingResources$Outbound,
  z.ZodTypeDef,
  ThingResources
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThingResources$ {
  /** @deprecated use `ThingResources$inboundSchema` instead. */
  export const inboundSchema = ThingResources$inboundSchema;
  /** @deprecated use `ThingResources$outboundSchema` instead. */
  export const outboundSchema = ThingResources$outboundSchema;
  /** @deprecated use `ThingResources$Outbound` instead. */
  export type Outbound = ThingResources$Outbound;
}

export function thingResourcesToJSON(thingResources: ThingResources): string {
  return JSON.stringify(ThingResources$outboundSchema.parse(thingResources));
}

export function thingResourcesFromJSON(
  jsonString: string,
): SafeParseResult<ThingResources, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ThingResources$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThingResources' from JSON`,
  );
}

/** @internal */
export const Thing$inboundSchema: z.ZodType<Thing, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    name: z.string().optional(),
    singular: z.string().optional(),
    plural: z.string().optional(),
    possessive: z.string().optional(),
    pluralPossessive: z.string().optional(),
    verb: z.string().optional(),
    act: z.string().optional(),
    activity: z.string().optional(),
    event: z.string().optional(),
    resources: z.lazy(() => ThingResources$inboundSchema).optional(),
  });

/** @internal */
export type Thing$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  name?: string | undefined;
  singular?: string | undefined;
  plural?: string | undefined;
  possessive?: string | undefined;
  pluralPossessive?: string | undefined;
  verb?: string | undefined;
  act?: string | undefined;
  activity?: string | undefined;
  event?: string | undefined;
  resources?: ThingResources$Outbound | undefined;
};

/** @internal */
export const Thing$outboundSchema: z.ZodType<
  Thing$Outbound,
  z.ZodTypeDef,
  Thing
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  name: z.string().optional(),
  singular: z.string().optional(),
  plural: z.string().optional(),
  possessive: z.string().optional(),
  pluralPossessive: z.string().optional(),
  verb: z.string().optional(),
  act: z.string().optional(),
  activity: z.string().optional(),
  event: z.string().optional(),
  resources: z.lazy(() => ThingResources$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Thing$ {
  /** @deprecated use `Thing$inboundSchema` instead. */
  export const inboundSchema = Thing$inboundSchema;
  /** @deprecated use `Thing$outboundSchema` instead. */
  export const outboundSchema = Thing$outboundSchema;
  /** @deprecated use `Thing$Outbound` instead. */
  export type Outbound = Thing$Outbound;
}

export function thingToJSON(thing: Thing): string {
  return JSON.stringify(Thing$outboundSchema.parse(thing));
}

export function thingFromJSON(
  jsonString: string,
): SafeParseResult<Thing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Thing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Thing' from JSON`,
  );
}

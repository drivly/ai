/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FunctionType = {
  Generation: "Generation",
  Code: "Code",
  Human: "Human",
  Agent: "Agent",
} as const;
export type FunctionType = ClosedEnum<typeof FunctionType>;

export type Pricing = {};

export const Format = {
  Object: "Object",
  ObjectArray: "ObjectArray",
  Text: "Text",
  TextArray: "TextArray",
  Markdown: "Markdown",
  Code: "Code",
} as const;
export type Format = ClosedEnum<typeof Format>;

export type Shape = {};

export type FunctionT = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  type?: FunctionType | undefined;
  public?: boolean | undefined;
  /**
   * ID of related functions document
   */
  clonedFrom?: string | undefined;
  pricing?: Pricing | undefined;
  format?: Format | undefined;
  schemaYaml?: string | undefined;
  shape?: Shape | undefined;
  code?: string | undefined;
  /**
   * ID of related prompts document
   */
  prompt?: string | undefined;
  role?: string | undefined;
  /**
   * ID of related users document
   */
  user?: string | undefined;
  /**
   * ID of related agents document
   */
  agent?: string | undefined;
  examples?: Array<string> | undefined;
};

/** @internal */
export const FunctionType$inboundSchema: z.ZodNativeEnum<typeof FunctionType> =
  z.nativeEnum(FunctionType);

/** @internal */
export const FunctionType$outboundSchema: z.ZodNativeEnum<typeof FunctionType> =
  FunctionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionType$ {
  /** @deprecated use `FunctionType$inboundSchema` instead. */
  export const inboundSchema = FunctionType$inboundSchema;
  /** @deprecated use `FunctionType$outboundSchema` instead. */
  export const outboundSchema = FunctionType$outboundSchema;
}

/** @internal */
export const Pricing$inboundSchema: z.ZodType<Pricing, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Pricing$Outbound = {};

/** @internal */
export const Pricing$outboundSchema: z.ZodType<
  Pricing$Outbound,
  z.ZodTypeDef,
  Pricing
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pricing$ {
  /** @deprecated use `Pricing$inboundSchema` instead. */
  export const inboundSchema = Pricing$inboundSchema;
  /** @deprecated use `Pricing$outboundSchema` instead. */
  export const outboundSchema = Pricing$outboundSchema;
  /** @deprecated use `Pricing$Outbound` instead. */
  export type Outbound = Pricing$Outbound;
}

export function pricingToJSON(pricing: Pricing): string {
  return JSON.stringify(Pricing$outboundSchema.parse(pricing));
}

export function pricingFromJSON(
  jsonString: string,
): SafeParseResult<Pricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Pricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Pricing' from JSON`,
  );
}

/** @internal */
export const Format$inboundSchema: z.ZodNativeEnum<typeof Format> = z
  .nativeEnum(Format);

/** @internal */
export const Format$outboundSchema: z.ZodNativeEnum<typeof Format> =
  Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format$ {
  /** @deprecated use `Format$inboundSchema` instead. */
  export const inboundSchema = Format$inboundSchema;
  /** @deprecated use `Format$outboundSchema` instead. */
  export const outboundSchema = Format$outboundSchema;
}

/** @internal */
export const Shape$inboundSchema: z.ZodType<Shape, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Shape$Outbound = {};

/** @internal */
export const Shape$outboundSchema: z.ZodType<
  Shape$Outbound,
  z.ZodTypeDef,
  Shape
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Shape$ {
  /** @deprecated use `Shape$inboundSchema` instead. */
  export const inboundSchema = Shape$inboundSchema;
  /** @deprecated use `Shape$outboundSchema` instead. */
  export const outboundSchema = Shape$outboundSchema;
  /** @deprecated use `Shape$Outbound` instead. */
  export type Outbound = Shape$Outbound;
}

export function shapeToJSON(shape: Shape): string {
  return JSON.stringify(Shape$outboundSchema.parse(shape));
}

export function shapeFromJSON(
  jsonString: string,
): SafeParseResult<Shape, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Shape$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Shape' from JSON`,
  );
}

/** @internal */
export const FunctionT$inboundSchema: z.ZodType<
  FunctionT,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  type: FunctionType$inboundSchema.optional(),
  public: z.boolean().optional(),
  clonedFrom: z.string().optional(),
  pricing: z.lazy(() => Pricing$inboundSchema).optional(),
  format: Format$inboundSchema.optional(),
  schemaYaml: z.string().optional(),
  shape: z.lazy(() => Shape$inboundSchema).optional(),
  code: z.string().optional(),
  prompt: z.string().optional(),
  role: z.string().optional(),
  user: z.string().optional(),
  agent: z.string().optional(),
  examples: z.array(z.string()).optional(),
});

/** @internal */
export type FunctionT$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  type?: string | undefined;
  public?: boolean | undefined;
  clonedFrom?: string | undefined;
  pricing?: Pricing$Outbound | undefined;
  format?: string | undefined;
  schemaYaml?: string | undefined;
  shape?: Shape$Outbound | undefined;
  code?: string | undefined;
  prompt?: string | undefined;
  role?: string | undefined;
  user?: string | undefined;
  agent?: string | undefined;
  examples?: Array<string> | undefined;
};

/** @internal */
export const FunctionT$outboundSchema: z.ZodType<
  FunctionT$Outbound,
  z.ZodTypeDef,
  FunctionT
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  type: FunctionType$outboundSchema.optional(),
  public: z.boolean().optional(),
  clonedFrom: z.string().optional(),
  pricing: z.lazy(() => Pricing$outboundSchema).optional(),
  format: Format$outboundSchema.optional(),
  schemaYaml: z.string().optional(),
  shape: z.lazy(() => Shape$outboundSchema).optional(),
  code: z.string().optional(),
  prompt: z.string().optional(),
  role: z.string().optional(),
  user: z.string().optional(),
  agent: z.string().optional(),
  examples: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionT$ {
  /** @deprecated use `FunctionT$inboundSchema` instead. */
  export const inboundSchema = FunctionT$inboundSchema;
  /** @deprecated use `FunctionT$outboundSchema` instead. */
  export const outboundSchema = FunctionT$outboundSchema;
  /** @deprecated use `FunctionT$Outbound` instead. */
  export type Outbound = FunctionT$Outbound;
}

export function functionToJSON(functionT: FunctionT): string {
  return JSON.stringify(FunctionT$outboundSchema.parse(functionT));
}

export function functionFromJSON(
  jsonString: string,
): SafeParseResult<FunctionT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionT' from JSON`,
  );
}

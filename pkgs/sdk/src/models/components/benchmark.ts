/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Benchmark = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const Benchmark$inboundSchema: z.ZodType<
  Benchmark,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type Benchmark$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const Benchmark$outboundSchema: z.ZodType<
  Benchmark$Outbound,
  z.ZodTypeDef,
  Benchmark
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Benchmark$ {
  /** @deprecated use `Benchmark$inboundSchema` instead. */
  export const inboundSchema = Benchmark$inboundSchema;
  /** @deprecated use `Benchmark$outboundSchema` instead. */
  export const outboundSchema = Benchmark$outboundSchema;
  /** @deprecated use `Benchmark$Outbound` instead. */
  export type Outbound = Benchmark$Outbound;
}

export function benchmarkToJSON(benchmark: Benchmark): string {
  return JSON.stringify(Benchmark$outboundSchema.parse(benchmark));
}

export function benchmarkFromJSON(
  jsonString: string,
): SafeParseResult<Benchmark, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Benchmark$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Benchmark' from JSON`,
  );
}

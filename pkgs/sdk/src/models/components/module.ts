/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Module = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const Module$inboundSchema: z.ZodType<Module, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
  });

/** @internal */
export type Module$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const Module$outboundSchema: z.ZodType<
  Module$Outbound,
  z.ZodTypeDef,
  Module
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Module$ {
  /** @deprecated use `Module$inboundSchema` instead. */
  export const inboundSchema = Module$inboundSchema;
  /** @deprecated use `Module$outboundSchema` instead. */
  export const outboundSchema = Module$outboundSchema;
  /** @deprecated use `Module$Outbound` instead. */
  export type Outbound = Module$Outbound;
}

export function moduleToJSON(value: Module): string {
  return JSON.stringify(Module$outboundSchema.parse(value));
}

export function moduleFromJSON(
  jsonString: string,
): SafeParseResult<Module, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Module$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Module' from JSON`,
  );
}

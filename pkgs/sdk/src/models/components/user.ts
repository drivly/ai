/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BetterAuthAdminButtons = {};

export const UserRole = {
  Admin: "admin",
  User: "user",
} as const;
export type UserRole = ClosedEnum<typeof UserRole>;

export type Tenants = {};

export type User = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  roles?: Array<string> | undefined;
  betterAuthAdminButtons?: BetterAuthAdminButtons | undefined;
  name?: string | undefined;
  email?: string | undefined;
  emailVerified?: boolean | undefined;
  image?: string | undefined;
  role?: UserRole | undefined;
  banned?: boolean | undefined;
  banReason?: string | undefined;
  banExpires?: Date | undefined;
  tenants?: Array<Tenants> | undefined;
  enableAPIKey?: boolean | undefined;
  apiKey?: string | undefined;
  apiKeyIndex?: string | undefined;
};

/** @internal */
export const BetterAuthAdminButtons$inboundSchema: z.ZodType<
  BetterAuthAdminButtons,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type BetterAuthAdminButtons$Outbound = {};

/** @internal */
export const BetterAuthAdminButtons$outboundSchema: z.ZodType<
  BetterAuthAdminButtons$Outbound,
  z.ZodTypeDef,
  BetterAuthAdminButtons
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BetterAuthAdminButtons$ {
  /** @deprecated use `BetterAuthAdminButtons$inboundSchema` instead. */
  export const inboundSchema = BetterAuthAdminButtons$inboundSchema;
  /** @deprecated use `BetterAuthAdminButtons$outboundSchema` instead. */
  export const outboundSchema = BetterAuthAdminButtons$outboundSchema;
  /** @deprecated use `BetterAuthAdminButtons$Outbound` instead. */
  export type Outbound = BetterAuthAdminButtons$Outbound;
}

export function betterAuthAdminButtonsToJSON(
  betterAuthAdminButtons: BetterAuthAdminButtons,
): string {
  return JSON.stringify(
    BetterAuthAdminButtons$outboundSchema.parse(betterAuthAdminButtons),
  );
}

export function betterAuthAdminButtonsFromJSON(
  jsonString: string,
): SafeParseResult<BetterAuthAdminButtons, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BetterAuthAdminButtons$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BetterAuthAdminButtons' from JSON`,
  );
}

/** @internal */
export const UserRole$inboundSchema: z.ZodNativeEnum<typeof UserRole> = z
  .nativeEnum(UserRole);

/** @internal */
export const UserRole$outboundSchema: z.ZodNativeEnum<typeof UserRole> =
  UserRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserRole$ {
  /** @deprecated use `UserRole$inboundSchema` instead. */
  export const inboundSchema = UserRole$inboundSchema;
  /** @deprecated use `UserRole$outboundSchema` instead. */
  export const outboundSchema = UserRole$outboundSchema;
}

/** @internal */
export const Tenants$inboundSchema: z.ZodType<Tenants, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Tenants$Outbound = {};

/** @internal */
export const Tenants$outboundSchema: z.ZodType<
  Tenants$Outbound,
  z.ZodTypeDef,
  Tenants
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tenants$ {
  /** @deprecated use `Tenants$inboundSchema` instead. */
  export const inboundSchema = Tenants$inboundSchema;
  /** @deprecated use `Tenants$outboundSchema` instead. */
  export const outboundSchema = Tenants$outboundSchema;
  /** @deprecated use `Tenants$Outbound` instead. */
  export type Outbound = Tenants$Outbound;
}

export function tenantsToJSON(tenants: Tenants): string {
  return JSON.stringify(Tenants$outboundSchema.parse(tenants));
}

export function tenantsFromJSON(
  jsonString: string,
): SafeParseResult<Tenants, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tenants$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tenants' from JSON`,
  );
}

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    roles: z.array(z.string()).optional(),
    betterAuthAdminButtons: z.lazy(() => BetterAuthAdminButtons$inboundSchema)
      .optional(),
    name: z.string().optional(),
    email: z.string().optional(),
    emailVerified: z.boolean().optional(),
    image: z.string().optional(),
    role: UserRole$inboundSchema.optional(),
    banned: z.boolean().optional(),
    banReason: z.string().optional(),
    banExpires: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    tenants: z.array(z.lazy(() => Tenants$inboundSchema)).optional(),
    enableAPIKey: z.boolean().optional(),
    apiKey: z.string().optional(),
    apiKeyIndex: z.string().optional(),
  });

/** @internal */
export type User$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  roles?: Array<string> | undefined;
  betterAuthAdminButtons?: BetterAuthAdminButtons$Outbound | undefined;
  name?: string | undefined;
  email?: string | undefined;
  emailVerified?: boolean | undefined;
  image?: string | undefined;
  role?: string | undefined;
  banned?: boolean | undefined;
  banReason?: string | undefined;
  banExpires?: string | undefined;
  tenants?: Array<Tenants$Outbound> | undefined;
  enableAPIKey?: boolean | undefined;
  apiKey?: string | undefined;
  apiKeyIndex?: string | undefined;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> =
  z.object({
    id: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    roles: z.array(z.string()).optional(),
    betterAuthAdminButtons: z.lazy(() => BetterAuthAdminButtons$outboundSchema)
      .optional(),
    name: z.string().optional(),
    email: z.string().optional(),
    emailVerified: z.boolean().optional(),
    image: z.string().optional(),
    role: UserRole$outboundSchema.optional(),
    banned: z.boolean().optional(),
    banReason: z.string().optional(),
    banExpires: z.date().transform(v => v.toISOString()).optional(),
    tenants: z.array(z.lazy(() => Tenants$outboundSchema)).optional(),
    enableAPIKey: z.boolean().optional(),
    apiKey: z.string().optional(),
    apiKeyIndex: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
  /** @deprecated use `User$inboundSchema` instead. */
  export const inboundSchema = User$inboundSchema;
  /** @deprecated use `User$outboundSchema` instead. */
  export const outboundSchema = User$outboundSchema;
  /** @deprecated use `User$Outbound` instead. */
  export type Outbound = User$Outbound;
}

export function userToJSON(user: User): string {
  return JSON.stringify(User$outboundSchema.parse(user));
}

export function userFromJSON(
  jsonString: string,
): SafeParseResult<User, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => User$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'User' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TestIds = {};

export type EvalRunResults = {};

export type EvalRun = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  testIds?: Array<TestIds> | undefined;
  results?: Array<EvalRunResults> | undefined;
  startedAt?: Date | undefined;
  completedAt?: Date | undefined;
};

/** @internal */
export const TestIds$inboundSchema: z.ZodType<TestIds, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type TestIds$Outbound = {};

/** @internal */
export const TestIds$outboundSchema: z.ZodType<
  TestIds$Outbound,
  z.ZodTypeDef,
  TestIds
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestIds$ {
  /** @deprecated use `TestIds$inboundSchema` instead. */
  export const inboundSchema = TestIds$inboundSchema;
  /** @deprecated use `TestIds$outboundSchema` instead. */
  export const outboundSchema = TestIds$outboundSchema;
  /** @deprecated use `TestIds$Outbound` instead. */
  export type Outbound = TestIds$Outbound;
}

export function testIdsToJSON(testIds: TestIds): string {
  return JSON.stringify(TestIds$outboundSchema.parse(testIds));
}

export function testIdsFromJSON(
  jsonString: string,
): SafeParseResult<TestIds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestIds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestIds' from JSON`,
  );
}

/** @internal */
export const EvalRunResults$inboundSchema: z.ZodType<
  EvalRunResults,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EvalRunResults$Outbound = {};

/** @internal */
export const EvalRunResults$outboundSchema: z.ZodType<
  EvalRunResults$Outbound,
  z.ZodTypeDef,
  EvalRunResults
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalRunResults$ {
  /** @deprecated use `EvalRunResults$inboundSchema` instead. */
  export const inboundSchema = EvalRunResults$inboundSchema;
  /** @deprecated use `EvalRunResults$outboundSchema` instead. */
  export const outboundSchema = EvalRunResults$outboundSchema;
  /** @deprecated use `EvalRunResults$Outbound` instead. */
  export type Outbound = EvalRunResults$Outbound;
}

export function evalRunResultsToJSON(evalRunResults: EvalRunResults): string {
  return JSON.stringify(EvalRunResults$outboundSchema.parse(evalRunResults));
}

export function evalRunResultsFromJSON(
  jsonString: string,
): SafeParseResult<EvalRunResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalRunResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalRunResults' from JSON`,
  );
}

/** @internal */
export const EvalRun$inboundSchema: z.ZodType<EvalRun, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    testIds: z.array(z.lazy(() => TestIds$inboundSchema)).optional(),
    results: z.array(z.lazy(() => EvalRunResults$inboundSchema)).optional(),
    startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    completedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type EvalRun$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  testIds?: Array<TestIds$Outbound> | undefined;
  results?: Array<EvalRunResults$Outbound> | undefined;
  startedAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const EvalRun$outboundSchema: z.ZodType<
  EvalRun$Outbound,
  z.ZodTypeDef,
  EvalRun
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  testIds: z.array(z.lazy(() => TestIds$outboundSchema)).optional(),
  results: z.array(z.lazy(() => EvalRunResults$outboundSchema)).optional(),
  startedAt: z.date().transform(v => v.toISOString()).optional(),
  completedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalRun$ {
  /** @deprecated use `EvalRun$inboundSchema` instead. */
  export const inboundSchema = EvalRun$inboundSchema;
  /** @deprecated use `EvalRun$outboundSchema` instead. */
  export const outboundSchema = EvalRun$outboundSchema;
  /** @deprecated use `EvalRun$Outbound` instead. */
  export type Outbound = EvalRun$Outbound;
}

export function evalRunToJSON(evalRun: EvalRun): string {
  return JSON.stringify(EvalRun$outboundSchema.parse(evalRun));
}

export function evalRunFromJSON(
  jsonString: string,
): SafeParseResult<EvalRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalRun' from JSON`,
  );
}

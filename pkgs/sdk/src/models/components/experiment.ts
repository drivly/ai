/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ExperimentStatus = {
  Draft: "draft",
  Active: "active",
  Paused: "paused",
  Completed: "completed",
} as const;
export type ExperimentStatus = ClosedEnum<typeof ExperimentStatus>;

export const ExperimentProvider = {
  Vercel: "vercel",
  Internal: "internal",
} as const;
export type ExperimentProvider = ClosedEnum<typeof ExperimentProvider>;

export type Variants = {};

export type Metrics = {};

export type TrafficAllocation = {};

export type Targeting = {};

export type Duration = {};

export type ExperimentResults = {};

export type Experiment = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  status?: ExperimentStatus | undefined;
  provider?: ExperimentProvider | undefined;
  variants?: Array<Variants> | undefined;
  metrics?: Array<Metrics> | undefined;
  trafficAllocation?: TrafficAllocation | undefined;
  targeting?: Targeting | undefined;
  duration?: Duration | undefined;
  results?: ExperimentResults | undefined;
};

/** @internal */
export const ExperimentStatus$inboundSchema: z.ZodNativeEnum<
  typeof ExperimentStatus
> = z.nativeEnum(ExperimentStatus);

/** @internal */
export const ExperimentStatus$outboundSchema: z.ZodNativeEnum<
  typeof ExperimentStatus
> = ExperimentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentStatus$ {
  /** @deprecated use `ExperimentStatus$inboundSchema` instead. */
  export const inboundSchema = ExperimentStatus$inboundSchema;
  /** @deprecated use `ExperimentStatus$outboundSchema` instead. */
  export const outboundSchema = ExperimentStatus$outboundSchema;
}

/** @internal */
export const ExperimentProvider$inboundSchema: z.ZodNativeEnum<
  typeof ExperimentProvider
> = z.nativeEnum(ExperimentProvider);

/** @internal */
export const ExperimentProvider$outboundSchema: z.ZodNativeEnum<
  typeof ExperimentProvider
> = ExperimentProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentProvider$ {
  /** @deprecated use `ExperimentProvider$inboundSchema` instead. */
  export const inboundSchema = ExperimentProvider$inboundSchema;
  /** @deprecated use `ExperimentProvider$outboundSchema` instead. */
  export const outboundSchema = ExperimentProvider$outboundSchema;
}

/** @internal */
export const Variants$inboundSchema: z.ZodType<
  Variants,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Variants$Outbound = {};

/** @internal */
export const Variants$outboundSchema: z.ZodType<
  Variants$Outbound,
  z.ZodTypeDef,
  Variants
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Variants$ {
  /** @deprecated use `Variants$inboundSchema` instead. */
  export const inboundSchema = Variants$inboundSchema;
  /** @deprecated use `Variants$outboundSchema` instead. */
  export const outboundSchema = Variants$outboundSchema;
  /** @deprecated use `Variants$Outbound` instead. */
  export type Outbound = Variants$Outbound;
}

export function variantsToJSON(variants: Variants): string {
  return JSON.stringify(Variants$outboundSchema.parse(variants));
}

export function variantsFromJSON(
  jsonString: string,
): SafeParseResult<Variants, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Variants$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Variants' from JSON`,
  );
}

/** @internal */
export const Metrics$inboundSchema: z.ZodType<Metrics, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Metrics$Outbound = {};

/** @internal */
export const Metrics$outboundSchema: z.ZodType<
  Metrics$Outbound,
  z.ZodTypeDef,
  Metrics
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metrics$ {
  /** @deprecated use `Metrics$inboundSchema` instead. */
  export const inboundSchema = Metrics$inboundSchema;
  /** @deprecated use `Metrics$outboundSchema` instead. */
  export const outboundSchema = Metrics$outboundSchema;
  /** @deprecated use `Metrics$Outbound` instead. */
  export type Outbound = Metrics$Outbound;
}

export function metricsToJSON(metrics: Metrics): string {
  return JSON.stringify(Metrics$outboundSchema.parse(metrics));
}

export function metricsFromJSON(
  jsonString: string,
): SafeParseResult<Metrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metrics' from JSON`,
  );
}

/** @internal */
export const TrafficAllocation$inboundSchema: z.ZodType<
  TrafficAllocation,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TrafficAllocation$Outbound = {};

/** @internal */
export const TrafficAllocation$outboundSchema: z.ZodType<
  TrafficAllocation$Outbound,
  z.ZodTypeDef,
  TrafficAllocation
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrafficAllocation$ {
  /** @deprecated use `TrafficAllocation$inboundSchema` instead. */
  export const inboundSchema = TrafficAllocation$inboundSchema;
  /** @deprecated use `TrafficAllocation$outboundSchema` instead. */
  export const outboundSchema = TrafficAllocation$outboundSchema;
  /** @deprecated use `TrafficAllocation$Outbound` instead. */
  export type Outbound = TrafficAllocation$Outbound;
}

export function trafficAllocationToJSON(
  trafficAllocation: TrafficAllocation,
): string {
  return JSON.stringify(
    TrafficAllocation$outboundSchema.parse(trafficAllocation),
  );
}

export function trafficAllocationFromJSON(
  jsonString: string,
): SafeParseResult<TrafficAllocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrafficAllocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrafficAllocation' from JSON`,
  );
}

/** @internal */
export const Targeting$inboundSchema: z.ZodType<
  Targeting,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Targeting$Outbound = {};

/** @internal */
export const Targeting$outboundSchema: z.ZodType<
  Targeting$Outbound,
  z.ZodTypeDef,
  Targeting
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Targeting$ {
  /** @deprecated use `Targeting$inboundSchema` instead. */
  export const inboundSchema = Targeting$inboundSchema;
  /** @deprecated use `Targeting$outboundSchema` instead. */
  export const outboundSchema = Targeting$outboundSchema;
  /** @deprecated use `Targeting$Outbound` instead. */
  export type Outbound = Targeting$Outbound;
}

export function targetingToJSON(targeting: Targeting): string {
  return JSON.stringify(Targeting$outboundSchema.parse(targeting));
}

export function targetingFromJSON(
  jsonString: string,
): SafeParseResult<Targeting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Targeting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Targeting' from JSON`,
  );
}

/** @internal */
export const Duration$inboundSchema: z.ZodType<
  Duration,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Duration$Outbound = {};

/** @internal */
export const Duration$outboundSchema: z.ZodType<
  Duration$Outbound,
  z.ZodTypeDef,
  Duration
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Duration$ {
  /** @deprecated use `Duration$inboundSchema` instead. */
  export const inboundSchema = Duration$inboundSchema;
  /** @deprecated use `Duration$outboundSchema` instead. */
  export const outboundSchema = Duration$outboundSchema;
  /** @deprecated use `Duration$Outbound` instead. */
  export type Outbound = Duration$Outbound;
}

export function durationToJSON(duration: Duration): string {
  return JSON.stringify(Duration$outboundSchema.parse(duration));
}

export function durationFromJSON(
  jsonString: string,
): SafeParseResult<Duration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Duration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Duration' from JSON`,
  );
}

/** @internal */
export const ExperimentResults$inboundSchema: z.ZodType<
  ExperimentResults,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ExperimentResults$Outbound = {};

/** @internal */
export const ExperimentResults$outboundSchema: z.ZodType<
  ExperimentResults$Outbound,
  z.ZodTypeDef,
  ExperimentResults
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentResults$ {
  /** @deprecated use `ExperimentResults$inboundSchema` instead. */
  export const inboundSchema = ExperimentResults$inboundSchema;
  /** @deprecated use `ExperimentResults$outboundSchema` instead. */
  export const outboundSchema = ExperimentResults$outboundSchema;
  /** @deprecated use `ExperimentResults$Outbound` instead. */
  export type Outbound = ExperimentResults$Outbound;
}

export function experimentResultsToJSON(
  experimentResults: ExperimentResults,
): string {
  return JSON.stringify(
    ExperimentResults$outboundSchema.parse(experimentResults),
  );
}

export function experimentResultsFromJSON(
  jsonString: string,
): SafeParseResult<ExperimentResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExperimentResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExperimentResults' from JSON`,
  );
}

/** @internal */
export const Experiment$inboundSchema: z.ZodType<
  Experiment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  status: ExperimentStatus$inboundSchema.optional(),
  provider: ExperimentProvider$inboundSchema.optional(),
  variants: z.array(z.lazy(() => Variants$inboundSchema)).optional(),
  metrics: z.array(z.lazy(() => Metrics$inboundSchema)).optional(),
  trafficAllocation: z.lazy(() => TrafficAllocation$inboundSchema).optional(),
  targeting: z.lazy(() => Targeting$inboundSchema).optional(),
  duration: z.lazy(() => Duration$inboundSchema).optional(),
  results: z.lazy(() => ExperimentResults$inboundSchema).optional(),
});

/** @internal */
export type Experiment$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  status?: string | undefined;
  provider?: string | undefined;
  variants?: Array<Variants$Outbound> | undefined;
  metrics?: Array<Metrics$Outbound> | undefined;
  trafficAllocation?: TrafficAllocation$Outbound | undefined;
  targeting?: Targeting$Outbound | undefined;
  duration?: Duration$Outbound | undefined;
  results?: ExperimentResults$Outbound | undefined;
};

/** @internal */
export const Experiment$outboundSchema: z.ZodType<
  Experiment$Outbound,
  z.ZodTypeDef,
  Experiment
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  status: ExperimentStatus$outboundSchema.optional(),
  provider: ExperimentProvider$outboundSchema.optional(),
  variants: z.array(z.lazy(() => Variants$outboundSchema)).optional(),
  metrics: z.array(z.lazy(() => Metrics$outboundSchema)).optional(),
  trafficAllocation: z.lazy(() => TrafficAllocation$outboundSchema).optional(),
  targeting: z.lazy(() => Targeting$outboundSchema).optional(),
  duration: z.lazy(() => Duration$outboundSchema).optional(),
  results: z.lazy(() => ExperimentResults$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Experiment$ {
  /** @deprecated use `Experiment$inboundSchema` instead. */
  export const inboundSchema = Experiment$inboundSchema;
  /** @deprecated use `Experiment$outboundSchema` instead. */
  export const outboundSchema = Experiment$outboundSchema;
  /** @deprecated use `Experiment$Outbound` instead. */
  export type Outbound = Experiment$Outbound;
}

export function experimentToJSON(experiment: Experiment): string {
  return JSON.stringify(Experiment$outboundSchema.parse(experiment));
}

export function experimentFromJSON(
  jsonString: string,
): SafeParseResult<Experiment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Experiment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Experiment' from JSON`,
  );
}

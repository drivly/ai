/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ModelPricing = {};

export type Capabilities = {};

export type Model = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  /**
   * ID of related providers document
   */
  provider?: string | undefined;
  /**
   * ID of related labs document
   */
  lab?: string | undefined;
  description?: string | undefined;
  contextLength?: number | undefined;
  pricing?: ModelPricing | undefined;
  capabilities?: Array<Capabilities> | undefined;
  modelUrl?: string | undefined;
  imageUrl?: string | undefined;
};

/** @internal */
export const ModelPricing$inboundSchema: z.ZodType<
  ModelPricing,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ModelPricing$Outbound = {};

/** @internal */
export const ModelPricing$outboundSchema: z.ZodType<
  ModelPricing$Outbound,
  z.ZodTypeDef,
  ModelPricing
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelPricing$ {
  /** @deprecated use `ModelPricing$inboundSchema` instead. */
  export const inboundSchema = ModelPricing$inboundSchema;
  /** @deprecated use `ModelPricing$outboundSchema` instead. */
  export const outboundSchema = ModelPricing$outboundSchema;
  /** @deprecated use `ModelPricing$Outbound` instead. */
  export type Outbound = ModelPricing$Outbound;
}

export function modelPricingToJSON(modelPricing: ModelPricing): string {
  return JSON.stringify(ModelPricing$outboundSchema.parse(modelPricing));
}

export function modelPricingFromJSON(
  jsonString: string,
): SafeParseResult<ModelPricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelPricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelPricing' from JSON`,
  );
}

/** @internal */
export const Capabilities$inboundSchema: z.ZodType<
  Capabilities,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Capabilities$Outbound = {};

/** @internal */
export const Capabilities$outboundSchema: z.ZodType<
  Capabilities$Outbound,
  z.ZodTypeDef,
  Capabilities
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Capabilities$ {
  /** @deprecated use `Capabilities$inboundSchema` instead. */
  export const inboundSchema = Capabilities$inboundSchema;
  /** @deprecated use `Capabilities$outboundSchema` instead. */
  export const outboundSchema = Capabilities$outboundSchema;
  /** @deprecated use `Capabilities$Outbound` instead. */
  export type Outbound = Capabilities$Outbound;
}

export function capabilitiesToJSON(capabilities: Capabilities): string {
  return JSON.stringify(Capabilities$outboundSchema.parse(capabilities));
}

export function capabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<Capabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Capabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Capabilities' from JSON`,
  );
}

/** @internal */
export const Model$inboundSchema: z.ZodType<Model, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    provider: z.string().optional(),
    lab: z.string().optional(),
    description: z.string().optional(),
    context_length: z.number().optional(),
    pricing: z.lazy(() => ModelPricing$inboundSchema).optional(),
    capabilities: z.array(z.lazy(() => Capabilities$inboundSchema)).optional(),
    modelUrl: z.string().optional(),
    imageUrl: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "context_length": "contextLength",
    });
  });

/** @internal */
export type Model$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  provider?: string | undefined;
  lab?: string | undefined;
  description?: string | undefined;
  context_length?: number | undefined;
  pricing?: ModelPricing$Outbound | undefined;
  capabilities?: Array<Capabilities$Outbound> | undefined;
  modelUrl?: string | undefined;
  imageUrl?: string | undefined;
};

/** @internal */
export const Model$outboundSchema: z.ZodType<
  Model$Outbound,
  z.ZodTypeDef,
  Model
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  provider: z.string().optional(),
  lab: z.string().optional(),
  description: z.string().optional(),
  contextLength: z.number().optional(),
  pricing: z.lazy(() => ModelPricing$outboundSchema).optional(),
  capabilities: z.array(z.lazy(() => Capabilities$outboundSchema)).optional(),
  modelUrl: z.string().optional(),
  imageUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    contextLength: "context_length",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Model$ {
  /** @deprecated use `Model$inboundSchema` instead. */
  export const inboundSchema = Model$inboundSchema;
  /** @deprecated use `Model$outboundSchema` instead. */
  export const outboundSchema = Model$outboundSchema;
  /** @deprecated use `Model$Outbound` instead. */
  export type Outbound = Model$Outbound;
}

export function modelToJSON(model: Model): string {
  return JSON.stringify(Model$outboundSchema.parse(model));
}

export function modelFromJSON(
  jsonString: string,
): SafeParseResult<Model, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Model$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Model' from JSON`,
  );
}

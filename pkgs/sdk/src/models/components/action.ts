/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ParametersT = {};

export type Response = {};

export type Action = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  displayName?: string | undefined;
  description?: string | undefined;
  appKey?: string | undefined;
  appName?: string | undefined;
  appId?: string | undefined;
  version?: string | undefined;
  parameters?: ParametersT | undefined;
  response?: Response | undefined;
};

/** @internal */
export const ParametersT$inboundSchema: z.ZodType<
  ParametersT,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ParametersT$Outbound = {};

/** @internal */
export const ParametersT$outboundSchema: z.ZodType<
  ParametersT$Outbound,
  z.ZodTypeDef,
  ParametersT
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParametersT$ {
  /** @deprecated use `ParametersT$inboundSchema` instead. */
  export const inboundSchema = ParametersT$inboundSchema;
  /** @deprecated use `ParametersT$outboundSchema` instead. */
  export const outboundSchema = ParametersT$outboundSchema;
  /** @deprecated use `ParametersT$Outbound` instead. */
  export type Outbound = ParametersT$Outbound;
}

export function parametersToJSON(parametersT: ParametersT): string {
  return JSON.stringify(ParametersT$outboundSchema.parse(parametersT));
}

export function parametersFromJSON(
  jsonString: string,
): SafeParseResult<ParametersT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ParametersT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ParametersT' from JSON`,
  );
}

/** @internal */
export const Response$inboundSchema: z.ZodType<
  Response,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Response$Outbound = {};

/** @internal */
export const Response$outboundSchema: z.ZodType<
  Response$Outbound,
  z.ZodTypeDef,
  Response
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Response$ {
  /** @deprecated use `Response$inboundSchema` instead. */
  export const inboundSchema = Response$inboundSchema;
  /** @deprecated use `Response$outboundSchema` instead. */
  export const outboundSchema = Response$outboundSchema;
  /** @deprecated use `Response$Outbound` instead. */
  export type Outbound = Response$Outbound;
}

export function responseToJSON(response: Response): string {
  return JSON.stringify(Response$outboundSchema.parse(response));
}

export function responseFromJSON(
  jsonString: string,
): SafeParseResult<Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Response' from JSON`,
  );
}

/** @internal */
export const Action$inboundSchema: z.ZodType<Action, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    displayName: z.string().optional(),
    description: z.string().optional(),
    appKey: z.string().optional(),
    appName: z.string().optional(),
    appId: z.string().optional(),
    version: z.string().optional(),
    parameters: z.lazy(() => ParametersT$inboundSchema).optional(),
    response: z.lazy(() => Response$inboundSchema).optional(),
  });

/** @internal */
export type Action$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  displayName?: string | undefined;
  description?: string | undefined;
  appKey?: string | undefined;
  appName?: string | undefined;
  appId?: string | undefined;
  version?: string | undefined;
  parameters?: ParametersT$Outbound | undefined;
  response?: Response$Outbound | undefined;
};

/** @internal */
export const Action$outboundSchema: z.ZodType<
  Action$Outbound,
  z.ZodTypeDef,
  Action
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  displayName: z.string().optional(),
  description: z.string().optional(),
  appKey: z.string().optional(),
  appName: z.string().optional(),
  appId: z.string().optional(),
  version: z.string().optional(),
  parameters: z.lazy(() => ParametersT$outboundSchema).optional(),
  response: z.lazy(() => Response$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Action$ {
  /** @deprecated use `Action$inboundSchema` instead. */
  export const inboundSchema = Action$inboundSchema;
  /** @deprecated use `Action$outboundSchema` instead. */
  export const outboundSchema = Action$outboundSchema;
  /** @deprecated use `Action$Outbound` instead. */
  export type Outbound = Action$Outbound;
}

export function actionToJSON(action: Action): string {
  return JSON.stringify(Action$outboundSchema.parse(action));
}

export function actionFromJSON(
  jsonString: string,
): SafeParseResult<Action, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Action$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Action' from JSON`,
  );
}

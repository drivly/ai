/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DatabaseType1 = {
  Integrated: "Integrated",
  Dedicated: "Dedicated",
  SelfHosted: "Self-Hosted",
} as const;
export type DatabaseType1 = ClosedEnum<typeof DatabaseType1>;

export const SchemaEnforcement = {
  Flexible: "flexible",
  Enforced: "enforced",
} as const;
export type SchemaEnforcement = ClosedEnum<typeof SchemaEnforcement>;

export const DatabaseType = {
  Mongo: "Mongo",
  Postgres: "Postgres",
  Sqlite: "Sqlite",
} as const;
export type DatabaseType = ClosedEnum<typeof DatabaseType>;

export const Regions = {
  UsEast1: "us-east-1",
  UsEast2: "us-east-2",
  UsWest1: "us-west-1",
  UsWest2: "us-west-2",
  EuWest1: "eu-west-1",
  ApNortheast1: "ap-northeast-1",
  ApSoutheast1: "ap-southeast-1",
  EuCentral1: "eu-central-1",
  ApSouth1: "ap-south-1",
} as const;
export type Regions = ClosedEnum<typeof Regions>;

export type Database = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  domain?: string | undefined;
  type?: DatabaseType1 | undefined;
  schemaEnforcement?: SchemaEnforcement | undefined;
  databaseType?: DatabaseType | undefined;
  regions?: Regions | undefined;
  nouns?: Array<string> | undefined;
};

/** @internal */
export const DatabaseType1$inboundSchema: z.ZodNativeEnum<
  typeof DatabaseType1
> = z.nativeEnum(DatabaseType1);

/** @internal */
export const DatabaseType1$outboundSchema: z.ZodNativeEnum<
  typeof DatabaseType1
> = DatabaseType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatabaseType1$ {
  /** @deprecated use `DatabaseType1$inboundSchema` instead. */
  export const inboundSchema = DatabaseType1$inboundSchema;
  /** @deprecated use `DatabaseType1$outboundSchema` instead. */
  export const outboundSchema = DatabaseType1$outboundSchema;
}

/** @internal */
export const SchemaEnforcement$inboundSchema: z.ZodNativeEnum<
  typeof SchemaEnforcement
> = z.nativeEnum(SchemaEnforcement);

/** @internal */
export const SchemaEnforcement$outboundSchema: z.ZodNativeEnum<
  typeof SchemaEnforcement
> = SchemaEnforcement$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemaEnforcement$ {
  /** @deprecated use `SchemaEnforcement$inboundSchema` instead. */
  export const inboundSchema = SchemaEnforcement$inboundSchema;
  /** @deprecated use `SchemaEnforcement$outboundSchema` instead. */
  export const outboundSchema = SchemaEnforcement$outboundSchema;
}

/** @internal */
export const DatabaseType$inboundSchema: z.ZodNativeEnum<typeof DatabaseType> =
  z.nativeEnum(DatabaseType);

/** @internal */
export const DatabaseType$outboundSchema: z.ZodNativeEnum<typeof DatabaseType> =
  DatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatabaseType$ {
  /** @deprecated use `DatabaseType$inboundSchema` instead. */
  export const inboundSchema = DatabaseType$inboundSchema;
  /** @deprecated use `DatabaseType$outboundSchema` instead. */
  export const outboundSchema = DatabaseType$outboundSchema;
}

/** @internal */
export const Regions$inboundSchema: z.ZodNativeEnum<typeof Regions> = z
  .nativeEnum(Regions);

/** @internal */
export const Regions$outboundSchema: z.ZodNativeEnum<typeof Regions> =
  Regions$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Regions$ {
  /** @deprecated use `Regions$inboundSchema` instead. */
  export const inboundSchema = Regions$inboundSchema;
  /** @deprecated use `Regions$outboundSchema` instead. */
  export const outboundSchema = Regions$outboundSchema;
}

/** @internal */
export const Database$inboundSchema: z.ZodType<
  Database,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  domain: z.string().optional(),
  type: DatabaseType1$inboundSchema.optional(),
  schemaEnforcement: SchemaEnforcement$inboundSchema.optional(),
  databaseType: DatabaseType$inboundSchema.optional(),
  regions: Regions$inboundSchema.optional(),
  nouns: z.array(z.string()).optional(),
});

/** @internal */
export type Database$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  domain?: string | undefined;
  type?: string | undefined;
  schemaEnforcement?: string | undefined;
  databaseType?: string | undefined;
  regions?: string | undefined;
  nouns?: Array<string> | undefined;
};

/** @internal */
export const Database$outboundSchema: z.ZodType<
  Database$Outbound,
  z.ZodTypeDef,
  Database
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  domain: z.string().optional(),
  type: DatabaseType1$outboundSchema.optional(),
  schemaEnforcement: SchemaEnforcement$outboundSchema.optional(),
  databaseType: DatabaseType$outboundSchema.optional(),
  regions: Regions$outboundSchema.optional(),
  nouns: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Database$ {
  /** @deprecated use `Database$inboundSchema` instead. */
  export const inboundSchema = Database$inboundSchema;
  /** @deprecated use `Database$outboundSchema` instead. */
  export const outboundSchema = Database$outboundSchema;
  /** @deprecated use `Database$Outbound` instead. */
  export type Outbound = Database$Outbound;
}

export function databaseToJSON(database: Database): string {
  return JSON.stringify(Database$outboundSchema.parse(database));
}

export function databaseFromJSON(
  jsonString: string,
): SafeParseResult<Database, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Database$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Database' from JSON`,
  );
}

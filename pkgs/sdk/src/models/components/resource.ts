/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Data = {};

export type Embedding = {};

export type Resource = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  yaml?: string | undefined;
  data?: Data | undefined;
  embedding?: Embedding | undefined;
  subjectOf?: Array<string> | undefined;
  objectOf?: Array<string> | undefined;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Data$Outbound = {};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const Embedding$inboundSchema: z.ZodType<
  Embedding,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Embedding$Outbound = {};

/** @internal */
export const Embedding$outboundSchema: z.ZodType<
  Embedding$Outbound,
  z.ZodTypeDef,
  Embedding
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Embedding$ {
  /** @deprecated use `Embedding$inboundSchema` instead. */
  export const inboundSchema = Embedding$inboundSchema;
  /** @deprecated use `Embedding$outboundSchema` instead. */
  export const outboundSchema = Embedding$outboundSchema;
  /** @deprecated use `Embedding$Outbound` instead. */
  export type Outbound = Embedding$Outbound;
}

export function embeddingToJSON(embedding: Embedding): string {
  return JSON.stringify(Embedding$outboundSchema.parse(embedding));
}

export function embeddingFromJSON(
  jsonString: string,
): SafeParseResult<Embedding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Embedding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Embedding' from JSON`,
  );
}

/** @internal */
export const Resource$inboundSchema: z.ZodType<
  Resource,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  tenant: z.string().optional(),
  yaml: z.string().optional(),
  data: z.lazy(() => Data$inboundSchema).optional(),
  embedding: z.lazy(() => Embedding$inboundSchema).optional(),
  subjectOf: z.array(z.string()).optional(),
  objectOf: z.array(z.string()).optional(),
});

/** @internal */
export type Resource$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  yaml?: string | undefined;
  data?: Data$Outbound | undefined;
  embedding?: Embedding$Outbound | undefined;
  subjectOf?: Array<string> | undefined;
  objectOf?: Array<string> | undefined;
};

/** @internal */
export const Resource$outboundSchema: z.ZodType<
  Resource$Outbound,
  z.ZodTypeDef,
  Resource
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  yaml: z.string().optional(),
  data: z.lazy(() => Data$outboundSchema).optional(),
  embedding: z.lazy(() => Embedding$outboundSchema).optional(),
  subjectOf: z.array(z.string()).optional(),
  objectOf: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Resource$ {
  /** @deprecated use `Resource$inboundSchema` instead. */
  export const inboundSchema = Resource$inboundSchema;
  /** @deprecated use `Resource$outboundSchema` instead. */
  export const outboundSchema = Resource$outboundSchema;
  /** @deprecated use `Resource$Outbound` instead. */
  export type Outbound = Resource$Outbound;
}

export function resourceToJSON(resource: Resource): string {
  return JSON.stringify(Resource$outboundSchema.parse(resource));
}

export function resourceFromJSON(
  jsonString: string,
): SafeParseResult<Resource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Resource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Resource' from JSON`,
  );
}

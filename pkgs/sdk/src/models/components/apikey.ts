/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type APIKey = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  name?: string | undefined;
  email?: string | undefined;
  description?: string | undefined;
  url?: string | undefined;
  enableAPIKey?: boolean | undefined;
  apiKey?: string | undefined;
  apiKeyIndex?: string | undefined;
};

/** @internal */
export const APIKey$inboundSchema: z.ZodType<APIKey, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    name: z.string().optional(),
    email: z.string().optional(),
    description: z.string().optional(),
    url: z.string().optional(),
    enableAPIKey: z.boolean().optional(),
    apiKey: z.string().optional(),
    apiKeyIndex: z.string().optional(),
  });

/** @internal */
export type APIKey$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  description?: string | undefined;
  url?: string | undefined;
  enableAPIKey?: boolean | undefined;
  apiKey?: string | undefined;
  apiKeyIndex?: string | undefined;
};

/** @internal */
export const APIKey$outboundSchema: z.ZodType<
  APIKey$Outbound,
  z.ZodTypeDef,
  APIKey
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  description: z.string().optional(),
  url: z.string().optional(),
  enableAPIKey: z.boolean().optional(),
  apiKey: z.string().optional(),
  apiKeyIndex: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace APIKey$ {
  /** @deprecated use `APIKey$inboundSchema` instead. */
  export const inboundSchema = APIKey$inboundSchema;
  /** @deprecated use `APIKey$outboundSchema` instead. */
  export const outboundSchema = APIKey$outboundSchema;
  /** @deprecated use `APIKey$Outbound` instead. */
  export type Outbound = APIKey$Outbound;
}

export function apiKeyToJSON(apiKey: APIKey): string {
  return JSON.stringify(APIKey$outboundSchema.parse(apiKey));
}

export function apiKeyFromJSON(
  jsonString: string,
): SafeParseResult<APIKey, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => APIKey$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'APIKey' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Tasks = {};

export type Queue = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  /**
   * ID of related roles document
   */
  role?: string | undefined;
  tasks?: Tasks | undefined;
};

/** @internal */
export const Tasks$inboundSchema: z.ZodType<Tasks, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Tasks$Outbound = {};

/** @internal */
export const Tasks$outboundSchema: z.ZodType<
  Tasks$Outbound,
  z.ZodTypeDef,
  Tasks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tasks$ {
  /** @deprecated use `Tasks$inboundSchema` instead. */
  export const inboundSchema = Tasks$inboundSchema;
  /** @deprecated use `Tasks$outboundSchema` instead. */
  export const outboundSchema = Tasks$outboundSchema;
  /** @deprecated use `Tasks$Outbound` instead. */
  export type Outbound = Tasks$Outbound;
}

export function tasksToJSON(tasks: Tasks): string {
  return JSON.stringify(Tasks$outboundSchema.parse(tasks));
}

export function tasksFromJSON(
  jsonString: string,
): SafeParseResult<Tasks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tasks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tasks' from JSON`,
  );
}

/** @internal */
export const Queue$inboundSchema: z.ZodType<Queue, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    role: z.string().optional(),
    tasks: z.lazy(() => Tasks$inboundSchema).optional(),
  });

/** @internal */
export type Queue$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  role?: string | undefined;
  tasks?: Tasks$Outbound | undefined;
};

/** @internal */
export const Queue$outboundSchema: z.ZodType<
  Queue$Outbound,
  z.ZodTypeDef,
  Queue
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  role: z.string().optional(),
  tasks: z.lazy(() => Tasks$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Queue$ {
  /** @deprecated use `Queue$inboundSchema` instead. */
  export const inboundSchema = Queue$inboundSchema;
  /** @deprecated use `Queue$outboundSchema` instead. */
  export const outboundSchema = Queue$outboundSchema;
  /** @deprecated use `Queue$Outbound` instead. */
  export type Outbound = Queue$Outbound;
}

export function queueToJSON(queue: Queue): string {
  return JSON.stringify(Queue$outboundSchema.parse(queue));
}

export function queueFromJSON(
  jsonString: string,
): SafeParseResult<Queue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Queue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Queue' from JSON`,
  );
}

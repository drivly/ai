/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Provider = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  name?: string | undefined;
  description?: string | undefined;
  website?: string | undefined;
  logoUrl?: string | undefined;
};

/** @internal */
export const Provider$inboundSchema: z.ZodType<
  Provider,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  website: z.string().optional(),
  logoUrl: z.string().optional(),
});

/** @internal */
export type Provider$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  website?: string | undefined;
  logoUrl?: string | undefined;
};

/** @internal */
export const Provider$outboundSchema: z.ZodType<
  Provider$Outbound,
  z.ZodTypeDef,
  Provider
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  website: z.string().optional(),
  logoUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provider$ {
  /** @deprecated use `Provider$inboundSchema` instead. */
  export const inboundSchema = Provider$inboundSchema;
  /** @deprecated use `Provider$outboundSchema` instead. */
  export const outboundSchema = Provider$outboundSchema;
  /** @deprecated use `Provider$Outbound` instead. */
  export type Outbound = Provider$Outbound;
}

export function providerToJSON(provider: Provider): string {
  return JSON.stringify(Provider$outboundSchema.parse(provider));
}

export function providerFromJSON(
  jsonString: string,
): SafeParseResult<Provider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Provider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Provider' from JSON`,
  );
}

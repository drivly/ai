/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Request = {};

export type GenerationResponse = {};

export type GenerationError = {};

export const GenerationStatus = {
  Success: "success",
  Error: "error",
} as const;
export type GenerationStatus = ClosedEnum<typeof GenerationStatus>;

export const ProcessingMode = {
  Realtime: "realtime",
  Batch: "batch",
} as const;
export type ProcessingMode = ClosedEnum<typeof ProcessingMode>;

export type Generation = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  /**
   * ID of related actions document
   */
  action?: string | undefined;
  /**
   * ID of related resources document
   */
  settings?: string | undefined;
  request?: Request | undefined;
  response?: GenerationResponse | undefined;
  error?: GenerationError | undefined;
  status?: GenerationStatus | undefined;
  duration?: number | undefined;
  processingMode?: ProcessingMode | undefined;
  /**
   * ID of related generation-batches document
   */
  batch?: string | undefined;
};

/** @internal */
export const Request$inboundSchema: z.ZodType<Request, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Request$Outbound = {};

/** @internal */
export const Request$outboundSchema: z.ZodType<
  Request$Outbound,
  z.ZodTypeDef,
  Request
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Request$ {
  /** @deprecated use `Request$inboundSchema` instead. */
  export const inboundSchema = Request$inboundSchema;
  /** @deprecated use `Request$outboundSchema` instead. */
  export const outboundSchema = Request$outboundSchema;
  /** @deprecated use `Request$Outbound` instead. */
  export type Outbound = Request$Outbound;
}

export function requestToJSON(request: Request): string {
  return JSON.stringify(Request$outboundSchema.parse(request));
}

export function requestFromJSON(
  jsonString: string,
): SafeParseResult<Request, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Request$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Request' from JSON`,
  );
}

/** @internal */
export const GenerationResponse$inboundSchema: z.ZodType<
  GenerationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GenerationResponse$Outbound = {};

/** @internal */
export const GenerationResponse$outboundSchema: z.ZodType<
  GenerationResponse$Outbound,
  z.ZodTypeDef,
  GenerationResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerationResponse$ {
  /** @deprecated use `GenerationResponse$inboundSchema` instead. */
  export const inboundSchema = GenerationResponse$inboundSchema;
  /** @deprecated use `GenerationResponse$outboundSchema` instead. */
  export const outboundSchema = GenerationResponse$outboundSchema;
  /** @deprecated use `GenerationResponse$Outbound` instead. */
  export type Outbound = GenerationResponse$Outbound;
}

export function generationResponseToJSON(
  generationResponse: GenerationResponse,
): string {
  return JSON.stringify(
    GenerationResponse$outboundSchema.parse(generationResponse),
  );
}

export function generationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GenerationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerationResponse' from JSON`,
  );
}

/** @internal */
export const GenerationError$inboundSchema: z.ZodType<
  GenerationError,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GenerationError$Outbound = {};

/** @internal */
export const GenerationError$outboundSchema: z.ZodType<
  GenerationError$Outbound,
  z.ZodTypeDef,
  GenerationError
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerationError$ {
  /** @deprecated use `GenerationError$inboundSchema` instead. */
  export const inboundSchema = GenerationError$inboundSchema;
  /** @deprecated use `GenerationError$outboundSchema` instead. */
  export const outboundSchema = GenerationError$outboundSchema;
  /** @deprecated use `GenerationError$Outbound` instead. */
  export type Outbound = GenerationError$Outbound;
}

export function generationErrorToJSON(
  generationError: GenerationError,
): string {
  return JSON.stringify(GenerationError$outboundSchema.parse(generationError));
}

export function generationErrorFromJSON(
  jsonString: string,
): SafeParseResult<GenerationError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerationError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerationError' from JSON`,
  );
}

/** @internal */
export const GenerationStatus$inboundSchema: z.ZodNativeEnum<
  typeof GenerationStatus
> = z.nativeEnum(GenerationStatus);

/** @internal */
export const GenerationStatus$outboundSchema: z.ZodNativeEnum<
  typeof GenerationStatus
> = GenerationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerationStatus$ {
  /** @deprecated use `GenerationStatus$inboundSchema` instead. */
  export const inboundSchema = GenerationStatus$inboundSchema;
  /** @deprecated use `GenerationStatus$outboundSchema` instead. */
  export const outboundSchema = GenerationStatus$outboundSchema;
}

/** @internal */
export const ProcessingMode$inboundSchema: z.ZodNativeEnum<
  typeof ProcessingMode
> = z.nativeEnum(ProcessingMode);

/** @internal */
export const ProcessingMode$outboundSchema: z.ZodNativeEnum<
  typeof ProcessingMode
> = ProcessingMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProcessingMode$ {
  /** @deprecated use `ProcessingMode$inboundSchema` instead. */
  export const inboundSchema = ProcessingMode$inboundSchema;
  /** @deprecated use `ProcessingMode$outboundSchema` instead. */
  export const outboundSchema = ProcessingMode$outboundSchema;
}

/** @internal */
export const Generation$inboundSchema: z.ZodType<
  Generation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  tenant: z.string().optional(),
  action: z.string().optional(),
  settings: z.string().optional(),
  request: z.lazy(() => Request$inboundSchema).optional(),
  response: z.lazy(() => GenerationResponse$inboundSchema).optional(),
  error: z.lazy(() => GenerationError$inboundSchema).optional(),
  status: GenerationStatus$inboundSchema.optional(),
  duration: z.number().optional(),
  processingMode: ProcessingMode$inboundSchema.optional(),
  batch: z.string().optional(),
});

/** @internal */
export type Generation$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  action?: string | undefined;
  settings?: string | undefined;
  request?: Request$Outbound | undefined;
  response?: GenerationResponse$Outbound | undefined;
  error?: GenerationError$Outbound | undefined;
  status?: string | undefined;
  duration?: number | undefined;
  processingMode?: string | undefined;
  batch?: string | undefined;
};

/** @internal */
export const Generation$outboundSchema: z.ZodType<
  Generation$Outbound,
  z.ZodTypeDef,
  Generation
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  action: z.string().optional(),
  settings: z.string().optional(),
  request: z.lazy(() => Request$outboundSchema).optional(),
  response: z.lazy(() => GenerationResponse$outboundSchema).optional(),
  error: z.lazy(() => GenerationError$outboundSchema).optional(),
  status: GenerationStatus$outboundSchema.optional(),
  duration: z.number().optional(),
  processingMode: ProcessingMode$outboundSchema.optional(),
  batch: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Generation$ {
  /** @deprecated use `Generation$inboundSchema` instead. */
  export const inboundSchema = Generation$inboundSchema;
  /** @deprecated use `Generation$outboundSchema` instead. */
  export const outboundSchema = Generation$outboundSchema;
  /** @deprecated use `Generation$Outbound` instead. */
  export type Outbound = Generation$Outbound;
}

export function generationToJSON(generation: Generation): string {
  return JSON.stringify(Generation$outboundSchema.parse(generation));
}

export function generationFromJSON(
  jsonString: string,
): SafeParseResult<Generation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Generation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Generation' from JSON`,
  );
}

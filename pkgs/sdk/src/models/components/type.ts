/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Json = {};

export type Schema = {};

export type Type = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  hash?: string | undefined;
  type?: string | undefined;
  json?: Json | undefined;
  schema?: Schema | undefined;
};

/** @internal */
export const Json$inboundSchema: z.ZodType<Json, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Json$Outbound = {};

/** @internal */
export const Json$outboundSchema: z.ZodType<Json$Outbound, z.ZodTypeDef, Json> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Json$ {
  /** @deprecated use `Json$inboundSchema` instead. */
  export const inboundSchema = Json$inboundSchema;
  /** @deprecated use `Json$outboundSchema` instead. */
  export const outboundSchema = Json$outboundSchema;
  /** @deprecated use `Json$Outbound` instead. */
  export type Outbound = Json$Outbound;
}

export function jsonToJSON(json: Json): string {
  return JSON.stringify(Json$outboundSchema.parse(json));
}

export function jsonFromJSON(
  jsonString: string,
): SafeParseResult<Json, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Json$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Json' from JSON`,
  );
}

/** @internal */
export const Schema$inboundSchema: z.ZodType<Schema, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Schema$Outbound = {};

/** @internal */
export const Schema$outboundSchema: z.ZodType<
  Schema$Outbound,
  z.ZodTypeDef,
  Schema
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Schema$ {
  /** @deprecated use `Schema$inboundSchema` instead. */
  export const inboundSchema = Schema$inboundSchema;
  /** @deprecated use `Schema$outboundSchema` instead. */
  export const outboundSchema = Schema$outboundSchema;
  /** @deprecated use `Schema$Outbound` instead. */
  export type Outbound = Schema$Outbound;
}

export function schemaToJSON(schema: Schema): string {
  return JSON.stringify(Schema$outboundSchema.parse(schema));
}

export function schemaFromJSON(
  jsonString: string,
): SafeParseResult<Schema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Schema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Schema' from JSON`,
  );
}

/** @internal */
export const Type$inboundSchema: z.ZodType<Type, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    hash: z.string().optional(),
    type: z.string().optional(),
    json: z.lazy(() => Json$inboundSchema).optional(),
    schema: z.lazy(() => Schema$inboundSchema).optional(),
  });

/** @internal */
export type Type$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  hash?: string | undefined;
  type?: string | undefined;
  json?: Json$Outbound | undefined;
  schema?: Schema$Outbound | undefined;
};

/** @internal */
export const Type$outboundSchema: z.ZodType<Type$Outbound, z.ZodTypeDef, Type> =
  z.object({
    id: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    hash: z.string().optional(),
    type: z.string().optional(),
    json: z.lazy(() => Json$outboundSchema).optional(),
    schema: z.lazy(() => Schema$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
  /** @deprecated use `Type$Outbound` instead. */
  export type Outbound = Type$Outbound;
}

export function typeToJSON(type: Type): string {
  return JSON.stringify(Type$outboundSchema.parse(type));
}

export function typeFromJSON(
  jsonString: string,
): SafeParseResult<Type, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Type$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Type' from JSON`,
  );
}

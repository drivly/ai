/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Resources = {};

export type Noun = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  singular?: string | undefined;
  plural?: string | undefined;
  possessive?: string | undefined;
  pluralPossessive?: string | undefined;
  verb?: string | undefined;
  act?: string | undefined;
  activity?: string | undefined;
  event?: string | undefined;
  type?: Array<string> | undefined;
  resources?: Resources | undefined;
};

/** @internal */
export const Resources$inboundSchema: z.ZodType<
  Resources,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Resources$Outbound = {};

/** @internal */
export const Resources$outboundSchema: z.ZodType<
  Resources$Outbound,
  z.ZodTypeDef,
  Resources
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Resources$ {
  /** @deprecated use `Resources$inboundSchema` instead. */
  export const inboundSchema = Resources$inboundSchema;
  /** @deprecated use `Resources$outboundSchema` instead. */
  export const outboundSchema = Resources$outboundSchema;
  /** @deprecated use `Resources$Outbound` instead. */
  export type Outbound = Resources$Outbound;
}

export function resourcesToJSON(resources: Resources): string {
  return JSON.stringify(Resources$outboundSchema.parse(resources));
}

export function resourcesFromJSON(
  jsonString: string,
): SafeParseResult<Resources, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Resources$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Resources' from JSON`,
  );
}

/** @internal */
export const Noun$inboundSchema: z.ZodType<Noun, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    singular: z.string().optional(),
    plural: z.string().optional(),
    possessive: z.string().optional(),
    pluralPossessive: z.string().optional(),
    verb: z.string().optional(),
    act: z.string().optional(),
    activity: z.string().optional(),
    event: z.string().optional(),
    type: z.array(z.string()).optional(),
    resources: z.lazy(() => Resources$inboundSchema).optional(),
  });

/** @internal */
export type Noun$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  singular?: string | undefined;
  plural?: string | undefined;
  possessive?: string | undefined;
  pluralPossessive?: string | undefined;
  verb?: string | undefined;
  act?: string | undefined;
  activity?: string | undefined;
  event?: string | undefined;
  type?: Array<string> | undefined;
  resources?: Resources$Outbound | undefined;
};

/** @internal */
export const Noun$outboundSchema: z.ZodType<Noun$Outbound, z.ZodTypeDef, Noun> =
  z.object({
    id: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    singular: z.string().optional(),
    plural: z.string().optional(),
    possessive: z.string().optional(),
    pluralPossessive: z.string().optional(),
    verb: z.string().optional(),
    act: z.string().optional(),
    activity: z.string().optional(),
    event: z.string().optional(),
    type: z.array(z.string()).optional(),
    resources: z.lazy(() => Resources$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Noun$ {
  /** @deprecated use `Noun$inboundSchema` instead. */
  export const inboundSchema = Noun$inboundSchema;
  /** @deprecated use `Noun$outboundSchema` instead. */
  export const outboundSchema = Noun$outboundSchema;
  /** @deprecated use `Noun$Outbound` instead. */
  export type Outbound = Noun$Outbound;
}

export function nounToJSON(noun: Noun): string {
  return JSON.stringify(Noun$outboundSchema.parse(noun));
}

export function nounFromJSON(
  jsonString: string,
): SafeParseResult<Noun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Noun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Noun' from JSON`,
  );
}

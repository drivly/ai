/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Verb = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  action?: string | undefined;
  act?: string | undefined;
  activity?: string | undefined;
  event?: string | undefined;
  subject?: string | undefined;
  object?: string | undefined;
  inverse?: string | undefined;
  inverseAct?: string | undefined;
  inverseActivity?: string | undefined;
  inverseEvent?: string | undefined;
  inverseSubject?: string | undefined;
  inverseObject?: string | undefined;
};

/** @internal */
export const Verb$inboundSchema: z.ZodType<Verb, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    action: z.string().optional(),
    act: z.string().optional(),
    activity: z.string().optional(),
    event: z.string().optional(),
    subject: z.string().optional(),
    object: z.string().optional(),
    inverse: z.string().optional(),
    inverseAct: z.string().optional(),
    inverseActivity: z.string().optional(),
    inverseEvent: z.string().optional(),
    inverseSubject: z.string().optional(),
    inverseObject: z.string().optional(),
  });

/** @internal */
export type Verb$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  action?: string | undefined;
  act?: string | undefined;
  activity?: string | undefined;
  event?: string | undefined;
  subject?: string | undefined;
  object?: string | undefined;
  inverse?: string | undefined;
  inverseAct?: string | undefined;
  inverseActivity?: string | undefined;
  inverseEvent?: string | undefined;
  inverseSubject?: string | undefined;
  inverseObject?: string | undefined;
};

/** @internal */
export const Verb$outboundSchema: z.ZodType<Verb$Outbound, z.ZodTypeDef, Verb> =
  z.object({
    id: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    tenant: z.string().optional(),
    action: z.string().optional(),
    act: z.string().optional(),
    activity: z.string().optional(),
    event: z.string().optional(),
    subject: z.string().optional(),
    object: z.string().optional(),
    inverse: z.string().optional(),
    inverseAct: z.string().optional(),
    inverseActivity: z.string().optional(),
    inverseEvent: z.string().optional(),
    inverseSubject: z.string().optional(),
    inverseObject: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Verb$ {
  /** @deprecated use `Verb$inboundSchema` instead. */
  export const inboundSchema = Verb$inboundSchema;
  /** @deprecated use `Verb$outboundSchema` instead. */
  export const outboundSchema = Verb$outboundSchema;
  /** @deprecated use `Verb$Outbound` instead. */
  export type Outbound = Verb$Outbound;
}

export function verbToJSON(verb: Verb): string {
  return JSON.stringify(Verb$outboundSchema.parse(verb));
}

export function verbFromJSON(
  jsonString: string,
): SafeParseResult<Verb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Verb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Verb' from JSON`,
  );
}

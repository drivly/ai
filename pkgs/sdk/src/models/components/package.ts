/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PackagePackage = {};

export type Collections = {};

export type Package = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  package?: PackagePackage | undefined;
  collections?: Array<Collections> | undefined;
};

/** @internal */
export const PackagePackage$inboundSchema: z.ZodType<
  PackagePackage,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PackagePackage$Outbound = {};

/** @internal */
export const PackagePackage$outboundSchema: z.ZodType<
  PackagePackage$Outbound,
  z.ZodTypeDef,
  PackagePackage
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PackagePackage$ {
  /** @deprecated use `PackagePackage$inboundSchema` instead. */
  export const inboundSchema = PackagePackage$inboundSchema;
  /** @deprecated use `PackagePackage$outboundSchema` instead. */
  export const outboundSchema = PackagePackage$outboundSchema;
  /** @deprecated use `PackagePackage$Outbound` instead. */
  export type Outbound = PackagePackage$Outbound;
}

export function packagePackageToJSON(packagePackage: PackagePackage): string {
  return JSON.stringify(PackagePackage$outboundSchema.parse(packagePackage));
}

export function packagePackageFromJSON(
  jsonString: string,
): SafeParseResult<PackagePackage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PackagePackage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PackagePackage' from JSON`,
  );
}

/** @internal */
export const Collections$inboundSchema: z.ZodType<
  Collections,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Collections$Outbound = {};

/** @internal */
export const Collections$outboundSchema: z.ZodType<
  Collections$Outbound,
  z.ZodTypeDef,
  Collections
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Collections$ {
  /** @deprecated use `Collections$inboundSchema` instead. */
  export const inboundSchema = Collections$inboundSchema;
  /** @deprecated use `Collections$outboundSchema` instead. */
  export const outboundSchema = Collections$outboundSchema;
  /** @deprecated use `Collections$Outbound` instead. */
  export type Outbound = Collections$Outbound;
}

export function collectionsToJSON(collections: Collections): string {
  return JSON.stringify(Collections$outboundSchema.parse(collections));
}

export function collectionsFromJSON(
  jsonString: string,
): SafeParseResult<Collections, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Collections$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Collections' from JSON`,
  );
}

/** @internal */
export const Package$inboundSchema: z.ZodType<Package, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    package: z.lazy(() => PackagePackage$inboundSchema).optional(),
    collections: z.array(z.lazy(() => Collections$inboundSchema)).optional(),
  });

/** @internal */
export type Package$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  package?: PackagePackage$Outbound | undefined;
  collections?: Array<Collections$Outbound> | undefined;
};

/** @internal */
export const Package$outboundSchema: z.ZodType<
  Package$Outbound,
  z.ZodTypeDef,
  Package
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  package: z.lazy(() => PackagePackage$outboundSchema).optional(),
  collections: z.array(z.lazy(() => Collections$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Package$ {
  /** @deprecated use `Package$inboundSchema` instead. */
  export const inboundSchema = Package$inboundSchema;
  /** @deprecated use `Package$outboundSchema` instead. */
  export const outboundSchema = Package$outboundSchema;
  /** @deprecated use `Package$Outbound` instead. */
  export type Outbound = Package$Outbound;
}

export function packageToJSON(value: Package): string {
  return JSON.stringify(Package$outboundSchema.parse(value));
}

export function packageFromJSON(
  jsonString: string,
): SafeParseResult<Package, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Package$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Package' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Settings = {};

export type Setting = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  settings?: Settings | undefined;
};

/** @internal */
export const Settings$inboundSchema: z.ZodType<
  Settings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Settings$Outbound = {};

/** @internal */
export const Settings$outboundSchema: z.ZodType<
  Settings$Outbound,
  z.ZodTypeDef,
  Settings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Settings$ {
  /** @deprecated use `Settings$inboundSchema` instead. */
  export const inboundSchema = Settings$inboundSchema;
  /** @deprecated use `Settings$outboundSchema` instead. */
  export const outboundSchema = Settings$outboundSchema;
  /** @deprecated use `Settings$Outbound` instead. */
  export type Outbound = Settings$Outbound;
}

export function settingsToJSON(settings: Settings): string {
  return JSON.stringify(Settings$outboundSchema.parse(settings));
}

export function settingsFromJSON(
  jsonString: string,
): SafeParseResult<Settings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Settings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Settings' from JSON`,
  );
}

/** @internal */
export const Setting$inboundSchema: z.ZodType<Setting, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    settings: z.lazy(() => Settings$inboundSchema).optional(),
  });

/** @internal */
export type Setting$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  settings?: Settings$Outbound | undefined;
};

/** @internal */
export const Setting$outboundSchema: z.ZodType<
  Setting$Outbound,
  z.ZodTypeDef,
  Setting
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  settings: z.lazy(() => Settings$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Setting$ {
  /** @deprecated use `Setting$inboundSchema` instead. */
  export const inboundSchema = Setting$inboundSchema;
  /** @deprecated use `Setting$outboundSchema` instead. */
  export const outboundSchema = Setting$outboundSchema;
  /** @deprecated use `Setting$Outbound` instead. */
  export type Outbound = Setting$Outbound;
}

export function settingToJSON(setting: Setting): string {
  return JSON.stringify(Setting$outboundSchema.parse(setting));
}

export function settingFromJSON(
  jsonString: string,
): SafeParseResult<Setting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Setting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Setting' from JSON`,
  );
}

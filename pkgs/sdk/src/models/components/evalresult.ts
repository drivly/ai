/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Output = {};

export type EvalResultMetrics = {};

export type EvalResult = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  /**
   * ID of related evals document
   */
  testId?: string | undefined;
  output?: Output | undefined;
  score?: number | undefined;
  metrics?: EvalResultMetrics | undefined;
  duration?: number | undefined;
  error?: string | undefined;
};

/** @internal */
export const Output$inboundSchema: z.ZodType<Output, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Output$Outbound = {};

/** @internal */
export const Output$outboundSchema: z.ZodType<
  Output$Outbound,
  z.ZodTypeDef,
  Output
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Output$ {
  /** @deprecated use `Output$inboundSchema` instead. */
  export const inboundSchema = Output$inboundSchema;
  /** @deprecated use `Output$outboundSchema` instead. */
  export const outboundSchema = Output$outboundSchema;
  /** @deprecated use `Output$Outbound` instead. */
  export type Outbound = Output$Outbound;
}

export function outputToJSON(output: Output): string {
  return JSON.stringify(Output$outboundSchema.parse(output));
}

export function outputFromJSON(
  jsonString: string,
): SafeParseResult<Output, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Output$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Output' from JSON`,
  );
}

/** @internal */
export const EvalResultMetrics$inboundSchema: z.ZodType<
  EvalResultMetrics,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EvalResultMetrics$Outbound = {};

/** @internal */
export const EvalResultMetrics$outboundSchema: z.ZodType<
  EvalResultMetrics$Outbound,
  z.ZodTypeDef,
  EvalResultMetrics
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalResultMetrics$ {
  /** @deprecated use `EvalResultMetrics$inboundSchema` instead. */
  export const inboundSchema = EvalResultMetrics$inboundSchema;
  /** @deprecated use `EvalResultMetrics$outboundSchema` instead. */
  export const outboundSchema = EvalResultMetrics$outboundSchema;
  /** @deprecated use `EvalResultMetrics$Outbound` instead. */
  export type Outbound = EvalResultMetrics$Outbound;
}

export function evalResultMetricsToJSON(
  evalResultMetrics: EvalResultMetrics,
): string {
  return JSON.stringify(
    EvalResultMetrics$outboundSchema.parse(evalResultMetrics),
  );
}

export function evalResultMetricsFromJSON(
  jsonString: string,
): SafeParseResult<EvalResultMetrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalResultMetrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalResultMetrics' from JSON`,
  );
}

/** @internal */
export const EvalResult$inboundSchema: z.ZodType<
  EvalResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  testId: z.string().optional(),
  output: z.lazy(() => Output$inboundSchema).optional(),
  score: z.number().optional(),
  metrics: z.lazy(() => EvalResultMetrics$inboundSchema).optional(),
  duration: z.number().optional(),
  error: z.string().optional(),
});

/** @internal */
export type EvalResult$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  testId?: string | undefined;
  output?: Output$Outbound | undefined;
  score?: number | undefined;
  metrics?: EvalResultMetrics$Outbound | undefined;
  duration?: number | undefined;
  error?: string | undefined;
};

/** @internal */
export const EvalResult$outboundSchema: z.ZodType<
  EvalResult$Outbound,
  z.ZodTypeDef,
  EvalResult
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  testId: z.string().optional(),
  output: z.lazy(() => Output$outboundSchema).optional(),
  score: z.number().optional(),
  metrics: z.lazy(() => EvalResultMetrics$outboundSchema).optional(),
  duration: z.number().optional(),
  error: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalResult$ {
  /** @deprecated use `EvalResult$inboundSchema` instead. */
  export const inboundSchema = EvalResult$inboundSchema;
  /** @deprecated use `EvalResult$outboundSchema` instead. */
  export const outboundSchema = EvalResult$outboundSchema;
  /** @deprecated use `EvalResult$Outbound` instead. */
  export type Outbound = EvalResult$Outbound;
}

export function evalResultToJSON(evalResult: EvalResult): string {
  return JSON.stringify(EvalResult$outboundSchema.parse(evalResult));
}

export function evalResultFromJSON(
  jsonString: string,
): SafeParseResult<EvalResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalResult' from JSON`,
  );
}

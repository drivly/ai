/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Goals = {};

export type Kpi = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  goals?: Goals | undefined;
};

/** @internal */
export const Goals$inboundSchema: z.ZodType<Goals, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Goals$Outbound = {};

/** @internal */
export const Goals$outboundSchema: z.ZodType<
  Goals$Outbound,
  z.ZodTypeDef,
  Goals
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Goals$ {
  /** @deprecated use `Goals$inboundSchema` instead. */
  export const inboundSchema = Goals$inboundSchema;
  /** @deprecated use `Goals$outboundSchema` instead. */
  export const outboundSchema = Goals$outboundSchema;
  /** @deprecated use `Goals$Outbound` instead. */
  export type Outbound = Goals$Outbound;
}

export function goalsToJSON(goals: Goals): string {
  return JSON.stringify(Goals$outboundSchema.parse(goals));
}

export function goalsFromJSON(
  jsonString: string,
): SafeParseResult<Goals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Goals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Goals' from JSON`,
  );
}

/** @internal */
export const Kpi$inboundSchema: z.ZodType<Kpi, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    goals: z.lazy(() => Goals$inboundSchema).optional(),
  });

/** @internal */
export type Kpi$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  goals?: Goals$Outbound | undefined;
};

/** @internal */
export const Kpi$outboundSchema: z.ZodType<Kpi$Outbound, z.ZodTypeDef, Kpi> = z
  .object({
    id: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    goals: z.lazy(() => Goals$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Kpi$ {
  /** @deprecated use `Kpi$inboundSchema` instead. */
  export const inboundSchema = Kpi$inboundSchema;
  /** @deprecated use `Kpi$outboundSchema` instead. */
  export const outboundSchema = Kpi$outboundSchema;
  /** @deprecated use `Kpi$Outbound` instead. */
  export type Outbound = Kpi$Outbound;
}

export function kpiToJSON(kpi: Kpi): string {
  return JSON.stringify(Kpi$outboundSchema.parse(kpi));
}

export function kpiFromJSON(
  jsonString: string,
): SafeParseResult<Kpi, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Kpi$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Kpi' from JSON`,
  );
}

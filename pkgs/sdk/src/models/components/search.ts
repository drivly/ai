/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SearchType = {
  Text: "text",
  Vector: "vector",
  Hybrid: "hybrid",
} as const;
export type SearchType = ClosedEnum<typeof SearchType>;

export type Results = {};

export type SearchEmbedding = {};

export type Search = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  query?: string | undefined;
  searchType?: SearchType | undefined;
  results?: Results | undefined;
  embedding?: SearchEmbedding | undefined;
};

/** @internal */
export const SearchType$inboundSchema: z.ZodNativeEnum<typeof SearchType> = z
  .nativeEnum(SearchType);

/** @internal */
export const SearchType$outboundSchema: z.ZodNativeEnum<typeof SearchType> =
  SearchType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchType$ {
  /** @deprecated use `SearchType$inboundSchema` instead. */
  export const inboundSchema = SearchType$inboundSchema;
  /** @deprecated use `SearchType$outboundSchema` instead. */
  export const outboundSchema = SearchType$outboundSchema;
}

/** @internal */
export const Results$inboundSchema: z.ZodType<Results, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Results$Outbound = {};

/** @internal */
export const Results$outboundSchema: z.ZodType<
  Results$Outbound,
  z.ZodTypeDef,
  Results
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Results$ {
  /** @deprecated use `Results$inboundSchema` instead. */
  export const inboundSchema = Results$inboundSchema;
  /** @deprecated use `Results$outboundSchema` instead. */
  export const outboundSchema = Results$outboundSchema;
  /** @deprecated use `Results$Outbound` instead. */
  export type Outbound = Results$Outbound;
}

export function resultsToJSON(results: Results): string {
  return JSON.stringify(Results$outboundSchema.parse(results));
}

export function resultsFromJSON(
  jsonString: string,
): SafeParseResult<Results, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Results$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Results' from JSON`,
  );
}

/** @internal */
export const SearchEmbedding$inboundSchema: z.ZodType<
  SearchEmbedding,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SearchEmbedding$Outbound = {};

/** @internal */
export const SearchEmbedding$outboundSchema: z.ZodType<
  SearchEmbedding$Outbound,
  z.ZodTypeDef,
  SearchEmbedding
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchEmbedding$ {
  /** @deprecated use `SearchEmbedding$inboundSchema` instead. */
  export const inboundSchema = SearchEmbedding$inboundSchema;
  /** @deprecated use `SearchEmbedding$outboundSchema` instead. */
  export const outboundSchema = SearchEmbedding$outboundSchema;
  /** @deprecated use `SearchEmbedding$Outbound` instead. */
  export type Outbound = SearchEmbedding$Outbound;
}

export function searchEmbeddingToJSON(
  searchEmbedding: SearchEmbedding,
): string {
  return JSON.stringify(SearchEmbedding$outboundSchema.parse(searchEmbedding));
}

export function searchEmbeddingFromJSON(
  jsonString: string,
): SafeParseResult<SearchEmbedding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchEmbedding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchEmbedding' from JSON`,
  );
}

/** @internal */
export const Search$inboundSchema: z.ZodType<Search, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    query: z.string().optional(),
    searchType: SearchType$inboundSchema.optional(),
    results: z.lazy(() => Results$inboundSchema).optional(),
    embedding: z.lazy(() => SearchEmbedding$inboundSchema).optional(),
  });

/** @internal */
export type Search$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  query?: string | undefined;
  searchType?: string | undefined;
  results?: Results$Outbound | undefined;
  embedding?: SearchEmbedding$Outbound | undefined;
};

/** @internal */
export const Search$outboundSchema: z.ZodType<
  Search$Outbound,
  z.ZodTypeDef,
  Search
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  query: z.string().optional(),
  searchType: SearchType$outboundSchema.optional(),
  results: z.lazy(() => Results$outboundSchema).optional(),
  embedding: z.lazy(() => SearchEmbedding$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Search$ {
  /** @deprecated use `Search$inboundSchema` instead. */
  export const inboundSchema = Search$inboundSchema;
  /** @deprecated use `Search$outboundSchema` instead. */
  export const outboundSchema = Search$outboundSchema;
  /** @deprecated use `Search$Outbound` instead. */
  export type Outbound = Search$Outbound;
}

export function searchToJSON(search: Search): string {
  return JSON.stringify(Search$outboundSchema.parse(search));
}

export function searchFromJSON(
  jsonString: string,
): SafeParseResult<Search, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Search$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Search' from JSON`,
  );
}

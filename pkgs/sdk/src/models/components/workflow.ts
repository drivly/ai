/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkflowPricing = {};

export type Workflow = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  type?: string | undefined;
  code?: string | undefined;
  /**
   * ID of related functions document
   */
  functions?: string | undefined;
  /**
   * ID of related modules document
   */
  module?: string | undefined;
  /**
   * ID of related packages document
   */
  package?: string | undefined;
  /**
   * ID of related deployments document
   */
  deployment?: string | undefined;
  public?: boolean | undefined;
  /**
   * ID of related workflows document
   */
  clonedFrom?: string | undefined;
  pricing?: WorkflowPricing | undefined;
};

/** @internal */
export const WorkflowPricing$inboundSchema: z.ZodType<
  WorkflowPricing,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type WorkflowPricing$Outbound = {};

/** @internal */
export const WorkflowPricing$outboundSchema: z.ZodType<
  WorkflowPricing$Outbound,
  z.ZodTypeDef,
  WorkflowPricing
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowPricing$ {
  /** @deprecated use `WorkflowPricing$inboundSchema` instead. */
  export const inboundSchema = WorkflowPricing$inboundSchema;
  /** @deprecated use `WorkflowPricing$outboundSchema` instead. */
  export const outboundSchema = WorkflowPricing$outboundSchema;
  /** @deprecated use `WorkflowPricing$Outbound` instead. */
  export type Outbound = WorkflowPricing$Outbound;
}

export function workflowPricingToJSON(
  workflowPricing: WorkflowPricing,
): string {
  return JSON.stringify(WorkflowPricing$outboundSchema.parse(workflowPricing));
}

export function workflowPricingFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowPricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowPricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowPricing' from JSON`,
  );
}

/** @internal */
export const Workflow$inboundSchema: z.ZodType<
  Workflow,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  type: z.string().optional(),
  code: z.string().optional(),
  functions: z.string().optional(),
  module: z.string().optional(),
  package: z.string().optional(),
  deployment: z.string().optional(),
  public: z.boolean().optional(),
  clonedFrom: z.string().optional(),
  pricing: z.lazy(() => WorkflowPricing$inboundSchema).optional(),
});

/** @internal */
export type Workflow$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  type?: string | undefined;
  code?: string | undefined;
  functions?: string | undefined;
  module?: string | undefined;
  package?: string | undefined;
  deployment?: string | undefined;
  public?: boolean | undefined;
  clonedFrom?: string | undefined;
  pricing?: WorkflowPricing$Outbound | undefined;
};

/** @internal */
export const Workflow$outboundSchema: z.ZodType<
  Workflow$Outbound,
  z.ZodTypeDef,
  Workflow
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  name: z.string().optional(),
  type: z.string().optional(),
  code: z.string().optional(),
  functions: z.string().optional(),
  module: z.string().optional(),
  package: z.string().optional(),
  deployment: z.string().optional(),
  public: z.boolean().optional(),
  clonedFrom: z.string().optional(),
  pricing: z.lazy(() => WorkflowPricing$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Workflow$ {
  /** @deprecated use `Workflow$inboundSchema` instead. */
  export const inboundSchema = Workflow$inboundSchema;
  /** @deprecated use `Workflow$outboundSchema` instead. */
  export const outboundSchema = Workflow$outboundSchema;
  /** @deprecated use `Workflow$Outbound` instead. */
  export type Outbound = Workflow$Outbound;
}

export function workflowToJSON(workflow: Workflow): string {
  return JSON.stringify(Workflow$outboundSchema.parse(workflow));
}

export function workflowFromJSON(
  jsonString: string,
): SafeParseResult<Workflow, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Workflow$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Workflow' from JSON`,
  );
}

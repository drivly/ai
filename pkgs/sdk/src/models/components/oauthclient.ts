/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RedirectURLs = {};

export type OauthClient = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  name?: string | undefined;
  clientId?: string | undefined;
  clientSecret?: string | undefined;
  redirectURLs?: Array<RedirectURLs> | undefined;
  disabled?: boolean | undefined;
  /**
   * ID of related users document
   */
  createdBy?: string | undefined;
};

/** @internal */
export const RedirectURLs$inboundSchema: z.ZodType<
  RedirectURLs,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedirectURLs$Outbound = {};

/** @internal */
export const RedirectURLs$outboundSchema: z.ZodType<
  RedirectURLs$Outbound,
  z.ZodTypeDef,
  RedirectURLs
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectURLs$ {
  /** @deprecated use `RedirectURLs$inboundSchema` instead. */
  export const inboundSchema = RedirectURLs$inboundSchema;
  /** @deprecated use `RedirectURLs$outboundSchema` instead. */
  export const outboundSchema = RedirectURLs$outboundSchema;
  /** @deprecated use `RedirectURLs$Outbound` instead. */
  export type Outbound = RedirectURLs$Outbound;
}

export function redirectURLsToJSON(redirectURLs: RedirectURLs): string {
  return JSON.stringify(RedirectURLs$outboundSchema.parse(redirectURLs));
}

export function redirectURLsFromJSON(
  jsonString: string,
): SafeParseResult<RedirectURLs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectURLs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectURLs' from JSON`,
  );
}

/** @internal */
export const OauthClient$inboundSchema: z.ZodType<
  OauthClient,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  name: z.string().optional(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  redirectURLs: z.array(z.lazy(() => RedirectURLs$inboundSchema)).optional(),
  disabled: z.boolean().optional(),
  createdBy: z.string().optional(),
});

/** @internal */
export type OauthClient$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  name?: string | undefined;
  clientId?: string | undefined;
  clientSecret?: string | undefined;
  redirectURLs?: Array<RedirectURLs$Outbound> | undefined;
  disabled?: boolean | undefined;
  createdBy?: string | undefined;
};

/** @internal */
export const OauthClient$outboundSchema: z.ZodType<
  OauthClient$Outbound,
  z.ZodTypeDef,
  OauthClient
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  name: z.string().optional(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  redirectURLs: z.array(z.lazy(() => RedirectURLs$outboundSchema)).optional(),
  disabled: z.boolean().optional(),
  createdBy: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OauthClient$ {
  /** @deprecated use `OauthClient$inboundSchema` instead. */
  export const inboundSchema = OauthClient$inboundSchema;
  /** @deprecated use `OauthClient$outboundSchema` instead. */
  export const outboundSchema = OauthClient$outboundSchema;
  /** @deprecated use `OauthClient$Outbound` instead. */
  export type Outbound = OauthClient$Outbound;
}

export function oauthClientToJSON(oauthClient: OauthClient): string {
  return JSON.stringify(OauthClient$outboundSchema.parse(oauthClient));
}

export function oauthClientFromJSON(
  jsonString: string,
): SafeParseResult<OauthClient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OauthClient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OauthClient' from JSON`,
  );
}

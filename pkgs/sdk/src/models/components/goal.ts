/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type KeyResults = {};

export type Goal = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  title?: string | undefined;
  object?: string | undefined;
  keyResults?: Array<KeyResults> | undefined;
};

/** @internal */
export const KeyResults$inboundSchema: z.ZodType<
  KeyResults,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type KeyResults$Outbound = {};

/** @internal */
export const KeyResults$outboundSchema: z.ZodType<
  KeyResults$Outbound,
  z.ZodTypeDef,
  KeyResults
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KeyResults$ {
  /** @deprecated use `KeyResults$inboundSchema` instead. */
  export const inboundSchema = KeyResults$inboundSchema;
  /** @deprecated use `KeyResults$outboundSchema` instead. */
  export const outboundSchema = KeyResults$outboundSchema;
  /** @deprecated use `KeyResults$Outbound` instead. */
  export type Outbound = KeyResults$Outbound;
}

export function keyResultsToJSON(keyResults: KeyResults): string {
  return JSON.stringify(KeyResults$outboundSchema.parse(keyResults));
}

export function keyResultsFromJSON(
  jsonString: string,
): SafeParseResult<KeyResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KeyResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KeyResults' from JSON`,
  );
}

/** @internal */
export const Goal$inboundSchema: z.ZodType<Goal, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    title: z.string().optional(),
    object: z.string().optional(),
    keyResults: z.array(z.lazy(() => KeyResults$inboundSchema)).optional(),
  });

/** @internal */
export type Goal$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  title?: string | undefined;
  object?: string | undefined;
  keyResults?: Array<KeyResults$Outbound> | undefined;
};

/** @internal */
export const Goal$outboundSchema: z.ZodType<Goal$Outbound, z.ZodTypeDef, Goal> =
  z.object({
    id: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    tenant: z.string().optional(),
    title: z.string().optional(),
    object: z.string().optional(),
    keyResults: z.array(z.lazy(() => KeyResults$outboundSchema)).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Goal$ {
  /** @deprecated use `Goal$inboundSchema` instead. */
  export const inboundSchema = Goal$inboundSchema;
  /** @deprecated use `Goal$outboundSchema` instead. */
  export const outboundSchema = Goal$outboundSchema;
  /** @deprecated use `Goal$Outbound` instead. */
  export type Outbound = Goal$Outbound;
}

export function goalToJSON(goal: Goal): string {
  return JSON.stringify(Goal$outboundSchema.parse(goal));
}

export function goalFromJSON(
  jsonString: string,
): SafeParseResult<Goal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Goal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Goal' from JSON`,
  );
}

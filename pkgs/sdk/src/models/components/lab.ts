/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Lab = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  name?: string | undefined;
  description?: string | undefined;
  website?: string | undefined;
  logoUrl?: string | undefined;
};

/** @internal */
export const Lab$inboundSchema: z.ZodType<Lab, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    website: z.string().optional(),
    logoUrl: z.string().optional(),
  });

/** @internal */
export type Lab$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  website?: string | undefined;
  logoUrl?: string | undefined;
};

/** @internal */
export const Lab$outboundSchema: z.ZodType<Lab$Outbound, z.ZodTypeDef, Lab> = z
  .object({
    id: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    website: z.string().optional(),
    logoUrl: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Lab$ {
  /** @deprecated use `Lab$inboundSchema` instead. */
  export const inboundSchema = Lab$inboundSchema;
  /** @deprecated use `Lab$outboundSchema` instead. */
  export const outboundSchema = Lab$outboundSchema;
  /** @deprecated use `Lab$Outbound` instead. */
  export type Outbound = Lab$Outbound;
}

export function labToJSON(lab: Lab): string {
  return JSON.stringify(Lab$outboundSchema.parse(lab));
}

export function labFromJSON(
  jsonString: string,
): SafeParseResult<Lab, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Lab$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Lab' from JSON`,
  );
}

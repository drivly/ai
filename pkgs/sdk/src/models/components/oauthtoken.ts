/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OauthToken = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  token?: string | undefined;
  provider?: string | undefined;
  /**
   * ID of related users document
   */
  userId?: string | undefined;
  clientId?: string | undefined;
  expiresAt?: Date | undefined;
  scope?: string | undefined;
};

/** @internal */
export const OauthToken$inboundSchema: z.ZodType<
  OauthToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  token: z.string().optional(),
  provider: z.string().optional(),
  userId: z.string().optional(),
  clientId: z.string().optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  scope: z.string().optional(),
});

/** @internal */
export type OauthToken$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  token?: string | undefined;
  provider?: string | undefined;
  userId?: string | undefined;
  clientId?: string | undefined;
  expiresAt?: string | undefined;
  scope?: string | undefined;
};

/** @internal */
export const OauthToken$outboundSchema: z.ZodType<
  OauthToken$Outbound,
  z.ZodTypeDef,
  OauthToken
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  token: z.string().optional(),
  provider: z.string().optional(),
  userId: z.string().optional(),
  clientId: z.string().optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  scope: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OauthToken$ {
  /** @deprecated use `OauthToken$inboundSchema` instead. */
  export const inboundSchema = OauthToken$inboundSchema;
  /** @deprecated use `OauthToken$outboundSchema` instead. */
  export const outboundSchema = OauthToken$outboundSchema;
  /** @deprecated use `OauthToken$Outbound` instead. */
  export type Outbound = OauthToken$Outbound;
}

export function oauthTokenToJSON(oauthToken: OauthToken): string {
  return JSON.stringify(OauthToken$outboundSchema.parse(oauthToken));
}

export function oauthTokenFromJSON(
  jsonString: string,
): SafeParseResult<OauthToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OauthToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OauthToken' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Status = {
  Backlog: "backlog",
  Todo: "todo",
  InProgress: "in-progress",
  Review: "review",
  Done: "done",
} as const;
export type Status = ClosedEnum<typeof Status>;

export type Subtasks = {};

export type Dependents = {};

export type Task = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  status?: Status | undefined;
  /**
   * ID of related queues document
   */
  queue?: string | undefined;
  assigned?: Array<string> | undefined;
  /**
   * ID of related tasks document
   */
  parent?: string | undefined;
  description?: string | undefined;
  subtasks?: Subtasks | undefined;
  dependentOn?: Array<string> | undefined;
  dependents?: Dependents | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const Subtasks$inboundSchema: z.ZodType<
  Subtasks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Subtasks$Outbound = {};

/** @internal */
export const Subtasks$outboundSchema: z.ZodType<
  Subtasks$Outbound,
  z.ZodTypeDef,
  Subtasks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Subtasks$ {
  /** @deprecated use `Subtasks$inboundSchema` instead. */
  export const inboundSchema = Subtasks$inboundSchema;
  /** @deprecated use `Subtasks$outboundSchema` instead. */
  export const outboundSchema = Subtasks$outboundSchema;
  /** @deprecated use `Subtasks$Outbound` instead. */
  export type Outbound = Subtasks$Outbound;
}

export function subtasksToJSON(subtasks: Subtasks): string {
  return JSON.stringify(Subtasks$outboundSchema.parse(subtasks));
}

export function subtasksFromJSON(
  jsonString: string,
): SafeParseResult<Subtasks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Subtasks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Subtasks' from JSON`,
  );
}

/** @internal */
export const Dependents$inboundSchema: z.ZodType<
  Dependents,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Dependents$Outbound = {};

/** @internal */
export const Dependents$outboundSchema: z.ZodType<
  Dependents$Outbound,
  z.ZodTypeDef,
  Dependents
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Dependents$ {
  /** @deprecated use `Dependents$inboundSchema` instead. */
  export const inboundSchema = Dependents$inboundSchema;
  /** @deprecated use `Dependents$outboundSchema` instead. */
  export const outboundSchema = Dependents$outboundSchema;
  /** @deprecated use `Dependents$Outbound` instead. */
  export type Outbound = Dependents$Outbound;
}

export function dependentsToJSON(dependents: Dependents): string {
  return JSON.stringify(Dependents$outboundSchema.parse(dependents));
}

export function dependentsFromJSON(
  jsonString: string,
): SafeParseResult<Dependents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Dependents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Dependents' from JSON`,
  );
}

/** @internal */
export const Task$inboundSchema: z.ZodType<Task, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    status: Status$inboundSchema.optional(),
    queue: z.string().optional(),
    assigned: z.array(z.string()).optional(),
    parent: z.string().optional(),
    description: z.string().optional(),
    subtasks: z.lazy(() => Subtasks$inboundSchema).optional(),
    dependentOn: z.array(z.string()).optional(),
    dependents: z.lazy(() => Dependents$inboundSchema).optional(),
  });

/** @internal */
export type Task$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  status?: string | undefined;
  queue?: string | undefined;
  assigned?: Array<string> | undefined;
  parent?: string | undefined;
  description?: string | undefined;
  subtasks?: Subtasks$Outbound | undefined;
  dependentOn?: Array<string> | undefined;
  dependents?: Dependents$Outbound | undefined;
};

/** @internal */
export const Task$outboundSchema: z.ZodType<Task$Outbound, z.ZodTypeDef, Task> =
  z.object({
    id: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    tenant: z.string().optional(),
    status: Status$outboundSchema.optional(),
    queue: z.string().optional(),
    assigned: z.array(z.string()).optional(),
    parent: z.string().optional(),
    description: z.string().optional(),
    subtasks: z.lazy(() => Subtasks$outboundSchema).optional(),
    dependentOn: z.array(z.string()).optional(),
    dependents: z.lazy(() => Dependents$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Task$ {
  /** @deprecated use `Task$inboundSchema` instead. */
  export const inboundSchema = Task$inboundSchema;
  /** @deprecated use `Task$outboundSchema` instead. */
  export const outboundSchema = Task$outboundSchema;
  /** @deprecated use `Task$Outbound` instead. */
  export type Outbound = Task$Outbound;
}

export function taskToJSON(task: Task): string {
  return JSON.stringify(Task$outboundSchema.parse(task));
}

export function taskFromJSON(
  jsonString: string,
): SafeParseResult<Task, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Task$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Task' from JSON`,
  );
}

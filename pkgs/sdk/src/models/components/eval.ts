/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Input = {};

export type Expected = {};

export type Tags = {};

export type Eval = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  input?: Input | undefined;
  expected?: Expected | undefined;
  tags?: Array<Tags> | undefined;
};

/** @internal */
export const Input$inboundSchema: z.ZodType<Input, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Input$Outbound = {};

/** @internal */
export const Input$outboundSchema: z.ZodType<
  Input$Outbound,
  z.ZodTypeDef,
  Input
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Input$ {
  /** @deprecated use `Input$inboundSchema` instead. */
  export const inboundSchema = Input$inboundSchema;
  /** @deprecated use `Input$outboundSchema` instead. */
  export const outboundSchema = Input$outboundSchema;
  /** @deprecated use `Input$Outbound` instead. */
  export type Outbound = Input$Outbound;
}

export function inputToJSON(input: Input): string {
  return JSON.stringify(Input$outboundSchema.parse(input));
}

export function inputFromJSON(
  jsonString: string,
): SafeParseResult<Input, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Input$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Input' from JSON`,
  );
}

/** @internal */
export const Expected$inboundSchema: z.ZodType<
  Expected,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Expected$Outbound = {};

/** @internal */
export const Expected$outboundSchema: z.ZodType<
  Expected$Outbound,
  z.ZodTypeDef,
  Expected
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Expected$ {
  /** @deprecated use `Expected$inboundSchema` instead. */
  export const inboundSchema = Expected$inboundSchema;
  /** @deprecated use `Expected$outboundSchema` instead. */
  export const outboundSchema = Expected$outboundSchema;
  /** @deprecated use `Expected$Outbound` instead. */
  export type Outbound = Expected$Outbound;
}

export function expectedToJSON(expected: Expected): string {
  return JSON.stringify(Expected$outboundSchema.parse(expected));
}

export function expectedFromJSON(
  jsonString: string,
): SafeParseResult<Expected, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Expected$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Expected' from JSON`,
  );
}

/** @internal */
export const Tags$inboundSchema: z.ZodType<Tags, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Tags$Outbound = {};

/** @internal */
export const Tags$outboundSchema: z.ZodType<Tags$Outbound, z.ZodTypeDef, Tags> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tags$ {
  /** @deprecated use `Tags$inboundSchema` instead. */
  export const inboundSchema = Tags$inboundSchema;
  /** @deprecated use `Tags$outboundSchema` instead. */
  export const outboundSchema = Tags$outboundSchema;
  /** @deprecated use `Tags$Outbound` instead. */
  export type Outbound = Tags$Outbound;
}

export function tagsToJSON(tags: Tags): string {
  return JSON.stringify(Tags$outboundSchema.parse(tags));
}

export function tagsFromJSON(
  jsonString: string,
): SafeParseResult<Tags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tags' from JSON`,
  );
}

/** @internal */
export const Eval$inboundSchema: z.ZodType<Eval, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    input: z.lazy(() => Input$inboundSchema).optional(),
    expected: z.lazy(() => Expected$inboundSchema).optional(),
    tags: z.array(z.lazy(() => Tags$inboundSchema)).optional(),
  });

/** @internal */
export type Eval$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  input?: Input$Outbound | undefined;
  expected?: Expected$Outbound | undefined;
  tags?: Array<Tags$Outbound> | undefined;
};

/** @internal */
export const Eval$outboundSchema: z.ZodType<Eval$Outbound, z.ZodTypeDef, Eval> =
  z.object({
    id: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    tenant: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    input: z.lazy(() => Input$outboundSchema).optional(),
    expected: z.lazy(() => Expected$outboundSchema).optional(),
    tags: z.array(z.lazy(() => Tags$outboundSchema)).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Eval$ {
  /** @deprecated use `Eval$inboundSchema` instead. */
  export const inboundSchema = Eval$inboundSchema;
  /** @deprecated use `Eval$outboundSchema` instead. */
  export const outboundSchema = Eval$outboundSchema;
  /** @deprecated use `Eval$Outbound` instead. */
  export type Outbound = Eval$Outbound;
}

export function evalToJSON(eval: Eval): string {
  return JSON.stringify(Eval$outboundSchema.parse(eval));
}

export function evalFromJSON(
  jsonString: string,
): SafeParseResult<Eval, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Eval$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Eval' from JSON`,
  );
}

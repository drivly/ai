/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EventData = {};

export type EventMetadata = {};

export type Event = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  /**
   * ID of related projects document
   */
  tenant?: string | undefined;
  type?: string | undefined;
  source?: string | undefined;
  /**
   * ID of related resources document
   */
  subject?: string | undefined;
  data?: EventData | undefined;
  metadata?: EventMetadata | undefined;
  /**
   * ID of related actions document
   */
  action?: string | undefined;
  /**
   * ID of related triggers document
   */
  trigger?: string | undefined;
  /**
   * ID of related searches document
   */
  search?: string | undefined;
  /**
   * ID of related functions document
   */
  function?: string | undefined;
  /**
   * ID of related workflows document
   */
  workflow?: string | undefined;
  /**
   * ID of related agents document
   */
  agent?: string | undefined;
  generations?: Array<string> | undefined;
};

/** @internal */
export const EventData$inboundSchema: z.ZodType<
  EventData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EventData$Outbound = {};

/** @internal */
export const EventData$outboundSchema: z.ZodType<
  EventData$Outbound,
  z.ZodTypeDef,
  EventData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventData$ {
  /** @deprecated use `EventData$inboundSchema` instead. */
  export const inboundSchema = EventData$inboundSchema;
  /** @deprecated use `EventData$outboundSchema` instead. */
  export const outboundSchema = EventData$outboundSchema;
  /** @deprecated use `EventData$Outbound` instead. */
  export type Outbound = EventData$Outbound;
}

export function eventDataToJSON(eventData: EventData): string {
  return JSON.stringify(EventData$outboundSchema.parse(eventData));
}

export function eventDataFromJSON(
  jsonString: string,
): SafeParseResult<EventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventData' from JSON`,
  );
}

/** @internal */
export const EventMetadata$inboundSchema: z.ZodType<
  EventMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EventMetadata$Outbound = {};

/** @internal */
export const EventMetadata$outboundSchema: z.ZodType<
  EventMetadata$Outbound,
  z.ZodTypeDef,
  EventMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventMetadata$ {
  /** @deprecated use `EventMetadata$inboundSchema` instead. */
  export const inboundSchema = EventMetadata$inboundSchema;
  /** @deprecated use `EventMetadata$outboundSchema` instead. */
  export const outboundSchema = EventMetadata$outboundSchema;
  /** @deprecated use `EventMetadata$Outbound` instead. */
  export type Outbound = EventMetadata$Outbound;
}

export function eventMetadataToJSON(eventMetadata: EventMetadata): string {
  return JSON.stringify(EventMetadata$outboundSchema.parse(eventMetadata));
}

export function eventMetadataFromJSON(
  jsonString: string,
): SafeParseResult<EventMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventMetadata' from JSON`,
  );
}

/** @internal */
export const Event$inboundSchema: z.ZodType<Event, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    tenant: z.string().optional(),
    type: z.string().optional(),
    source: z.string().optional(),
    subject: z.string().optional(),
    data: z.lazy(() => EventData$inboundSchema).optional(),
    metadata: z.lazy(() => EventMetadata$inboundSchema).optional(),
    action: z.string().optional(),
    trigger: z.string().optional(),
    search: z.string().optional(),
    function: z.string().optional(),
    workflow: z.string().optional(),
    agent: z.string().optional(),
    generations: z.array(z.string()).optional(),
  });

/** @internal */
export type Event$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  tenant?: string | undefined;
  type?: string | undefined;
  source?: string | undefined;
  subject?: string | undefined;
  data?: EventData$Outbound | undefined;
  metadata?: EventMetadata$Outbound | undefined;
  action?: string | undefined;
  trigger?: string | undefined;
  search?: string | undefined;
  function?: string | undefined;
  workflow?: string | undefined;
  agent?: string | undefined;
  generations?: Array<string> | undefined;
};

/** @internal */
export const Event$outboundSchema: z.ZodType<
  Event$Outbound,
  z.ZodTypeDef,
  Event
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  tenant: z.string().optional(),
  type: z.string().optional(),
  source: z.string().optional(),
  subject: z.string().optional(),
  data: z.lazy(() => EventData$outboundSchema).optional(),
  metadata: z.lazy(() => EventMetadata$outboundSchema).optional(),
  action: z.string().optional(),
  trigger: z.string().optional(),
  search: z.string().optional(),
  function: z.string().optional(),
  workflow: z.string().optional(),
  agent: z.string().optional(),
  generations: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
  /** @deprecated use `Event$inboundSchema` instead. */
  export const inboundSchema = Event$inboundSchema;
  /** @deprecated use `Event$outboundSchema` instead. */
  export const outboundSchema = Event$outboundSchema;
  /** @deprecated use `Event$Outbound` instead. */
  export type Outbound = Event$Outbound;
}

export function eventToJSON(event: Event): string {
  return JSON.stringify(Event$outboundSchema.parse(event));
}

export function eventFromJSON(
  jsonString: string,
): SafeParseResult<Event, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Event$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Event' from JSON`,
  );
}

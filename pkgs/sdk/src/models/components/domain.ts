/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DomainStatus = {
  Pending: "pending",
  Active: "active",
  Error: "error",
} as const;
export type DomainStatus = ClosedEnum<typeof DomainStatus>;

export type Hostnames = {};

export type Domain = {
  id?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  name?: string | undefined;
  domain?: string | undefined;
  /**
   * ID of related projects document
   */
  project?: string | undefined;
  status?: DomainStatus | undefined;
  hostnames?: Array<Hostnames> | undefined;
  vercelId?: string | undefined;
  cloudflareId?: string | undefined;
  errorMessage?: string | undefined;
};

/** @internal */
export const DomainStatus$inboundSchema: z.ZodNativeEnum<typeof DomainStatus> =
  z.nativeEnum(DomainStatus);

/** @internal */
export const DomainStatus$outboundSchema: z.ZodNativeEnum<typeof DomainStatus> =
  DomainStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainStatus$ {
  /** @deprecated use `DomainStatus$inboundSchema` instead. */
  export const inboundSchema = DomainStatus$inboundSchema;
  /** @deprecated use `DomainStatus$outboundSchema` instead. */
  export const outboundSchema = DomainStatus$outboundSchema;
}

/** @internal */
export const Hostnames$inboundSchema: z.ZodType<
  Hostnames,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Hostnames$Outbound = {};

/** @internal */
export const Hostnames$outboundSchema: z.ZodType<
  Hostnames$Outbound,
  z.ZodTypeDef,
  Hostnames
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Hostnames$ {
  /** @deprecated use `Hostnames$inboundSchema` instead. */
  export const inboundSchema = Hostnames$inboundSchema;
  /** @deprecated use `Hostnames$outboundSchema` instead. */
  export const outboundSchema = Hostnames$outboundSchema;
  /** @deprecated use `Hostnames$Outbound` instead. */
  export type Outbound = Hostnames$Outbound;
}

export function hostnamesToJSON(hostnames: Hostnames): string {
  return JSON.stringify(Hostnames$outboundSchema.parse(hostnames));
}

export function hostnamesFromJSON(
  jsonString: string,
): SafeParseResult<Hostnames, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Hostnames$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Hostnames' from JSON`,
  );
}

/** @internal */
export const Domain$inboundSchema: z.ZodType<Domain, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    name: z.string().optional(),
    domain: z.string().optional(),
    project: z.string().optional(),
    status: DomainStatus$inboundSchema.optional(),
    hostnames: z.array(z.lazy(() => Hostnames$inboundSchema)).optional(),
    vercelId: z.string().optional(),
    cloudflareId: z.string().optional(),
    errorMessage: z.string().optional(),
  });

/** @internal */
export type Domain$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  name?: string | undefined;
  domain?: string | undefined;
  project?: string | undefined;
  status?: string | undefined;
  hostnames?: Array<Hostnames$Outbound> | undefined;
  vercelId?: string | undefined;
  cloudflareId?: string | undefined;
  errorMessage?: string | undefined;
};

/** @internal */
export const Domain$outboundSchema: z.ZodType<
  Domain$Outbound,
  z.ZodTypeDef,
  Domain
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  name: z.string().optional(),
  domain: z.string().optional(),
  project: z.string().optional(),
  status: DomainStatus$outboundSchema.optional(),
  hostnames: z.array(z.lazy(() => Hostnames$outboundSchema)).optional(),
  vercelId: z.string().optional(),
  cloudflareId: z.string().optional(),
  errorMessage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Domain$ {
  /** @deprecated use `Domain$inboundSchema` instead. */
  export const inboundSchema = Domain$inboundSchema;
  /** @deprecated use `Domain$outboundSchema` instead. */
  export const outboundSchema = Domain$outboundSchema;
  /** @deprecated use `Domain$Outbound` instead. */
  export type Outbound = Domain$Outbound;
}

export function domainToJSON(domain: Domain): string {
  return JSON.stringify(Domain$outboundSchema.parse(domain));
}

export function domainFromJSON(
  jsonString: string,
): SafeParseResult<Domain, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Domain$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Domain' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tracesDeleteApiTracesId } from "../funcs/tracesDeleteApiTracesId.js";
import { tracesGetApiTraces } from "../funcs/tracesGetApiTraces.js";
import { tracesGetApiTracesId } from "../funcs/tracesGetApiTracesId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Traces extends ClientSDK {
  /**
   * List all Traces
   *
   * @remarks
   * Returns a list of all Traces
   */
  async getApiTraces(
    options?: RequestOptions,
  ): Promise<operations.GetApiTracesResponseBody> {
    return unwrapAsync(tracesGetApiTraces(
      this,
      options,
    ));
  }

  /**
   * Get a specific Trace
   *
   * @remarks
   * Returns a specific Trace by ID
   */
  async getApiTracesId(
    request: operations.GetApiTracesIdRequest,
    options?: RequestOptions,
  ): Promise<components.Trace> {
    return unwrapAsync(tracesGetApiTracesId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Trace
   *
   * @remarks
   * Deletes a specific Trace by ID
   */
  async deleteApiTracesId(
    request: operations.DeleteApiTracesIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiTracesIdResponseBody> {
    return unwrapAsync(tracesDeleteApiTracesId(
      this,
      request,
      options,
    ));
  }
}

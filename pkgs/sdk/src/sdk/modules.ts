/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { modulesDeleteApiModulesId } from "../funcs/modulesDeleteApiModulesId.js";
import { modulesGetApiModules } from "../funcs/modulesGetApiModules.js";
import { modulesGetApiModulesId } from "../funcs/modulesGetApiModulesId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Modules extends ClientSDK {
  /**
   * List all Modules
   *
   * @remarks
   * Returns a list of all Modules
   */
  async getApiModules(
    options?: RequestOptions,
  ): Promise<operations.GetApiModulesResponseBody> {
    return unwrapAsync(modulesGetApiModules(
      this,
      options,
    ));
  }

  /**
   * Get a specific Module
   *
   * @remarks
   * Returns a specific Module by ID
   */
  async getApiModulesId(
    request: operations.GetApiModulesIdRequest,
    options?: RequestOptions,
  ): Promise<components.Module> {
    return unwrapAsync(modulesGetApiModulesId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Module
   *
   * @remarks
   * Deletes a specific Module by ID
   */
  async deleteApiModulesId(
    request: operations.DeleteApiModulesIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiModulesIdResponseBody> {
    return unwrapAsync(modulesDeleteApiModulesId(
      this,
      request,
      options,
    ));
  }
}

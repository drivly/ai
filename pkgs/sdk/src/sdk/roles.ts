/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { rolesDeleteApiRolesId } from "../funcs/rolesDeleteApiRolesId.js";
import { rolesGetApiRoles } from "../funcs/rolesGetApiRoles.js";
import { rolesGetApiRolesId } from "../funcs/rolesGetApiRolesId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Roles extends ClientSDK {
  /**
   * List all Roles
   *
   * @remarks
   * Returns a list of all Roles
   */
  async getApiRoles(
    options?: RequestOptions,
  ): Promise<operations.GetApiRolesResponseBody> {
    return unwrapAsync(rolesGetApiRoles(
      this,
      options,
    ));
  }

  /**
   * Get a specific Role
   *
   * @remarks
   * Returns a specific Role by ID
   */
  async getApiRolesId(
    request: operations.GetApiRolesIdRequest,
    options?: RequestOptions,
  ): Promise<components.Role> {
    return unwrapAsync(rolesGetApiRolesId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Role
   *
   * @remarks
   * Deletes a specific Role by ID
   */
  async deleteApiRolesId(
    request: operations.DeleteApiRolesIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiRolesIdResponseBody> {
    return unwrapAsync(rolesDeleteApiRolesId(
      this,
      request,
      options,
    ));
  }
}

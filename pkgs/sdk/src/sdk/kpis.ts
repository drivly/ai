/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { kpIsDeleteApiKpisId } from "../funcs/kpIsDeleteApiKpisId.js";
import { kpIsGetApiKpis } from "../funcs/kpIsGetApiKpis.js";
import { kpIsGetApiKpisId } from "../funcs/kpIsGetApiKpisId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class KPIs extends ClientSDK {
  /**
   * List all KPIs
   *
   * @remarks
   * Returns a list of all KPIs
   */
  async getApiKpis(
    options?: RequestOptions,
  ): Promise<operations.GetApiKpisResponseBody> {
    return unwrapAsync(kpIsGetApiKpis(
      this,
      options,
    ));
  }

  /**
   * Get a specific KPI
   *
   * @remarks
   * Returns a specific KPI by ID
   */
  async getApiKpisId(
    request: operations.GetApiKpisIdRequest,
    options?: RequestOptions,
  ): Promise<components.Kpi> {
    return unwrapAsync(kpIsGetApiKpisId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a KPI
   *
   * @remarks
   * Deletes a specific KPI by ID
   */
  async deleteApiKpisId(
    request: operations.DeleteApiKpisIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiKpisIdResponseBody> {
    return unwrapAsync(kpIsDeleteApiKpisId(
      this,
      request,
      options,
    ));
  }
}

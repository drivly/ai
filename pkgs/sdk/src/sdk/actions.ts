/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { actionsDeleteApiActionsId } from "../funcs/actionsDeleteApiActionsId.js";
import { actionsDeleteApiIntegrationActionsId } from "../funcs/actionsDeleteApiIntegrationActionsId.js";
import { actionsGetApiActions } from "../funcs/actionsGetApiActions.js";
import { actionsGetApiActionsId } from "../funcs/actionsGetApiActionsId.js";
import { actionsGetApiIntegrationActions } from "../funcs/actionsGetApiIntegrationActions.js";
import { actionsGetApiIntegrationActionsId } from "../funcs/actionsGetApiIntegrationActionsId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Actions extends ClientSDK {
  /**
   * List all Actions
   *
   * @remarks
   * Returns a list of all Actions
   */
  async getApiActions(
    options?: RequestOptions,
  ): Promise<operations.GetApiActionsResponseBody> {
    return unwrapAsync(actionsGetApiActions(
      this,
      options,
    ));
  }

  /**
   * Get a specific Action
   *
   * @remarks
   * Returns a specific Action by ID
   */
  async getApiActionsId(
    request: operations.GetApiActionsIdRequest,
    options?: RequestOptions,
  ): Promise<components.Action> {
    return unwrapAsync(actionsGetApiActionsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Action
   *
   * @remarks
   * Deletes a specific Action by ID
   */
  async deleteApiActionsId(
    request: operations.DeleteApiActionsIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiActionsIdResponseBody> {
    return unwrapAsync(actionsDeleteApiActionsId(
      this,
      request,
      options,
    ));
  }

  /**
   * List all Actions
   *
   * @remarks
   * Returns a list of all Actions
   */
  async getApiIntegrationActions(
    options?: RequestOptions,
  ): Promise<operations.GetApiIntegrationActionsResponseBody> {
    return unwrapAsync(actionsGetApiIntegrationActions(
      this,
      options,
    ));
  }

  /**
   * Get a specific Action
   *
   * @remarks
   * Returns a specific Action by ID
   */
  async getApiIntegrationActionsId(
    request: operations.GetApiIntegrationActionsIdRequest,
    options?: RequestOptions,
  ): Promise<components.Action> {
    return unwrapAsync(actionsGetApiIntegrationActionsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Action
   *
   * @remarks
   * Deletes a specific Action by ID
   */
  async deleteApiIntegrationActionsId(
    request: operations.DeleteApiIntegrationActionsIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiIntegrationActionsIdResponseBody> {
    return unwrapAsync(actionsDeleteApiIntegrationActionsId(
      this,
      request,
      options,
    ));
  }
}

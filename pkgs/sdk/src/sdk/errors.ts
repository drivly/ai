/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { errorsDeleteApiErrorsId } from "../funcs/errorsDeleteApiErrorsId.js";
import { errorsGetApiErrors } from "../funcs/errorsGetApiErrors.js";
import { errorsGetApiErrorsId } from "../funcs/errorsGetApiErrorsId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Errors extends ClientSDK {
  /**
   * List all Errors
   *
   * @remarks
   * Returns a list of all Errors
   */
  async getApiErrors(
    options?: RequestOptions,
  ): Promise<operations.GetApiErrorsResponseBody> {
    return unwrapAsync(errorsGetApiErrors(
      this,
      options,
    ));
  }

  /**
   * Get a specific Error
   *
   * @remarks
   * Returns a specific Error by ID
   */
  async getApiErrorsId(
    request: operations.GetApiErrorsIdRequest,
    options?: RequestOptions,
  ): Promise<components.ErrorT> {
    return unwrapAsync(errorsGetApiErrorsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Error
   *
   * @remarks
   * Deletes a specific Error by ID
   */
  async deleteApiErrorsId(
    request: operations.DeleteApiErrorsIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiErrorsIdResponseBody> {
    return unwrapAsync(errorsDeleteApiErrorsId(
      this,
      request,
      options,
    ));
  }
}

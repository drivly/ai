/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { connectionsDeleteApiConnectionsId } from "../funcs/connectionsDeleteApiConnectionsId.js";
import { connectionsGetApiConnections } from "../funcs/connectionsGetApiConnections.js";
import { connectionsGetApiConnectionsId } from "../funcs/connectionsGetApiConnectionsId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Connections extends ClientSDK {
  /**
   * List all Connections
   *
   * @remarks
   * Returns a list of all Connections
   */
  async getApiConnections(
    options?: RequestOptions,
  ): Promise<operations.GetApiConnectionsResponseBody> {
    return unwrapAsync(connectionsGetApiConnections(
      this,
      options,
    ));
  }

  /**
   * Get a specific Connection
   *
   * @remarks
   * Returns a specific Connection by ID
   */
  async getApiConnectionsId(
    request: operations.GetApiConnectionsIdRequest,
    options?: RequestOptions,
  ): Promise<components.Connection> {
    return unwrapAsync(connectionsGetApiConnectionsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Connection
   *
   * @remarks
   * Deletes a specific Connection by ID
   */
  async deleteApiConnectionsId(
    request: operations.DeleteApiConnectionsIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiConnectionsIdResponseBody> {
    return unwrapAsync(connectionsDeleteApiConnectionsId(
      this,
      request,
      options,
    ));
  }
}

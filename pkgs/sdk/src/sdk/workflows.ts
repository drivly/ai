/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workflowsDeleteApiWorkflowsId } from "../funcs/workflowsDeleteApiWorkflowsId.js";
import { workflowsGetApiWorkflows } from "../funcs/workflowsGetApiWorkflows.js";
import { workflowsGetApiWorkflowsId } from "../funcs/workflowsGetApiWorkflowsId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Workflows extends ClientSDK {
  /**
   * List all Workflows
   *
   * @remarks
   * Returns a list of all Workflows
   */
  async getApiWorkflows(
    options?: RequestOptions,
  ): Promise<operations.GetApiWorkflowsResponseBody> {
    return unwrapAsync(workflowsGetApiWorkflows(
      this,
      options,
    ));
  }

  /**
   * Get a specific Workflow
   *
   * @remarks
   * Returns a specific Workflow by ID
   */
  async getApiWorkflowsId(
    request: operations.GetApiWorkflowsIdRequest,
    options?: RequestOptions,
  ): Promise<components.Workflow> {
    return unwrapAsync(workflowsGetApiWorkflowsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Workflow
   *
   * @remarks
   * Deletes a specific Workflow by ID
   */
  async deleteApiWorkflowsId(
    request: operations.DeleteApiWorkflowsIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiWorkflowsIdResponseBody> {
    return unwrapAsync(workflowsDeleteApiWorkflowsId(
      this,
      request,
      options,
    ));
  }
}

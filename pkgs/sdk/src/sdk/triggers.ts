/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { triggersDeleteApiIntegrationTriggersId } from "../funcs/triggersDeleteApiIntegrationTriggersId.js";
import { triggersDeleteApiTriggersId } from "../funcs/triggersDeleteApiTriggersId.js";
import { triggersGetApiIntegrationTriggers } from "../funcs/triggersGetApiIntegrationTriggers.js";
import { triggersGetApiIntegrationTriggersId } from "../funcs/triggersGetApiIntegrationTriggersId.js";
import { triggersGetApiTriggers } from "../funcs/triggersGetApiTriggers.js";
import { triggersGetApiTriggersId } from "../funcs/triggersGetApiTriggersId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Triggers extends ClientSDK {
  /**
   * List all Triggers
   *
   * @remarks
   * Returns a list of all Triggers
   */
  async getApiIntegrationTriggers(
    options?: RequestOptions,
  ): Promise<operations.GetApiIntegrationTriggersResponseBody> {
    return unwrapAsync(triggersGetApiIntegrationTriggers(
      this,
      options,
    ));
  }

  /**
   * Get a specific Trigger
   *
   * @remarks
   * Returns a specific Trigger by ID
   */
  async getApiIntegrationTriggersId(
    request: operations.GetApiIntegrationTriggersIdRequest,
    options?: RequestOptions,
  ): Promise<components.Trigger> {
    return unwrapAsync(triggersGetApiIntegrationTriggersId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Trigger
   *
   * @remarks
   * Deletes a specific Trigger by ID
   */
  async deleteApiIntegrationTriggersId(
    request: operations.DeleteApiIntegrationTriggersIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiIntegrationTriggersIdResponseBody> {
    return unwrapAsync(triggersDeleteApiIntegrationTriggersId(
      this,
      request,
      options,
    ));
  }

  /**
   * List all Triggers
   *
   * @remarks
   * Returns a list of all Triggers
   */
  async getApiTriggers(
    options?: RequestOptions,
  ): Promise<operations.GetApiTriggersResponseBody> {
    return unwrapAsync(triggersGetApiTriggers(
      this,
      options,
    ));
  }

  /**
   * Get a specific Trigger
   *
   * @remarks
   * Returns a specific Trigger by ID
   */
  async getApiTriggersId(
    request: operations.GetApiTriggersIdRequest,
    options?: RequestOptions,
  ): Promise<components.Trigger> {
    return unwrapAsync(triggersGetApiTriggersId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Trigger
   *
   * @remarks
   * Deletes a specific Trigger by ID
   */
  async deleteApiTriggersId(
    request: operations.DeleteApiTriggersIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiTriggersIdResponseBody> {
    return unwrapAsync(triggersDeleteApiTriggersId(
      this,
      request,
      options,
    ));
  }
}

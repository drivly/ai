/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { eventsDeleteApiEventsId } from "../funcs/eventsDeleteApiEventsId.js";
import { eventsGetApiEvents } from "../funcs/eventsGetApiEvents.js";
import { eventsGetApiEventsId } from "../funcs/eventsGetApiEventsId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Events extends ClientSDK {
  /**
   * List all Events
   *
   * @remarks
   * Returns a list of all Events
   */
  async getApiEvents(
    options?: RequestOptions,
  ): Promise<operations.GetApiEventsResponseBody> {
    return unwrapAsync(eventsGetApiEvents(
      this,
      options,
    ));
  }

  /**
   * Get a specific Event
   *
   * @remarks
   * Returns a specific Event by ID
   */
  async getApiEventsId(
    request: operations.GetApiEventsIdRequest,
    options?: RequestOptions,
  ): Promise<components.Event> {
    return unwrapAsync(eventsGetApiEventsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Event
   *
   * @remarks
   * Deletes a specific Event by ID
   */
  async deleteApiEventsId(
    request: operations.DeleteApiEventsIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiEventsIdResponseBody> {
    return unwrapAsync(eventsDeleteApiEventsId(
      this,
      request,
      options,
    ));
  }
}

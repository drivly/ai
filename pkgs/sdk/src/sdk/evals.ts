/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { evalsDeleteApiEvalsId } from "../funcs/evalsDeleteApiEvalsId.js";
import { evalsGetApiEvals } from "../funcs/evalsGetApiEvals.js";
import { evalsGetApiEvalsId } from "../funcs/evalsGetApiEvalsId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Evals extends ClientSDK {
  /**
   * List all Evals
   *
   * @remarks
   * Returns a list of all Evals
   */
  async getApiEvals(
    options?: RequestOptions,
  ): Promise<operations.GetApiEvalsResponseBody> {
    return unwrapAsync(evalsGetApiEvals(
      this,
      options,
    ));
  }

  /**
   * Get a specific Eval
   *
   * @remarks
   * Returns a specific Eval by ID
   */
  async getApiEvalsId(
    request: operations.GetApiEvalsIdRequest,
    options?: RequestOptions,
  ): Promise<components.Eval> {
    return unwrapAsync(evalsGetApiEvalsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Eval
   *
   * @remarks
   * Deletes a specific Eval by ID
   */
  async deleteApiEvalsId(
    request: operations.DeleteApiEvalsIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiEvalsIdResponseBody> {
    return unwrapAsync(evalsDeleteApiEvalsId(
      this,
      request,
      options,
    ));
  }
}

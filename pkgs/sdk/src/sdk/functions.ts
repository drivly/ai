/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { functionsDeleteApiFunctionsId } from "../funcs/functionsDeleteApiFunctionsId.js";
import { functionsGetApiFunctions } from "../funcs/functionsGetApiFunctions.js";
import { functionsGetApiFunctionsId } from "../funcs/functionsGetApiFunctionsId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Functions extends ClientSDK {
  /**
   * List all Functions
   *
   * @remarks
   * Returns a list of all Functions
   */
  async getApiFunctions(
    options?: RequestOptions,
  ): Promise<operations.GetApiFunctionsResponseBody> {
    return unwrapAsync(functionsGetApiFunctions(
      this,
      options,
    ));
  }

  /**
   * Get a specific Function
   *
   * @remarks
   * Returns a specific Function by ID
   */
  async getApiFunctionsId(
    request: operations.GetApiFunctionsIdRequest,
    options?: RequestOptions,
  ): Promise<components.FunctionT> {
    return unwrapAsync(functionsGetApiFunctionsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Function
   *
   * @remarks
   * Deletes a specific Function by ID
   */
  async deleteApiFunctionsId(
    request: operations.DeleteApiFunctionsIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiFunctionsIdResponseBody> {
    return unwrapAsync(functionsDeleteApiFunctionsId(
      this,
      request,
      options,
    ));
  }
}

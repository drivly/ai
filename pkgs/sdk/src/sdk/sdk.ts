/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClientSDK } from "../lib/sdks.js";
import { Actions } from "./actions.js";
import { Agents } from "./agents.js";
import { APIKeys } from "./apikeys.js";
import { Benchmarks } from "./benchmarks.js";
import { Categories } from "./categories.js";
import { Connections } from "./connections.js";
import { Databases } from "./databases.js";
import { Datasets } from "./datasets.js";
import { Deployments } from "./deployments.js";
import { Domains } from "./domains.js";
import { Errors } from "./errors.js";
import { EvalResults } from "./evalresults.js";
import { EvalRuns } from "./evalruns.js";
import { Evals } from "./evals.js";
import { Events } from "./events.js";
import { ExperimentMetrics } from "./experimentmetrics.js";
import { Experiments } from "./experiments.js";
import { Functions } from "./functions.js";
import { GenerationBatches } from "./generationbatches.js";
import { Generations } from "./generations.js";
import { Goals } from "./goals.js";
import { Integrations } from "./integrations.js";
import { KPIs } from "./kpis.js";
import { Labs } from "./labs.js";
import { Models } from "./models.js";
import { Modules } from "./modules.js";
import { Nouns } from "./nouns.js";
import { OauthClients } from "./oauthclients.js";
import { OauthCodes } from "./oauthcodes.js";
import { OauthTokens } from "./oauthtokens.js";
import { Packages } from "./packages.js";
import { Projects } from "./projects.js";
import { Prompts } from "./prompts.js";
import { Providers } from "./providers.js";
import { Queues } from "./queues.js";
import { Resources } from "./resources.js";
import { Roles } from "./roles.js";
import { Searches } from "./searches.js";
import { Settings } from "./settings.js";
import { Tags } from "./tags.js";
import { Tasks } from "./tasks.js";
import { Things } from "./things.js";
import { Traces } from "./traces.js";
import { Triggers } from "./triggers.js";
import { Types } from "./types.js";
import { Users } from "./users.js";
import { Verbs } from "./verbs.js";
import { Webhooks } from "./webhooks.js";
import { Workflows } from "./workflows.js";

export class Api extends ClientSDK {
  private _functions?: Functions;
  get functions(): Functions {
    return (this._functions ??= new Functions(this._options));
  }

  private _workflows?: Workflows;
  get workflows(): Workflows {
    return (this._workflows ??= new Workflows(this._options));
  }

  private _agents?: Agents;
  get agents(): Agents {
    return (this._agents ??= new Agents(this._options));
  }

  private _queues?: Queues;
  get queues(): Queues {
    return (this._queues ??= new Queues(this._options));
  }

  private _tasks?: Tasks;
  get tasks(): Tasks {
    return (this._tasks ??= new Tasks(this._options));
  }

  private _goals?: Goals;
  get goals(): Goals {
    return (this._goals ??= new Goals(this._options));
  }

  private _nouns?: Nouns;
  get nouns(): Nouns {
    return (this._nouns ??= new Nouns(this._options));
  }

  private _things?: Things;
  get things(): Things {
    return (this._things ??= new Things(this._options));
  }

  private _verbs?: Verbs;
  get verbs(): Verbs {
    return (this._verbs ??= new Verbs(this._options));
  }

  private _databases?: Databases;
  get databases(): Databases {
    return (this._databases ??= new Databases(this._options));
  }

  private _resources?: Resources;
  get resources(): Resources {
    return (this._resources ??= new Resources(this._options));
  }

  private _actions?: Actions;
  get actions(): Actions {
    return (this._actions ??= new Actions(this._options));
  }

  private _categories?: Categories;
  get categories(): Categories {
    return (this._categories ??= new Categories(this._options));
  }

  private _integrations?: Integrations;
  get integrations(): Integrations {
    return (this._integrations ??= new Integrations(this._options));
  }

  private _connections?: Connections;
  get connections(): Connections {
    return (this._connections ??= new Connections(this._options));
  }

  private _triggers?: Triggers;
  get triggers(): Triggers {
    return (this._triggers ??= new Triggers(this._options));
  }

  private _searches?: Searches;
  get searches(): Searches {
    return (this._searches ??= new Searches(this._options));
  }

  private _experiments?: Experiments;
  get experiments(): Experiments {
    return (this._experiments ??= new Experiments(this._options));
  }

  private _experimentMetrics?: ExperimentMetrics;
  get experimentMetrics(): ExperimentMetrics {
    return (this._experimentMetrics ??= new ExperimentMetrics(this._options));
  }

  private _models?: Models;
  get models(): Models {
    return (this._models ??= new Models(this._options));
  }

  private _providers?: Providers;
  get providers(): Providers {
    return (this._providers ??= new Providers(this._options));
  }

  private _labs?: Labs;
  get labs(): Labs {
    return (this._labs ??= new Labs(this._options));
  }

  private _prompts?: Prompts;
  get prompts(): Prompts {
    return (this._prompts ??= new Prompts(this._options));
  }

  private _settings?: Settings;
  get settings(): Settings {
    return (this._settings ??= new Settings(this._options));
  }

  private _types?: Types;
  get types(): Types {
    return (this._types ??= new Types(this._options));
  }

  private _modules?: Modules;
  get modules(): Modules {
    return (this._modules ??= new Modules(this._options));
  }

  private _packages?: Packages;
  get packages(): Packages {
    return (this._packages ??= new Packages(this._options));
  }

  private _deployments?: Deployments;
  get deployments(): Deployments {
    return (this._deployments ??= new Deployments(this._options));
  }

  private _benchmarks?: Benchmarks;
  get benchmarks(): Benchmarks {
    return (this._benchmarks ??= new Benchmarks(this._options));
  }

  private _evals?: Evals;
  get evals(): Evals {
    return (this._evals ??= new Evals(this._options));
  }

  private _evalRuns?: EvalRuns;
  get evalRuns(): EvalRuns {
    return (this._evalRuns ??= new EvalRuns(this._options));
  }

  private _evalResults?: EvalResults;
  get evalResults(): EvalResults {
    return (this._evalResults ??= new EvalResults(this._options));
  }

  private _datasets?: Datasets;
  get datasets(): Datasets {
    return (this._datasets ??= new Datasets(this._options));
  }

  private _events?: Events;
  get events(): Events {
    return (this._events ??= new Events(this._options));
  }

  private _errors?: Errors;
  get errors(): Errors {
    return (this._errors ??= new Errors(this._options));
  }

  private _generations?: Generations;
  get generations(): Generations {
    return (this._generations ??= new Generations(this._options));
  }

  private _generationBatches?: GenerationBatches;
  get generationBatches(): GenerationBatches {
    return (this._generationBatches ??= new GenerationBatches(this._options));
  }

  private _traces?: Traces;
  get traces(): Traces {
    return (this._traces ??= new Traces(this._options));
  }

  private _kpIs?: KPIs;
  get kpIs(): KPIs {
    return (this._kpIs ??= new KPIs(this._options));
  }

  private _projects?: Projects;
  get projects(): Projects {
    return (this._projects ??= new Projects(this._options));
  }

  private _domains?: Domains;
  get domains(): Domains {
    return (this._domains ??= new Domains(this._options));
  }

  private _users?: Users;
  get users(): Users {
    return (this._users ??= new Users(this._options));
  }

  private _roles?: Roles;
  get roles(): Roles {
    return (this._roles ??= new Roles(this._options));
  }

  private _tags?: Tags;
  get tags(): Tags {
    return (this._tags ??= new Tags(this._options));
  }

  private _webhooks?: Webhooks;
  get webhooks(): Webhooks {
    return (this._webhooks ??= new Webhooks(this._options));
  }

  private _apiKeys?: APIKeys;
  get apiKeys(): APIKeys {
    return (this._apiKeys ??= new APIKeys(this._options));
  }

  private _oauthClients?: OauthClients;
  get oauthClients(): OauthClients {
    return (this._oauthClients ??= new OauthClients(this._options));
  }

  private _oauthCodes?: OauthCodes;
  get oauthCodes(): OauthCodes {
    return (this._oauthCodes ??= new OauthCodes(this._options));
  }

  private _oauthTokens?: OauthTokens;
  get oauthTokens(): OauthTokens {
    return (this._oauthTokens ??= new OauthTokens(this._options));
  }
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { packagesDeleteApiPackagesId } from "../funcs/packagesDeleteApiPackagesId.js";
import { packagesGetApiPackages } from "../funcs/packagesGetApiPackages.js";
import { packagesGetApiPackagesId } from "../funcs/packagesGetApiPackagesId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Packages extends ClientSDK {
  /**
   * List all Packages
   *
   * @remarks
   * Returns a list of all Packages
   */
  async getApiPackages(
    options?: RequestOptions,
  ): Promise<operations.GetApiPackagesResponseBody> {
    return unwrapAsync(packagesGetApiPackages(
      this,
      options,
    ));
  }

  /**
   * Get a specific Package
   *
   * @remarks
   * Returns a specific Package by ID
   */
  async getApiPackagesId(
    request: operations.GetApiPackagesIdRequest,
    options?: RequestOptions,
  ): Promise<components.Package> {
    return unwrapAsync(packagesGetApiPackagesId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Package
   *
   * @remarks
   * Deletes a specific Package by ID
   */
  async deleteApiPackagesId(
    request: operations.DeleteApiPackagesIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteApiPackagesIdResponseBody> {
    return unwrapAsync(packagesDeleteApiPackagesId(
      this,
      request,
      options,
    ));
  }
}

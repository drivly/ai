{"version":3,"sources":["../../../src/adapter/test/schema.test.ts"],"sourcesContent":["import { describe, expect, it, test } from 'vitest'\nimport { format } from 'prettier'\nimport { getPayloadPath } from '../generate-schema/utils'\nimport { generateSchema } from '../generate-schema'\n\nconst PAYLOAD_TEST_DIR_PATH = getPayloadPath('./src/adapter/test/test_payload1')\nconst PAYLOAD_TEST_DIR_PATH2 = getPayloadPath('./src/adapter/test/test_payload2')\nconst PAYLOAD_TEST_DIR_PATH3 = getPayloadPath('./src/adapter/test/test_payload3')\n\ndescribe(`Handle schema generation`, async () => {\n  it('should generate the correct schema with existing schema', async () => {\n    const generate_schema = await generateSchema(\n      {\n        plugins: [\n          {\n            schema: {\n              testTable: {\n                fields: {\n                  hello: {\n                    type: 'boolean',\n                    required: false,\n                  },\n                  hello2: {\n                    type: 'string',\n                    required: true,\n                  },\n                },\n              },\n            },\n            id: 'test',\n          },\n        ],\n      },\n      {\n        outputDir: PAYLOAD_TEST_DIR_PATH,\n      },\n    )\n\n    // console.log(generate_schema);\n\n    const hard_coded_schema = await format(\n      `/**\n * EXAMPLE COLLECTIONS FOR BETTER AUTH\n *\n * Below is what your Payload collections should look like.\n * Please copy these to your actual collection configs.\n * Make sure to add an authStrategy for the users collection if there is one.\n *\n * Example auth strategy:\n * auth: {\n *   disableLocalStrategy: true,\n *   strategies: [\n *     betterAuthStrategy(),\n *     // Add other strategies as needed\n *   ],\n * },\n */\nimport type { CollectionConfig } from \"payload\";\n\nconst User: CollectionConfig = {\n  slug: \"user\",\n  admin: {\n    useAsTitle: \"name\",\n  },\n  fields: [\n    {\n      name: \"name\",\n      type: \"text\",\n      required: true,\n    },\n    {\n      name: \"email\",\n      type: \"email\",\n      required: true,\n      unique: true,\n    },\n    {\n      name: \"emailVerified\",\n      type: \"checkbox\",\n      required: true,\n    },\n    {\n      name: \"image\",\n      type: \"upload\",\n      relationTo: \"media\",\n    },\n  ],\n  timestamps: true,\n} as const;\n\nconst Session: CollectionConfig = {\n  slug: \"session\",\n  admin: {\n    useAsTitle: \"expiresAt\",\n  },\n  fields: [\n    {\n      name: \"expiresAt\",\n      type: \"date\",\n      required: true,\n    },\n    {\n      name: \"token\",\n      type: \"text\",\n      required: true,\n      unique: true,\n    },\n    {\n      name: \"ipAddress\",\n      type: \"text\",\n    },\n    {\n      name: \"userAgent\",\n      type: \"text\",\n    },\n    {\n      name: \"userId\",\n      type: \"relationship\",\n      required: true,\n      relationTo: \"user\",\n    },\n  ],\n  timestamps: true,\n} as const;\n\nconst Account: CollectionConfig = {\n  slug: \"account\",\n  admin: {\n    useAsTitle: \"accountId\",\n  },\n  fields: [\n    {\n      name: \"accountId\",\n      type: \"text\",\n      required: true,\n    },\n    {\n      name: \"providerId\",\n      type: \"text\",\n      required: true,\n    },\n    {\n      name: \"userId\",\n      type: \"relationship\",\n      required: true,\n      relationTo: \"user\",\n    },\n    {\n      name: \"accessToken\",\n      type: \"text\",\n    },\n    {\n      name: \"refreshToken\",\n      type: \"text\",\n    },\n    {\n      name: \"idToken\",\n      type: \"text\",\n    },\n    {\n      name: \"accessTokenExpiresAt\",\n      type: \"date\",\n    },\n    {\n      name: \"refreshTokenExpiresAt\",\n      type: \"date\",\n    },\n    {\n      name: \"scope\",\n      type: \"text\",\n    },\n    {\n      name: \"password\",\n      type: \"text\",\n    },\n  ],\n  timestamps: true,\n} as const;\n\nconst Verification: CollectionConfig = {\n  slug: \"verification\",\n  admin: {\n    useAsTitle: \"identifier\",\n  },\n  fields: [\n    {\n      name: \"identifier\",\n      type: \"text\",\n      required: true,\n    },\n    {\n      name: \"value\",\n      type: \"text\",\n      required: true,\n    },\n    {\n      name: \"expiresAt\",\n      type: \"date\",\n      required: true,\n    },\n  ],\n  timestamps: true,\n} as const;\n\nconst TestTable: CollectionConfig = {\n  slug: \"testTable\",\n  admin: {\n    useAsTitle: \"hello\",\n  },\n  fields: [\n    {\n      name: \"hello\",\n      type: \"checkbox\",\n    },\n    {\n      name: \"hello2\",\n      type: \"text\",\n      required: true,\n    },\n  ],\n  timestamps: true,\n} as const;\n\nexport { User, Session, Account, Verification, TestTable };\n\n`,\n      { filepath: 'schema.ts' },\n    )\n\n    // if (generate_schema !== hard_coded_schema) {\n    //   console.log(`\\n\\n\\n--------------------------------- Generated:`);\n    //   console.log(generate_schema);\n    //   console.log(`--------------------------------- Hard-coded:`);\n    //   console.log(hard_coded_schema);\n    //   console.log(`---------------------------------\\n\\n\\n`);\n    // }\n    expect(generate_schema).toEqual(hard_coded_schema)\n  })\n\n  //   it(\"should generate the correct schema based on multiple plugins\", async () => {\n  //     const generate_schema = await generateSchema(\n  //       {\n  //         plugins: [\n  //           {\n  //             schema: {\n  //               user: {\n  //                 fields: {},\n  //               },\n  //               admins: {\n  //                 fields: {},\n  //               },\n  //             },\n  //             id: \"test\",\n  //           },\n  //         ],\n  //       },\n  //       {\n  //         payload_dir_path: PAYLOAD_TEST_DIR_PATH2,\n  //       }\n  //     );\n\n  //     const hard_coded_schema = await format(\n  //       `/**\n  //  * EXAMPLE COLLECTIONS FOR BETTER AUTH\n  //  *\n  //  * Below is what your Payload collections should look like.\n  //  * Please copy these to your actual collection configs.\n  //  * Make sure to add an authStrategy for the users collection if there is one.\n  //  *\n  //  * Example auth strategy:\n  //  * auth: {\n  //  *   disableLocalStrategy: true,\n  //  *   strategies: [\n  //  *     betterAuthStrategy(),\n  //  *     // Add other strategies as needed\n  //  *   ],\n  //  * },\n  //  */\n  // import type { CollectionConfig } from \"payload\";\n\n  // const User: CollectionConfig = {\n  //   slug: \"user\",\n  //   admin: {\n  //     useAsTitle: \"name\",\n  //   },\n  //   fields: [\n  //     {\n  //       name: \"name\",\n  //       type: \"text\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"email\",\n  //       type: \"email\",\n  //       required: true,\n  //       unique: true,\n  //     },\n  //     {\n  //       name: \"emailVerified\",\n  //       type: \"checkbox\",\n  //       required: true,\n  //       defaultValue: false,\n  //     },\n  //     {\n  //       name: \"image\",\n  //       type: \"upload\",\n  //       relationTo: \"media\",\n  //     },\n  //   ],\n  //   timestamps: true,\n  // } as const;\n\n  // const Session: CollectionConfig = {\n  //   slug: \"session\",\n  //   admin: {\n  //     useAsTitle: \"expiresAt\",\n  //   },\n  //   fields: [\n  //     {\n  //       name: \"expiresAt\",\n  //       type: \"date\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"token\",\n  //       type: \"text\",\n  //       required: true,\n  //       unique: true,\n  //     },\n  //     {\n  //       name: \"ipAddress\",\n  //       type: \"text\",\n  //     },\n  //     {\n  //       name: \"userAgent\",\n  //       type: \"text\",\n  //     },\n  //     {\n  //       name: \"userId\",\n  //       type: \"relationship\",\n  //       relationTo: \"user\",\n  //       required: true,\n  //     },\n  //   ],\n  //   timestamps: true,\n  // } as const;\n\n  // const Account: CollectionConfig = {\n  //   slug: \"account\",\n  //   admin: {\n  //     useAsTitle: \"accountId\",\n  //   },\n  //   fields: [\n  //     {\n  //       name: \"accountId\",\n  //       type: \"text\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"providerId\",\n  //       type: \"text\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"userId\",\n  //       type: \"relationship\",\n  //       relationTo: \"user\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"accessToken\",\n  //       type: \"text\",\n  //     },\n  //     {\n  //       name: \"refreshToken\",\n  //       type: \"text\",\n  //     },\n  //     {\n  //       name: \"idToken\",\n  //       type: \"text\",\n  //     },\n  //     {\n  //       name: \"accessTokenExpiresAt\",\n  //       type: \"date\",\n  //     },\n  //     {\n  //       name: \"refreshTokenExpiresAt\",\n  //       type: \"date\",\n  //     },\n  //     {\n  //       name: \"scope\",\n  //       type: \"text\",\n  //     },\n  //     {\n  //       name: \"password\",\n  //       type: \"text\",\n  //     },\n  //   ],\n  //   timestamps: true,\n  // } as const;\n\n  // const Verification: CollectionConfig = {\n  //   slug: \"verification\",\n  //   admin: {\n  //     useAsTitle: \"identifier\",\n  //   },\n  //   fields: [\n  //     {\n  //       name: \"identifier\",\n  //       type: \"text\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"value\",\n  //       type: \"text\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"expiresAt\",\n  //       type: \"date\",\n  //       required: true,\n  //     },\n  //   ],\n  //   timestamps: true,\n  // } as const;\n\n  // const Admins: CollectionConfig = {\n  //   slug: \"admins\",\n  //   admin: {\n  //     useAsTitle: \"id\",\n  //   },\n  //   fields: [],\n  //   timestamps: true,\n  // } as const;\n\n  // export { User, Session, Account, Verification, Admins };\n  // `,\n  //       { filepath: \"schema.ts\" }\n  //     );\n\n  //     if (generate_schema !== hard_coded_schema) {\n  //       console.log(`\\n\\n\\n--------------------------------- Generated:`);\n  //       console.log(generate_schema);\n  //       console.log(`--------------------------------- Hard-coded:`);\n  //       console.log(hard_coded_schema);\n  //       console.log(`---------------------------------\\n\\n\\n`);\n  //     }\n\n  //     expect(generate_schema).toBe(hard_coded_schema);\n  //   });\n\n  //   it(`should generate the correct schema based on multiple different field types`, async () => {\n  //     const generate_schema = await generateSchema(\n  //       {\n  //         plugins: [\n  //           {\n  //             id: \"admin\",\n  //             schema: {\n  //               admin: {\n  //                 fields: {\n  //                   name: {\n  //                     type: \"string\",\n  //                     required: true,\n  //                   },\n  //                   id: {\n  //                     type: \"string\",\n  //                     required: true,\n  //                   },\n  //                   isAdmin: {\n  //                     type: \"boolean\",\n  //                     required: true,\n  //                   },\n  //                   status: {\n  //                     type: \"string\",\n  //                     required: false,\n  //                   },\n  //                   date: {\n  //                     type: \"date\",\n  //                   },\n  //                   number: {\n  //                     type: \"number\",\n  //                   },\n  //                   str_array: {\n  //                     type: \"string[]\",\n  //                   },\n  //                   num_array: {\n  //                     type: \"number[]\",\n  //                   },\n  //                 },\n  //               },\n  //             },\n  //           },\n  //         ],\n  //       },\n  //       {\n  //         payload_dir_path: PAYLOAD_TEST_DIR_PATH3,\n  //       }\n  //     );\n\n  //     const hard_coded_schema = await format(\n  //       `/**\n  //  * EXAMPLE COLLECTIONS FOR BETTER AUTH\n  //  *\n  //  * Below is what your Payload collections should look like.\n  //  * Please copy these to your actual collection configs.\n  //  * Make sure to add an authStrategy for the users collection if there is one.\n  //  *\n  //  * Example auth strategy:\n  //  * auth: {\n  //  *   disableLocalStrategy: true,\n  //  *   strategies: [\n  //  *     betterAuthStrategy(),\n  //  *     // Add other strategies as needed\n  //  *   ],\n  //  * },\n  //  */\n  // import type { CollectionConfig } from \"payload\";\n\n  // const User: CollectionConfig = {\n  //   slug: \"user\",\n  //   admin: {\n  //     useAsTitle: \"name\",\n  //   },\n  //   fields: [\n  //     {\n  //       name: \"name\",\n  //       type: \"text\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"email\",\n  //       type: \"email\",\n  //       required: true,\n  //       unique: true,\n  //     },\n  //     {\n  //       name: \"emailVerified\",\n  //       type: \"checkbox\",\n  //       required: true,\n  //       defaultValue: false,\n  //     },\n  //     {\n  //       name: \"image\",\n  //       type: \"upload\",\n  //       relationTo: \"media\",\n  //     },\n  //   ],\n  //   timestamps: true,\n  // } as const;\n\n  // const Session: CollectionConfig = {\n  //   slug: \"session\",\n  //   admin: {\n  //     useAsTitle: \"expiresAt\",\n  //   },\n  //   fields: [\n  //     {\n  //       name: \"expiresAt\",\n  //       type: \"date\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"token\",\n  //       type: \"text\",\n  //       required: true,\n  //       unique: true,\n  //     },\n  //     {\n  //       name: \"ipAddress\",\n  //       type: \"text\",\n  //     },\n  //     {\n  //       name: \"userAgent\",\n  //       type: \"text\",\n  //     },\n  //     {\n  //       name: \"userId\",\n  //       type: \"relationship\",\n  //       relationTo: \"user\",\n  //       required: true,\n  //     },\n  //   ],\n  //   timestamps: true,\n  // } as const;\n\n  // const Account: CollectionConfig = {\n  //   slug: \"account\",\n  //   admin: {\n  //     useAsTitle: \"accountId\",\n  //   },\n  //   fields: [\n  //     {\n  //       name: \"accountId\",\n  //       type: \"text\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"providerId\",\n  //       type: \"text\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"userId\",\n  //       type: \"relationship\",\n  //       relationTo: \"user\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"accessToken\",\n  //       type: \"text\",\n  //     },\n  //     {\n  //       name: \"refreshToken\",\n  //       type: \"text\",\n  //     },\n  //     {\n  //       name: \"idToken\",\n  //       type: \"text\",\n  //     },\n  //     {\n  //       name: \"accessTokenExpiresAt\",\n  //       type: \"date\",\n  //     },\n  //     {\n  //       name: \"refreshTokenExpiresAt\",\n  //       type: \"date\",\n  //     },\n  //     {\n  //       name: \"scope\",\n  //       type: \"text\",\n  //     },\n  //     {\n  //       name: \"password\",\n  //       type: \"text\",\n  //     },\n  //   ],\n  //   timestamps: true,\n  // } as const;\n\n  // const Verification: CollectionConfig = {\n  //   slug: \"verification\",\n  //   admin: {\n  //     useAsTitle: \"identifier\",\n  //   },\n  //   fields: [\n  //     {\n  //       name: \"identifier\",\n  //       type: \"text\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"value\",\n  //       type: \"text\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"expiresAt\",\n  //       type: \"date\",\n  //       required: true,\n  //     },\n  //   ],\n  //   timestamps: true,\n  // } as const;\n\n  // const Admin: CollectionConfig = {\n  //   slug: \"admin\",\n  //   admin: {\n  //     useAsTitle: \"name\",\n  //   },\n  //   fields: [\n  //     {\n  //       name: \"name\",\n  //       type: \"text\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"isAdmin\",\n  //       type: \"checkbox\",\n  //       required: true,\n  //     },\n  //     {\n  //       name: \"status\",\n  //       type: \"text\",\n  //     },\n  //     {\n  //       name: \"date\",\n  //       type: \"date\",\n  //     },\n  //     {\n  //       name: \"number\",\n  //       type: \"number\",\n  //     },\n  //     {\n  //       name: \"str_array\",\n  //       type: \"text\",\n  //     },\n  //     {\n  //       name: \"num_array\",\n  //       type: \"text\",\n  //     },\n  //   ],\n  //   timestamps: true,\n  // } as const;\n\n  // export { User, Session, Account, Verification, Admin };\n  //       `,\n  //       { filepath: \"schema.ts\" }\n  //     );\n\n  //     if (generate_schema !== hard_coded_schema) {\n  //       console.log(`\\n\\n\\n--------------------------------- Generated:`);\n  //       console.log(generate_schema);\n  //       console.log(`--------------------------------- Hard-coded:`);\n  //       console.log(hard_coded_schema);\n  //       console.log(`---------------------------------\\n\\n\\n`);\n  //     }\n\n  //     expect(generate_schema).toBe(hard_coded_schema);\n  //   });\n\n  //   test.skip(\"should support .index method after `defineTable`\", async () => {\n  //     const generate_schema = await generateSchema(\n  //       {\n  //         plugins: [\n  //           {\n  //             schema: {\n  //               testTable: {\n  //                 fields: {},\n  //               },\n  //             },\n  //             id: \"test\",\n  //           },\n  //         ],\n  //       },\n  //       {\n  //         payload_dir_path: PAYLOAD_TEST_DIR_PATH3,\n  //       }\n  //     );\n\n  //     const hard_coded_schema = await format(\n  //       [\n  //         `import {defineSchema,defineTable} from \"convex/server\";`,\n  //         `import {v} from \"convex/values\";`,\n  //         ``,\n  //         `export default defineSchema({`,\n  //         default_tables,\n  //         `testTable: defineTable({`,\n  //         `}).index(\"by_something\", [\"email\"]),`,\n  //         `});`,\n  //       ].join(\"\\n\"),\n  //       { filepath: \"schema.ts\" }\n  //     );\n\n  //     if (generate_schema !== hard_coded_schema) {\n  //       console.log(`\\n\\n\\n--------------------------------- Generated:`);\n  //       console.log(generate_schema);\n  //       console.log(`--------------------------------- Hard-coded:`);\n  //       console.log(hard_coded_schema);\n  //       console.log(`---------------------------------\\n\\n\\n`);\n  //     }\n\n  //     expect(generate_schema).toBe(hard_coded_schema);\n  //   });\n\n  //   it(`should generate references correctly`, async () => {\n  //     const generate_schema = await generateSchema(\n  //       {\n  //         plugins: [\n  //           {\n  //             id: \"admin\",\n  //             schema: {\n  //               admin: {\n  //                 fields: {\n  //                   id: {\n  //                     type: \"string\",\n  //                     required: true,\n  //                   },\n\n  //                   reference_optional: {\n  //                     type: \"string\",\n  //                     references: {\n  //                       field: \"something\",\n  //                       model: \"something_else\",\n  //                     },\n  //                   },\n  //                   reference_required: {\n  //                     type: \"string\",\n  //                     required: true,\n  //                     references: {\n  //                       field: \"something2\",\n  //                       model: \"something2_else\",\n  //                     },\n  //                   },\n  //                 },\n  //               },\n  //             },\n  //           },\n  //         ],\n  //       },\n  //       {\n  //         payload_dir_path: PAYLOAD_TEST_DIR_PATH3,\n  //       }\n  //     );\n\n  //     const hard_coded_schema = await format(\n  //       [\n  //         `import {defineSchema,defineTable} from \"convex/server\";`,\n  //         `import {v} from \"convex/values\";`,\n  //         ``,\n  //         `export default defineSchema({`,\n  //         default_tables,\n  //         `admin: defineTable({`,\n  //         `id: v.id(\"admin\"),`,\n  //         `reference_optional: v.id(\"something_else\"),`,\n  //         `reference_required: v.id(\"something2_else\"),`,\n  //         `}),`,\n  //         `});`,\n  //       ].join(\"\\n\"),\n  //       { filepath: \"schema.ts\" }\n  //     );\n\n  //     if (generate_schema !== hard_coded_schema) {\n  //       console.log(`\\n\\n\\n--------------------------------- Generated:`);\n  //       console.log(generate_schema);\n  //       console.log(`--------------------------------- Hard-coded:`);\n  //       console.log(hard_coded_schema);\n  //       console.log(`---------------------------------\\n\\n\\n`);\n  //     }\n  //     expect(generate_schema).toBe(hard_coded_schema);\n  //   });\n})\n"],"names":["describe","expect","it","format","getPayloadPath","generateSchema","PAYLOAD_TEST_DIR_PATH","PAYLOAD_TEST_DIR_PATH2","PAYLOAD_TEST_DIR_PATH3","generate_schema","plugins","schema","testTable","fields","hello","type","required","hello2","id","outputDir","hard_coded_schema","filepath","toEqual"],"mappings":"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"}
{"version":3,"sources":["../../../src/adapter/test/adapter-test.ts"],"sourcesContent":["// @ts-nocheck\nimport { betterAuth, type BetterAuthOptions } from 'better-auth'\nimport { afterAll, beforeAll, beforeEach, describe, expect, it, test, vi } from 'vitest'\nimport { payloadAdapter } from '../src/index'\nimport { runAdapterTest } from './better-auth-adapter-test'\nimport { getPayload } from '../dev/index.js'\nimport { BasePayload } from 'payload'\n\n// Increase timeout for all tests, particularly important in CI environments\nvi.setConfig({ testTimeout: 30000 })\n\n// Helper function to wait between tests to avoid race conditions\nconst wait = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))\n\ndescribe.skip('Handle Payload Adapter', async () => {\n  it('should successfully add the Payload Adapter', async () => {\n    const payload = await getPayload()\n\n    const auth = betterAuth({\n      database: payloadAdapter(payload),\n    })\n\n    expect(auth).toBeDefined()\n    expect(auth.options.database).toBeDefined()\n    expect(auth.options.database({}).id).toEqual('payload')\n  })\n})\n\nfunction deleteAll(payload: BasePayload) {\n  beforeAll(async () => {\n    // Wait for MongoDB connection to be fully established\n    await wait(1000)\n\n    // delete all users and sessions\n    try {\n      const res = await payload.delete({\n        collection: 'user',\n        where: {\n          id: {\n            exists: true,\n          },\n        },\n      })\n      console.log('before users: ', res.docs.length, res.errors)\n\n      const res2 = await payload.delete({\n        collection: 'session',\n        where: {\n          id: {\n            exists: true,\n          },\n        },\n      })\n      console.log('before sessions: ', res2.docs.length, res2.errors)\n\n      const res3 = await payload.delete({\n        collection: 'account',\n        where: {\n          id: {\n            exists: true,\n          },\n        },\n      })\n      console.log('before accounts: ', res3.docs.length, res3.errors)\n\n      const res4 = await payload.delete({\n        collection: 'verification',\n        where: {\n          id: {\n            exists: true,\n          },\n        },\n      })\n      console.log('before verification: ', res4.docs.length, res4.errors)\n    } catch (error) {\n      console.error('Error in beforeAll cleanup:', error)\n    }\n  })\n\n  afterAll(async () => {\n    try {\n      const res2 = await payload.delete({\n        collection: 'session',\n        where: {\n          id: {\n            exists: true,\n          },\n        },\n      })\n      console.log('after sessions: ', res2.docs.length, res2.errors)\n\n      const res3 = await payload.delete({\n        collection: 'account',\n        where: {\n          id: {\n            exists: true,\n          },\n        },\n      })\n      console.log('after accounts: ', res3.docs.length, res3.errors)\n\n      const res = await payload.delete({\n        collection: 'user',\n        where: {\n          id: {\n            exists: true,\n          },\n        },\n      })\n      console.log('after users: ', res.docs.length, res.errors)\n\n      const res4 = await payload.delete({\n        collection: 'verification',\n        where: {\n          id: {\n            exists: true,\n          },\n        },\n      })\n      console.log('after verification: ', res4.docs.length, res4.errors)\n    } catch (error) {\n      console.error('Error in afterAll cleanup:', error)\n    }\n  })\n}\n\ndescribe.skip('Run BetterAuth Adapter tests', async () => {\n  const payload = await getPayload()\n\n  deleteAll(payload)\n\n  const adapter = payloadAdapter(payload, {\n    enableDebugLogs: true,\n  })\n\n  await runAdapterTest({\n    getAdapter: async (\n      customOptions = {\n        session: {\n          fields: {\n            userId: 'user',\n          },\n        },\n        account: {\n          fields: {\n            userId: 'user',\n          },\n        },\n      },\n    ) => {\n      return adapter({ ...customOptions })\n    },\n    skipGenerateIdTest: true,\n  })\n\n  test('should find many with offset and limit', async () => {\n    // At this point, `user` contains 8 rows.\n    // offset of 2 returns 6 rows\n    // limit of 2 returns 2 rows\n    const res = await adapter({}).findMany({\n      model: 'user',\n      offset: 2,\n      limit: 2,\n    })\n    expect(res.length).toBe(2)\n  })\n})\n\ndescribe.skip('Authentication Flow Tests', async () => {\n  const testUser = {\n    email: 'test-email@email.com',\n    password: 'password12345',\n    name: 'Test Name',\n  }\n  const payload = await getPayload()\n\n  deleteAll(payload)\n\n  const auth = betterAuth({\n    database: payloadAdapter(payload, {\n      enableDebugLogs: true,\n    }),\n    emailAndPassword: {\n      enabled: true,\n    },\n    session: {\n      fields: {\n        userId: 'user',\n      },\n    },\n    account: {\n      fields: {\n        userId: 'user',\n      },\n    },\n  })\n\n  it('should successfully sign up a new user', async () => {\n    const user = await auth.api.signUpEmail({\n      body: {\n        email: testUser.email,\n        password: testUser.password,\n        name: testUser.name,\n      },\n    })\n    expect(user).toBeDefined()\n\n    // Wait a moment to ensure the database operation completes\n    await wait(1000)\n  })\n\n  it('should successfully sign in an existing user', async () => {\n    // Increased wait time to ensure database operations are complete\n    await wait(3000)\n\n    const user = await auth.api.signInEmail({\n      body: {\n        email: testUser.email,\n        password: testUser.password,\n      },\n    })\n\n    expect(user.user).toBeDefined()\n  })\n})\n"],"names":["betterAuth","afterAll","beforeAll","describe","expect","it","test","vi","payloadAdapter","runAdapterTest","getPayload","setConfig","testTimeout","wait","ms","Promise","resolve","setTimeout","skip","payload","auth","database","toBeDefined","options","id","toEqual","deleteAll","res","delete","collection","where","exists","console","log","docs","length","errors","res2","res3","res4","error","adapter","enableDebugLogs","getAdapter","customOptions","session","fields","userId","account","skipGenerateIdTest","findMany","model","offset","limit","toBe","testUser","email","password","name","emailAndPassword","enabled","user","api","signUpEmail","body","signInEmail"],"mappings":"AAAA,cAAc;AACd,SAASA,UAAU,QAAgC,cAAa;AAChE,SAASC,QAAQ,EAAEC,SAAS,EAAcC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,EAAEC,IAAI,EAAEC,EAAE,QAAQ,SAAQ;AACxF,SAASC,cAAc,QAAQ,eAAc;AAC7C,SAASC,cAAc,QAAQ,6BAA4B;AAC3D,SAASC,UAAU,QAAQ,kBAAiB;AAG5C,4EAA4E;AAC5EH,GAAGI,SAAS,CAAC;IAAEC,aAAa;AAAM;AAElC,iEAAiE;AACjE,MAAMC,OAAO,CAACC,KAAe,IAAIC,QAAQ,CAACC,UAAYC,WAAWD,SAASF;AAE1EX,SAASe,IAAI,CAAC,0BAA0B;IACtCb,GAAG,+CAA+C;QAChD,MAAMc,UAAU,MAAMT;QAEtB,MAAMU,OAAOpB,WAAW;YACtBqB,UAAUb,eAAeW;QAC3B;QAEAf,OAAOgB,MAAME,WAAW;QACxBlB,OAAOgB,KAAKG,OAAO,CAACF,QAAQ,EAAEC,WAAW;QACzClB,OAAOgB,KAAKG,OAAO,CAACF,QAAQ,CAAC,CAAC,GAAGG,EAAE,EAAEC,OAAO,CAAC;IAC/C;AACF;AAEA,SAASC,UAAUP,OAAoB;IACrCjB,UAAU;QACR,sDAAsD;QACtD,MAAMW,KAAK;QAEX,gCAAgC;QAChC,IAAI;YACF,MAAMc,MAAM,MAAMR,QAAQS,MAAM,CAAC;gBAC/BC,YAAY;gBACZC,OAAO;oBACLN,IAAI;wBACFO,QAAQ;oBACV;gBACF;YACF;YACAC,QAAQC,GAAG,CAAC,kBAAkBN,IAAIO,IAAI,CAACC,MAAM,EAAER,IAAIS,MAAM;YAEzD,MAAMC,OAAO,MAAMlB,QAAQS,MAAM,CAAC;gBAChCC,YAAY;gBACZC,OAAO;oBACLN,IAAI;wBACFO,QAAQ;oBACV;gBACF;YACF;YACAC,QAAQC,GAAG,CAAC,qBAAqBI,KAAKH,IAAI,CAACC,MAAM,EAAEE,KAAKD,MAAM;YAE9D,MAAME,OAAO,MAAMnB,QAAQS,MAAM,CAAC;gBAChCC,YAAY;gBACZC,OAAO;oBACLN,IAAI;wBACFO,QAAQ;oBACV;gBACF;YACF;YACAC,QAAQC,GAAG,CAAC,qBAAqBK,KAAKJ,IAAI,CAACC,MAAM,EAAEG,KAAKF,MAAM;YAE9D,MAAMG,OAAO,MAAMpB,QAAQS,MAAM,CAAC;gBAChCC,YAAY;gBACZC,OAAO;oBACLN,IAAI;wBACFO,QAAQ;oBACV;gBACF;YACF;YACAC,QAAQC,GAAG,CAAC,yBAAyBM,KAAKL,IAAI,CAACC,MAAM,EAAEI,KAAKH,MAAM;QACpE,EAAE,OAAOI,OAAO;YACdR,QAAQQ,KAAK,CAAC,+BAA+BA;QAC/C;IACF;IAEAvC,SAAS;QACP,IAAI;YACF,MAAMoC,OAAO,MAAMlB,QAAQS,MAAM,CAAC;gBAChCC,YAAY;gBACZC,OAAO;oBACLN,IAAI;wBACFO,QAAQ;oBACV;gBACF;YACF;YACAC,QAAQC,GAAG,CAAC,oBAAoBI,KAAKH,IAAI,CAACC,MAAM,EAAEE,KAAKD,MAAM;YAE7D,MAAME,OAAO,MAAMnB,QAAQS,MAAM,CAAC;gBAChCC,YAAY;gBACZC,OAAO;oBACLN,IAAI;wBACFO,QAAQ;oBACV;gBACF;YACF;YACAC,QAAQC,GAAG,CAAC,oBAAoBK,KAAKJ,IAAI,CAACC,MAAM,EAAEG,KAAKF,MAAM;YAE7D,MAAMT,MAAM,MAAMR,QAAQS,MAAM,CAAC;gBAC/BC,YAAY;gBACZC,OAAO;oBACLN,IAAI;wBACFO,QAAQ;oBACV;gBACF;YACF;YACAC,QAAQC,GAAG,CAAC,iBAAiBN,IAAIO,IAAI,CAACC,MAAM,EAAER,IAAIS,MAAM;YAExD,MAAMG,OAAO,MAAMpB,QAAQS,MAAM,CAAC;gBAChCC,YAAY;gBACZC,OAAO;oBACLN,IAAI;wBACFO,QAAQ;oBACV;gBACF;YACF;YACAC,QAAQC,GAAG,CAAC,wBAAwBM,KAAKL,IAAI,CAACC,MAAM,EAAEI,KAAKH,MAAM;QACnE,EAAE,OAAOI,OAAO;YACdR,QAAQQ,KAAK,CAAC,8BAA8BA;QAC9C;IACF;AACF;AAEArC,SAASe,IAAI,CAAC,gCAAgC;IAC5C,MAAMC,UAAU,MAAMT;IAEtBgB,UAAUP;IAEV,MAAMsB,UAAUjC,eAAeW,SAAS;QACtCuB,iBAAiB;IACnB;IAEA,MAAMjC,eAAe;QACnBkC,YAAY,OACVC,gBAAgB;YACdC,SAAS;gBACPC,QAAQ;oBACNC,QAAQ;gBACV;YACF;YACAC,SAAS;gBACPF,QAAQ;oBACNC,QAAQ;gBACV;YACF;QACF,CAAC;YAED,OAAON,QAAQ;gBAAE,GAAGG,aAAa;YAAC;QACpC;QACAK,oBAAoB;IACtB;IAEA3C,KAAK,0CAA0C;QAC7C,yCAAyC;QACzC,6BAA6B;QAC7B,4BAA4B;QAC5B,MAAMqB,MAAM,MAAMc,QAAQ,CAAC,GAAGS,QAAQ,CAAC;YACrCC,OAAO;YACPC,QAAQ;YACRC,OAAO;QACT;QACAjD,OAAOuB,IAAIQ,MAAM,EAAEmB,IAAI,CAAC;IAC1B;AACF;AAEAnD,SAASe,IAAI,CAAC,6BAA6B;IACzC,MAAMqC,WAAW;QACfC,OAAO;QACPC,UAAU;QACVC,MAAM;IACR;IACA,MAAMvC,UAAU,MAAMT;IAEtBgB,UAAUP;IAEV,MAAMC,OAAOpB,WAAW;QACtBqB,UAAUb,eAAeW,SAAS;YAChCuB,iBAAiB;QACnB;QACAiB,kBAAkB;YAChBC,SAAS;QACX;QACAf,SAAS;YACPC,QAAQ;gBACNC,QAAQ;YACV;QACF;QACAC,SAAS;YACPF,QAAQ;gBACNC,QAAQ;YACV;QACF;IACF;IAEA1C,GAAG,0CAA0C;QAC3C,MAAMwD,OAAO,MAAMzC,KAAK0C,GAAG,CAACC,WAAW,CAAC;YACtCC,MAAM;gBACJR,OAAOD,SAASC,KAAK;gBACrBC,UAAUF,SAASE,QAAQ;gBAC3BC,MAAMH,SAASG,IAAI;YACrB;QACF;QACAtD,OAAOyD,MAAMvC,WAAW;QAExB,2DAA2D;QAC3D,MAAMT,KAAK;IACb;IAEAR,GAAG,gDAAgD;QACjD,iEAAiE;QACjE,MAAMQ,KAAK;QAEX,MAAMgD,OAAO,MAAMzC,KAAK0C,GAAG,CAACG,WAAW,CAAC;YACtCD,MAAM;gBACJR,OAAOD,SAASC,KAAK;gBACrBC,UAAUF,SAASE,QAAQ;YAC7B;QACF;QAEArD,OAAOyD,KAAKA,IAAI,EAAEvC,WAAW;IAC/B;AACF"}
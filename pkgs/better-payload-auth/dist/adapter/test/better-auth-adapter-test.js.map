{"version":3,"sources":["../../../src/adapter/test/better-auth-adapter-test.ts"],"sourcesContent":["import type { Adapter, BetterAuthOptions } from 'better-auth'\nimport { generateId, User } from 'better-auth'\nimport { expect, test } from 'vitest'\n\ninterface AdapterTestOptions {\n  getAdapter: (customOptions?: Omit<BetterAuthOptions, 'database'>) => Promise<Adapter>\n  skipGenerateIdTest?: boolean\n}\n\nexport async function runAdapterTest(opts: AdapterTestOptions) {\n  const adapter = await opts.getAdapter()\n  const user = {\n    id: '1',\n    name: 'user',\n    email: 'user@email.com',\n    emailVerified: true,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  }\n\n  test('create model', async () => {\n    const res = await adapter.create({\n      model: 'user',\n      data: user,\n    })\n    expect({\n      name: res.name,\n      email: res.email,\n    }).toEqual({\n      name: user.name,\n      email: user.email,\n    })\n    user.id = res.id\n  })\n\n  test('find model', async () => {\n    const res = await adapter.findOne<User>({\n      model: 'user',\n      where: [\n        {\n          field: 'id',\n          value: user.id,\n        },\n      ],\n    })\n    expect({\n      name: res?.name,\n      email: res?.email,\n    }).toEqual({\n      name: user.name,\n      email: user.email,\n    })\n  })\n\n  test('find model without id', async () => {\n    const res = await adapter.findOne<User>({\n      model: 'user',\n      where: [\n        {\n          field: 'email',\n          value: user.email,\n        },\n      ],\n    })\n    expect({\n      name: res?.name,\n      email: res?.email,\n    }).toEqual({\n      name: user.name,\n      email: user.email,\n    })\n  })\n\n  test('find model with select', async () => {\n    const res = await adapter.findOne({\n      model: 'user',\n      where: [\n        {\n          field: 'id',\n          value: user.id,\n        },\n      ],\n      select: ['email'],\n    })\n    expect(res).toEqual({ id: user.id, email: user.email })\n  })\n\n  test('update model', async () => {\n    const newEmail = 'updated@email.com'\n\n    const res = await adapter.update<User>({\n      model: 'user',\n      where: [\n        {\n          field: 'id',\n          value: user.id,\n        },\n      ],\n      update: {\n        email: newEmail,\n      },\n    })\n    expect(res).toMatchObject({\n      email: newEmail,\n      name: user.name,\n    })\n  })\n\n  test('should find many', async () => {\n    const res = await adapter.findMany({\n      model: 'user',\n    })\n    expect(res.length).toBe(1)\n  })\n\n  test('should find many with where', async () => {\n    const user = await adapter.create<User>({\n      model: 'user',\n      data: {\n        id: '2',\n        name: 'user2',\n        email: 'test@email.com',\n        emailVerified: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      } as User,\n    })\n    const res = await adapter.findMany({\n      model: 'user',\n      where: [\n        {\n          field: 'id',\n          value: user.id,\n        },\n      ],\n    })\n    expect(res.length).toBe(1)\n  })\n\n  test('should find many with operators', async () => {\n    const newUser = await adapter.create<User>({\n      model: 'user',\n      data: {\n        id: '3',\n        name: 'user',\n        email: 'test-email2@email.com',\n        emailVerified: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      } as User,\n    })\n    const res = await adapter.findMany<User>({\n      model: 'user',\n      where: [\n        {\n          field: 'id',\n          operator: 'in',\n          value: ['3', newUser.id],\n        },\n      ],\n    })\n    expect(res.length).toBeGreaterThanOrEqual(0)\n  })\n\n  test('should work with reference fields', async () => {\n    let token: string | null = null\n    const user = await adapter.create<{ id: string } & Record<string, any>>({\n      model: 'user',\n      data: {\n        id: '4',\n        name: 'user',\n        email: 'my-email@email.com',\n        emailVerified: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    })\n    const session = await adapter.create({\n      model: 'session',\n      data: {\n        id: '1',\n        token: generateId(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        userId: user.id,\n        expiresAt: new Date(),\n      },\n    })\n    token = session.token\n    const res = await adapter.findOne({\n      model: 'session',\n      where: [\n        {\n          field: 'userId',\n          value: user.id,\n        },\n      ],\n    })\n    const resToken = await adapter.findOne({\n      model: 'session',\n      where: [\n        {\n          field: 'token',\n          value: token,\n        },\n      ],\n    })\n    expect(res).toMatchObject({\n      userId: user.id,\n    })\n    expect(resToken).toMatchObject({\n      userId: user.id,\n    })\n  })\n\n  test('should find many with sortBy', async () => {\n    await adapter.create({\n      model: 'user',\n      data: {\n        id: '5',\n        name: 'a',\n        email: 'a@email.com',\n        emailVerified: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    })\n    const res = await adapter.findMany<User>({\n      model: 'user',\n      sortBy: {\n        field: 'name',\n        direction: 'asc',\n      },\n    })\n    expect(res[0].name).toBe('a')\n\n    const res2 = await adapter.findMany<User>({\n      model: 'user',\n      sortBy: {\n        field: 'name',\n        direction: 'desc',\n      },\n    })\n\n    expect(res2[res2.length - 1].name).toBe('a')\n  })\n\n  test('should find many with limit', async () => {\n    const res = await adapter.findMany({\n      model: 'user',\n      limit: 1,\n    })\n    expect(res.length).toBe(1)\n  })\n\n  test('should update with multiple where', async () => {\n    await adapter.updateMany({\n      model: 'user',\n      where: [\n        {\n          field: 'name',\n          value: user.name,\n        },\n        {\n          field: 'email',\n          value: user.email,\n        },\n      ],\n      update: {\n        email: 'updated@email.com',\n      },\n    })\n    const updatedUser = await adapter.findOne<User>({\n      model: 'user',\n      where: [\n        {\n          field: 'email',\n          value: 'updated@email.com',\n        },\n      ],\n    })\n    expect(updatedUser).toMatchObject({\n      name: user.name,\n      email: 'updated@email.com',\n    })\n  })\n\n  test('delete model', async () => {\n    await adapter.delete({\n      model: 'user',\n      where: [\n        {\n          field: 'id',\n          value: user.id,\n        },\n      ],\n    })\n    const findRes = await adapter.findOne({\n      model: 'user',\n      where: [\n        {\n          field: 'id',\n          value: user.id,\n        },\n      ],\n    })\n    expect(findRes).toBeNull()\n  })\n\n  test('should delete many', async () => {\n    for (const id of ['to-be-delete1', 'to-be-delete2', 'to-be-delete3']) {\n      await adapter.create({\n        model: 'user',\n        data: {\n          id,\n          name: 'to-be-deleted',\n          email: `email@test-${id}.com`,\n          emailVerified: true,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n      })\n    }\n    const findResFirst = await adapter.findMany({\n      model: 'user',\n      where: [\n        {\n          field: 'name',\n          value: 'to-be-deleted',\n        },\n      ],\n    })\n    expect(findResFirst.length).toBe(3)\n    await adapter.deleteMany({\n      model: 'user',\n      where: [\n        {\n          field: 'name',\n          value: 'to-be-deleted',\n        },\n      ],\n    })\n    const findRes = await adapter.findMany({\n      model: 'user',\n      where: [\n        {\n          field: 'name',\n          value: 'to-be-deleted',\n        },\n      ],\n    })\n    expect(findRes.length).toBe(0)\n  })\n\n  test(\"shouldn't throw on delete record not found\", async () => {\n    await adapter.delete({\n      model: 'user',\n      where: [\n        {\n          field: 'id',\n          value: '5',\n        },\n      ],\n    })\n  })\n\n  test(\"shouldn't throw on record not found\", async () => {\n    const res = await adapter.findOne({\n      model: 'user',\n      where: [\n        {\n          field: 'id',\n          value: '5',\n        },\n      ],\n    })\n    expect(res).toBeNull()\n  })\n\n  test('should find many with contains operator', async () => {\n    const res = await adapter.findMany({\n      model: 'user',\n      where: [\n        {\n          field: 'name',\n          operator: 'contains',\n          value: 'user2',\n        },\n      ],\n    })\n    expect(res.length).toBe(1)\n  })\n\n  test('should search users with startsWith', async () => {\n    const res = await adapter.findMany<User>({\n      model: 'user',\n      where: [\n        {\n          field: 'name',\n          operator: 'starts_with',\n          value: 'us',\n        },\n      ],\n    })\n    expect(res.length).toBe(4)\n  })\n\n  test('should search users with endsWith', async () => {\n    const res = await adapter.findMany<User>({\n      model: 'user',\n      where: [\n        {\n          field: 'name',\n          operator: 'ends_with',\n          value: 'er2',\n        },\n      ],\n    })\n    expect(res.length).toBe(4)\n  })\n\n  test.skipIf(opts.skipGenerateIdTest)('should prefer generateId if provided', async () => {\n    const customAdapter = await opts.getAdapter({\n      advanced: {\n        generateId: () => 'mocked-id',\n      },\n    })\n\n    const res = await customAdapter.create({\n      model: 'user',\n      data: {\n        id: '1',\n        name: 'user4',\n        email: 'user4@email.com',\n        emailVerified: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    })\n\n    expect(res.id).toBe('mocked-id')\n  })\n}\n"],"names":["generateId","expect","test","runAdapterTest","opts","adapter","getAdapter","user","id","name","email","emailVerified","createdAt","Date","updatedAt","res","create","model","data","toEqual","findOne","where","field","value","select","newEmail","update","toMatchObject","findMany","length","toBe","newUser","operator","toBeGreaterThanOrEqual","token","session","userId","expiresAt","resToken","sortBy","direction","res2","limit","updateMany","updatedUser","delete","findRes","toBeNull","findResFirst","deleteMany","skipIf","skipGenerateIdTest","customAdapter","advanced"],"mappings":"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"}
{"version":3,"sources":["../../../../src/adapter/dev/bin/run.ts"],"sourcesContent":["import { betterAuth } from 'better-auth'\nimport { payloadAdapter } from '../..'\nimport { getPayload } from '../../dev/index'\nimport { generateSchema } from '../../generate-schema'\nimport { getPayloadPath } from '../../generate-schema/utils'\n\nconst PAYLOAD_TEST_DIR_PATH = getPayloadPath('./test/test_payload1')\nconst PAYLOAD_TEST_DIR_PATH2 = getPayloadPath('./test/test_payload2')\nconst PAYLOAD_TEST_DIR_PATH3 = getPayloadPath('./test/test_payload3')\n\nconst auth = betterAuth({\n  database: payloadAdapter(await getPayload()),\n  emailAndPassword: {\n    enabled: true,\n  },\n})\n\nawait generateSchema(\n  {\n    plugins: [\n      {\n        id: 'admin',\n        schema: {\n          admin: {\n            fields: {\n              name: {\n                type: 'string',\n                required: true,\n              },\n              id: {\n                type: 'string',\n                required: true,\n              },\n              isAdmin: {\n                type: 'boolean',\n                required: true,\n              },\n              status: {\n                type: 'string',\n                required: false,\n              },\n              date: {\n                type: 'date',\n              },\n              number: {\n                type: 'number',\n              },\n              str_array: {\n                type: 'string[]',\n              },\n              num_array: {\n                type: 'number[]',\n              },\n            },\n          },\n        },\n      },\n    ],\n  },\n  {\n    outputDir: PAYLOAD_TEST_DIR_PATH3,\n  },\n)\n  .then(() => {\n    process.exit(0)\n  })\n  .catch((err) => {\n    console.error(err)\n    process.exit(1)\n  })\n"],"names":["betterAuth","payloadAdapter","getPayload","generateSchema","getPayloadPath","PAYLOAD_TEST_DIR_PATH","PAYLOAD_TEST_DIR_PATH2","PAYLOAD_TEST_DIR_PATH3","auth","database","emailAndPassword","enabled","plugins","id","schema","admin","fields","name","type","required","isAdmin","status","date","number","str_array","num_array","outputDir","then","process","exit","catch","err","console","error"],"mappings":"AAAA,SAASA,UAAU,QAAQ,cAAa;AACxC,SAASC,cAAc,QAAQ,QAAO;AACtC,SAASC,UAAU,QAAQ,kBAAiB;AAC5C,SAASC,cAAc,QAAQ,wBAAuB;AACtD,SAASC,cAAc,QAAQ,8BAA6B;AAE5D,MAAMC,wBAAwBD,eAAe;AAC7C,MAAME,yBAAyBF,eAAe;AAC9C,MAAMG,yBAAyBH,eAAe;AAE9C,MAAMI,OAAOR,WAAW;IACtBS,UAAUR,eAAe,MAAMC;IAC/BQ,kBAAkB;QAChBC,SAAS;IACX;AACF;AAEA,MAAMR,eACJ;IACES,SAAS;QACP;YACEC,IAAI;YACJC,QAAQ;gBACNC,OAAO;oBACLC,QAAQ;wBACNC,MAAM;4BACJC,MAAM;4BACNC,UAAU;wBACZ;wBACAN,IAAI;4BACFK,MAAM;4BACNC,UAAU;wBACZ;wBACAC,SAAS;4BACPF,MAAM;4BACNC,UAAU;wBACZ;wBACAE,QAAQ;4BACNH,MAAM;4BACNC,UAAU;wBACZ;wBACAG,MAAM;4BACJJ,MAAM;wBACR;wBACAK,QAAQ;4BACNL,MAAM;wBACR;wBACAM,WAAW;4BACTN,MAAM;wBACR;wBACAO,WAAW;4BACTP,MAAM;wBACR;oBACF;gBACF;YACF;QACF;KACD;AACH,GACA;IACEQ,WAAWnB;AACb,GAECoB,IAAI,CAAC;IACJC,QAAQC,IAAI,CAAC;AACf,GACCC,KAAK,CAAC,CAACC;IACNC,QAAQC,KAAK,CAACF;IACdH,QAAQC,IAAI,CAAC;AACf"}
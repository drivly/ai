{"version":3,"sources":["../../../src/plugin/lib/get-required-collection-slugs.ts"],"sourcesContent":["import { getAuthTables } from 'better-auth/db'\nimport type { PayloadBetterAuthPluginOptions, SanitizedBetterAuthOptions } from '..'\n\n/**\n * Determines which collections are required based on the BetterAuth options and plugins\n */\nexport function getRequiredCollectionSlugs({\n  logTables,\n  pluginOptions,\n  sanitizedBAOptions,\n}: {\n  logTables: boolean\n  pluginOptions: PayloadBetterAuthPluginOptions\n  sanitizedBAOptions: SanitizedBetterAuthOptions\n}) {\n  // Always include the base required collections (User, Account, Session, Verification)\n  const userCollectionSlug = pluginOptions.users?.slug ?? 'users'\n  const accountCollectionSlug = pluginOptions.accounts?.slug ?? 'accounts'\n  const sessionCollectionSlug = pluginOptions.sessions?.slug ?? 'sessions'\n  const verificationCollectionSlug = pluginOptions.verifications?.slug ?? 'verifications'\n\n  const requiredCollectionSlugs = new Set([\n    userCollectionSlug,\n    accountCollectionSlug,\n    sessionCollectionSlug,\n    verificationCollectionSlug,\n  ])\n\n  // If we have better auth options, use getAuthTables to determine additional tables needed\n  if (sanitizedBAOptions) {\n    try {\n      // Get the tables required by the auth configuration\n      const tables = getAuthTables({\n        ...sanitizedBAOptions,\n      })\n\n      const plugins = sanitizedBAOptions.plugins ?? []\n      if (logTables) {\n        console.log(\n          'Better Auth plugins:',\n          plugins.map((plugin) => plugin.id),\n        )\n        console.log(\n          'Better Auth tables required:',\n          Object.keys(tables).map((key) => tables[key].modelName),\n        )\n      }\n\n      // Add all table slugs to the required collections set\n      Object.values(tables).forEach((table) => {\n        if (table.modelName) {\n          requiredCollectionSlugs.add(table.modelName)\n        }\n      })\n    } catch (error) {\n      console.error('Error determining required auth tables:', error)\n      console.warn('Falling back to base collections only')\n\n      // Log the plugins that were attempted to be used\n      if (sanitizedBAOptions.plugins?.length ?? 0 > 0) {\n        console.warn(\n          'Plugins that may have caused the error:',\n          sanitizedBAOptions.plugins?.map((plugin) => {\n            // Type-safe way to get plugin identification\n            return typeof plugin === 'object' && plugin !== null && 'name' in plugin\n              ? plugin.name\n              : 'unnamed plugin'\n          }),\n        )\n      }\n    }\n  }\n\n  // if (enable_debug_logs) {\n  //   console.log('Required collection slugs: ', Array.from(requiredCollectionSlugs))\n  // }\n\n  return requiredCollectionSlugs\n}\n"],"names":["getAuthTables","getRequiredCollectionSlugs","logTables","pluginOptions","sanitizedBAOptions","userCollectionSlug","users","slug","accountCollectionSlug","accounts","sessionCollectionSlug","sessions","verificationCollectionSlug","verifications","requiredCollectionSlugs","Set","tables","plugins","console","log","map","plugin","id","Object","keys","key","modelName","values","forEach","table","add","error","warn","length","name"],"mappings":"AAAA,SAASA,aAAa,QAAQ,iBAAgB;AAG9C;;CAEC,GACD,OAAO,SAASC,2BAA2B,EACzCC,SAAS,EACTC,aAAa,EACbC,kBAAkB,EAKnB;IACC,sFAAsF;IACtF,MAAMC,qBAAqBF,cAAcG,KAAK,EAAEC,QAAQ;IACxD,MAAMC,wBAAwBL,cAAcM,QAAQ,EAAEF,QAAQ;IAC9D,MAAMG,wBAAwBP,cAAcQ,QAAQ,EAAEJ,QAAQ;IAC9D,MAAMK,6BAA6BT,cAAcU,aAAa,EAAEN,QAAQ;IAExE,MAAMO,0BAA0B,IAAIC,IAAI;QACtCV;QACAG;QACAE;QACAE;KACD;IAED,0FAA0F;IAC1F,IAAIR,oBAAoB;QACtB,IAAI;YACF,oDAAoD;YACpD,MAAMY,SAAShB,cAAc;gBAC3B,GAAGI,kBAAkB;YACvB;YAEA,MAAMa,UAAUb,mBAAmBa,OAAO,IAAI,EAAE;YAChD,IAAIf,WAAW;gBACbgB,QAAQC,GAAG,CACT,wBACAF,QAAQG,GAAG,CAAC,CAACC,SAAWA,OAAOC,EAAE;gBAEnCJ,QAAQC,GAAG,CACT,gCACAI,OAAOC,IAAI,CAACR,QAAQI,GAAG,CAAC,CAACK,MAAQT,MAAM,CAACS,IAAI,CAACC,SAAS;YAE1D;YAEA,sDAAsD;YACtDH,OAAOI,MAAM,CAACX,QAAQY,OAAO,CAAC,CAACC;gBAC7B,IAAIA,MAAMH,SAAS,EAAE;oBACnBZ,wBAAwBgB,GAAG,CAACD,MAAMH,SAAS;gBAC7C;YACF;QACF,EAAE,OAAOK,OAAO;YACdb,QAAQa,KAAK,CAAC,2CAA2CA;YACzDb,QAAQc,IAAI,CAAC;YAEb,iDAAiD;YACjD,IAAI5B,mBAAmBa,OAAO,EAAEgB,UAAU,IAAI,GAAG;gBAC/Cf,QAAQc,IAAI,CACV,2CACA5B,mBAAmBa,OAAO,EAAEG,IAAI,CAACC;oBAC/B,6CAA6C;oBAC7C,OAAO,OAAOA,WAAW,YAAYA,WAAW,QAAQ,UAAUA,SAC9DA,OAAOa,IAAI,GACX;gBACN;YAEJ;QACF;IACF;IAEA,2BAA2B;IAC3B,oFAAoF;IACpF,IAAI;IAEJ,OAAOpB;AACT"}
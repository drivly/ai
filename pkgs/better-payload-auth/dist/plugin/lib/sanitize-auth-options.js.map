{"version":3,"sources":["../../../src/plugin/lib/sanitize-auth-options.ts"],"sourcesContent":["import type { PayloadBetterAuthPluginOptions, SanitizedBetterAuthOptions } from '..'\nimport { supportedBetterAuthPluginIds, betterAuthPluginSlugs, baseCollectionSlugs } from './config'\nimport { ensurePasswordSetBeforeUserCreate } from './ensure-password-set-before-create'\nimport { verifyPassword, hashPassword } from './password'\n\n/**\n * Sanitizes the BetterAuth options\n */\nexport function sanitizeBetterAuthOptions(\n  options: PayloadBetterAuthPluginOptions,\n): SanitizedBetterAuthOptions {\n  const baOptions = options.betterAuthOptions\n  const userCollectionSlug = options.users?.slug ?? 'users'\n  const accountCollectionSlug = options.accounts?.slug ?? 'accounts'\n  const sessionCollectionSlug = options.sessions?.slug ?? 'sessions'\n  const verificationCollectionSlug = options.verifications?.slug ?? 'verifications'\n\n  const res: SanitizedBetterAuthOptions = { ...baOptions }\n\n  res.user = {\n    ...(baOptions?.user ?? {}),\n    modelName: userCollectionSlug,\n  }\n\n  res.account = {\n    ...(baOptions?.account ?? {}),\n    modelName: accountCollectionSlug,\n    fields: {\n      userId: 'user',\n    },\n  }\n\n  res.session = {\n    ...(baOptions?.session ?? {}),\n    modelName: sessionCollectionSlug,\n    fields: {\n      userId: 'user',\n    },\n  }\n\n  res.verification = {\n    ...(baOptions?.verification ?? {}),\n    modelName: verificationCollectionSlug,\n  }\n\n  res.emailAndPassword = {\n    ...(baOptions?.emailAndPassword ?? {}),\n    enabled: baOptions?.emailAndPassword?.enabled ?? true,\n  }\n\n  if (res.emailAndPassword.enabled) {\n    res.emailAndPassword.password = {\n      ...(res.emailAndPassword.password ?? {}),\n      verify: async ({ hash, password }) => {\n        return await verifyPassword({ hash, password })\n      },\n      hash: async (password) => {\n        return await hashPassword(password)\n      },\n    }\n  }\n\n  // eslint-disable-next-line no-extra-boolean-cast\n  if (Boolean(options.users?.blockFirstBetterAuthVerificationEmail)) {\n    const originalSendVerificationEmail = baOptions?.emailVerification?.sendVerificationEmail\n    // Only override sendVerificationEmail if the developer provided their own implementation\n    if (typeof originalSendVerificationEmail === 'function') {\n      res.emailVerification = res?.emailVerification || {}\n      res.emailVerification.sendVerificationEmail = async (data, request) => {\n        try {\n          const user = data.user\n          const createdAt = new Date(user.createdAt)\n          const now = new Date()\n          // If the user was created less than one minute ago, don't send the verification email\n          // as we rely on payload to send the initial email\n          if (now.getTime() - createdAt.getTime() < 60000) {\n            return\n          }\n\n          await originalSendVerificationEmail(data, request)\n        } catch (error) {\n          console.error('Error sending verification email:', error)\n        }\n      }\n    }\n  }\n\n  ensurePasswordSetBeforeUserCreate(res)\n\n  if (res.plugins) {\n    try {\n      const supportedPlugins = res.plugins.filter((plugin) => {\n        return Object.values(supportedBetterAuthPluginIds).includes(\n          plugin.id as (typeof supportedBetterAuthPluginIds)[keyof typeof supportedBetterAuthPluginIds],\n        )\n      })\n\n      if (supportedPlugins.length !== res.plugins.length) {\n        console.warn(\n          `Unsupported BetterAuth plugins detected: ${res.plugins\n            .filter(\n              (p) =>\n                !Object.values(supportedBetterAuthPluginIds).includes(\n                  p.id as (typeof supportedBetterAuthPluginIds)[keyof typeof supportedBetterAuthPluginIds],\n                ),\n            )\n            .map((p) => p.id)\n            .join(', ')}. Supported plugins are: ${Object.values(supportedBetterAuthPluginIds).join(\n            ', ',\n          )}. \n            These plugins will be ignored.`,\n        )\n      }\n\n      // Add the schema to the supported plugins\n      if (supportedPlugins.length > 0) {\n        supportedPlugins.forEach((plugin) => {\n          const pluginId =\n            plugin.id as (typeof supportedBetterAuthPluginIds)[keyof typeof supportedBetterAuthPluginIds]\n\n          switch (pluginId) {\n            case supportedBetterAuthPluginIds.admin:\n              const adminPlugin = plugin as any\n              if (!adminPlugin.adminRoles)\n                adminPlugin.adminRoles = options.users?.adminRoles ?? ['admin']\n              adminPlugin.adminRoles = options.users?.adminRoles ?? ['admin']\n              Object.assign(plugin, adminPlugin)\n              break\n            case supportedBetterAuthPluginIds.apiKey:\n              const apiKeyPlugin = plugin as any\n              if (!apiKeyPlugin.schema) apiKeyPlugin.schema = {}\n              if (!apiKeyPlugin.schema.apikey) apiKeyPlugin.schema.apikey = {}\n              apiKeyPlugin.schema.apikey = {\n                ...apiKeyPlugin.schema.apikey,\n                modelName: betterAuthPluginSlugs.apiKeys,\n                fields: {\n                  ...(plugin.schema?.apikey?.fields ?? {}),\n                  userId: {\n                    ...(plugin.schema?.apikey?.fields?.userId ?? {}),\n                    fieldName: 'user',\n                  },\n                },\n              }\n              Object.assign(plugin, apiKeyPlugin)\n              break\n            case supportedBetterAuthPluginIds.passkey:\n              const passkeyPlugin = plugin as any\n              if (!passkeyPlugin.schema) passkeyPlugin.schema = {}\n              if (!passkeyPlugin.schema.passkey) passkeyPlugin.schema.passkey = {}\n              passkeyPlugin.schema.passkey = {\n                ...passkeyPlugin.schema.passkey,\n                modelName: betterAuthPluginSlugs.passkeys,\n                fields: {\n                  ...(passkeyPlugin.schema.passkey.fields || {}),\n                  userId: {\n                    ...passkeyPlugin.schema.passkey.fields.userId,\n                    fieldName: 'user',\n                  },\n                },\n              }\n              Object.assign(plugin, passkeyPlugin)\n              break\n            case supportedBetterAuthPluginIds.organization:\n              const organizationPlugin = plugin as any\n              if (!organizationPlugin.schema) organizationPlugin.schema = {}\n              if (!organizationPlugin.schema.organization) organizationPlugin.schema.member = {}\n              if (!organizationPlugin.schema.invitation) organizationPlugin.schema.invitation = {}\n              if (!organizationPlugin.schema.team) organizationPlugin.schema.team = {}\n              if (!organizationPlugin.schema.session) organizationPlugin.schema.session = {}\n              organizationPlugin.schema = {\n                ...organizationPlugin.schema,\n                organization: {\n                  ...organizationPlugin.schema.organization,\n                  modelName: betterAuthPluginSlugs.organizations,\n                  fields: {\n                    ...(organizationPlugin.schema.organization.fields ?? {}),\n                  },\n                },\n                member: {\n                  ...organizationPlugin.schema.member,\n                  modelName: betterAuthPluginSlugs.members,\n                  fields: {\n                    ...(organizationPlugin.schema.member.fields ?? {}),\n                    organizationId: {\n                      ...(organizationPlugin.schema.member.fields?.organizationId ?? {}),\n                      fieldName: 'organization',\n                    },\n                    userId: {\n                      ...(organizationPlugin.schema.member.fields?.userId ?? {}),\n                      fieldName: 'user',\n                    },\n                    teamId: {\n                      ...(organizationPlugin.schema.member.fields?.teamId ?? {}),\n                      fieldName: 'team',\n                    },\n                  },\n                },\n                invitation: {\n                  ...organizationPlugin.schema.invitation,\n                  modelName: betterAuthPluginSlugs.invitations,\n                  fields: {\n                    ...(organizationPlugin.schema.invitation.fields ?? {}),\n                    organizationId: {\n                      ...(organizationPlugin.schema.invitation.fields?.organizationId ?? {}),\n                      fieldName: 'organization',\n                    },\n                    inviterId: {\n                      ...(organizationPlugin.schema.invitation.fields?.inviterId ?? {}),\n                      fieldName: 'inviter',\n                    },\n                    teamId: {\n                      ...(organizationPlugin.schema.invitation.fields?.teamId ?? {}),\n                      fieldName: 'team',\n                    },\n                  },\n                },\n                team: {\n                  ...organizationPlugin.schema.team,\n                  modelName: betterAuthPluginSlugs.teams,\n                  fields: {\n                    ...(organizationPlugin.schema.team.fields ?? {}),\n                    organizationId: {\n                      ...(organizationPlugin.schema.team.fields?.organizationId ?? {}),\n                      fieldName: 'organization',\n                    },\n                  },\n                },\n                session: {\n                  ...organizationPlugin.schema.session,\n                  modelName: baseCollectionSlugs.sessions,\n                  fields: {\n                    ...(organizationPlugin.schema.session.fields ?? {}),\n                    activeOrganizationId: {\n                      ...(organizationPlugin.schema.session.fields?.activeOrganizationId ?? {}),\n                      fieldName: 'activeOrganization',\n                    },\n                  },\n                },\n              }\n              Object.assign(plugin, organizationPlugin)\n              break\n            case supportedBetterAuthPluginIds.sso:\n              const ssoPlugin = plugin as any\n              if (!ssoPlugin.schema) ssoPlugin.schema = {}\n              if (!ssoPlugin.schema.sso) ssoPlugin.schema.sso = {}\n              ssoPlugin.schema.sso = {\n                ...ssoPlugin.schema.sso,\n                modelName: betterAuthPluginSlugs.ssoProviders,\n                fields: {\n                  ...(ssoPlugin.schema.sso.fields ?? {}),\n                  userId: {\n                    ...(ssoPlugin.schema.sso.fields?.userId ?? {}),\n                    fieldName: 'user',\n                  },\n                },\n              }\n              Object.assign(plugin, ssoPlugin)\n              break\n            case supportedBetterAuthPluginIds.oidc:\n              const oidcPlugin = plugin as any\n              if (!oidcPlugin.schema) oidcPlugin.schema = {}\n              if (!oidcPlugin.schema.oauthApplication) oidcPlugin.schema.oauthApplication = {}\n              if (!oidcPlugin.schema.oauthAccessToken) oidcPlugin.schema.oauthAccessToken = {}\n              if (!oidcPlugin.schema.oauthConsent) oidcPlugin.schema.oauthConsent = {}\n              oidcPlugin.schema = {\n                ...oidcPlugin.schema,\n                oauthApplication: {\n                  ...oidcPlugin.schema.oauthApplication,\n                  modelName: betterAuthPluginSlugs.oauthApplications,\n                  fields: {\n                    ...(oidcPlugin.schema.oauthApplication.fields ?? {}),\n                    userId: {\n                      ...(oidcPlugin.schema.oauthApplication.fields?.userId ?? {}),\n                      fieldName: 'user',\n                    },\n                  },\n                },\n                oauthAccessToken: {\n                  ...oidcPlugin.schema.oauthAccessToken,\n                  modelName: betterAuthPluginSlugs.oauthAccessTokens,\n                  fields: {\n                    ...(oidcPlugin.schema.oauthAccessToken.fields ?? {}),\n                    userId: {\n                      ...(oidcPlugin.schema.oauthAccessToken.fields?.userId ?? {}),\n                      fieldName: 'user',\n                    },\n                    clientId: {\n                      ...(oidcPlugin.schema.oauthAccessToken.fields?.clientId ?? {}),\n                      fieldName: 'client',\n                    },\n                  },\n                },\n                oauthConsent: {\n                  ...oidcPlugin.schema.oauthConsent,\n                  modelName: betterAuthPluginSlugs.oauthConsents,\n                  fields: {\n                    ...(oidcPlugin.schema.oauthConsent.fields ?? {}),\n                    userId: {\n                      ...(oidcPlugin.schema.oauthConsent.fields?.userId ?? {}),\n                      fieldName: 'user',\n                    },\n                    clientId: {\n                      ...(oidcPlugin.schema.oauthConsent.fields?.clientId ?? {}),\n                      fieldName: 'client',\n                    },\n                  },\n                },\n              }\n              Object.assign(plugin, oidcPlugin)\n              break\n            case supportedBetterAuthPluginIds.genericOAuth:\n              const genericOAuthPlugin = plugin as any\n              // The genericOAuth plugin requires proper account integration for storing\n              // OAuth tokens and provider information\n\n              // Ensure the plugin has the necessary schema structure\n              if (!genericOAuthPlugin.schema) genericOAuthPlugin.schema = {}\n\n              // Set up the account schema - this is where OAuth tokens and provider info are stored\n              if (!genericOAuthPlugin.schema.account) genericOAuthPlugin.schema.account = {}\n              genericOAuthPlugin.schema.account = {\n                ...genericOAuthPlugin.schema.account,\n                modelName: baseCollectionSlugs.accounts,\n                fields: {\n                  ...(genericOAuthPlugin.schema.account.fields ?? {}),\n                  userId: {\n                    ...(genericOAuthPlugin.schema.account.fields?.userId ?? {}),\n                    fieldName: 'user',\n                  },\n                  // Make sure these fields exist for OAuth token storage\n                  providerId: {\n                    ...(genericOAuthPlugin.schema.account.fields?.providerId ?? {}),\n                  },\n                  accessToken: {\n                    ...(genericOAuthPlugin.schema.account.fields?.accessToken ?? {}),\n                  },\n                  refreshToken: {\n                    ...(genericOAuthPlugin.schema.account.fields?.refreshToken ?? {}),\n                  },\n                  accessTokenExpiresAt: {\n                    ...(genericOAuthPlugin.schema.account.fields?.accessTokenExpiresAt ?? {}),\n                  },\n                },\n              }\n              break\n            case supportedBetterAuthPluginIds.stripe:\n              const stripePlugin = plugin as any\n              if (!stripePlugin.schema) stripePlugin.schema = {}\n              if (!stripePlugin.schema.subscription) stripePlugin.schema.subscription = {}\n              if (!stripePlugin.schema.user) stripePlugin.schema.user = {}\n\n              // Configure the subscription schema\n              stripePlugin.schema.subscription = {\n                ...stripePlugin.schema.subscription,\n                modelName: betterAuthPluginSlugs.subscriptions,\n                fields: {\n                  ...(stripePlugin.schema.subscription.fields ?? {}),\n                  id: {\n                    ...(stripePlugin.schema.subscription.fields?.id ?? {}),\n                  },\n                  plan: {\n                    ...(stripePlugin.schema.subscription.fields?.plan ?? {}),\n                  },\n                  referenceId: {\n                    ...(stripePlugin.schema.subscription.fields?.referenceId ?? {}),\n                    fieldName: 'user',\n                  },\n                  stripeCustomerId: {\n                    ...(stripePlugin.schema.subscription.fields?.stripeCustomerId ?? {}),\n                  },\n                  stripeSubscriptionId: {\n                    ...(stripePlugin.schema.subscription.fields?.stripeSubscriptionId ?? {}),\n                  },\n                  status: {\n                    ...(stripePlugin.schema.subscription.fields?.status ?? {}),\n                  },\n                  periodStart: {\n                    ...(stripePlugin.schema.subscription.fields?.periodStart ?? {}),\n                  },\n                  periodEnd: {\n                    ...(stripePlugin.schema.subscription.fields?.periodEnd ?? {}),\n                  },\n                  cancelAtPeriodEnd: {\n                    ...(stripePlugin.schema.subscription.fields?.cancelAtPeriodEnd ?? {}),\n                  },\n                  seats: {\n                    ...(stripePlugin.schema.subscription.fields?.seats ?? {}),\n                  },\n                  trialStart: {\n                    ...(stripePlugin.schema.subscription.fields?.trialStart ?? {}),\n                  },\n                  trialEnd: {\n                    ...(stripePlugin.schema.subscription.fields?.trialEnd ?? {}),\n                  },\n                },\n              }\n\n              // Configure the user schema to include stripeCustomerId\n              stripePlugin.schema.user = {\n                ...stripePlugin.schema.user,\n                modelName: baseCollectionSlugs.users,\n                fields: {\n                  ...(stripePlugin.schema.user.fields ?? {}),\n                  stripeCustomerId: {\n                    ...(stripePlugin.schema.user.fields?.stripeCustomerId ?? {}),\n                  },\n                },\n              }\n\n              Object.assign(plugin, stripePlugin)\n              break\n            default:\n              break\n          }\n        })\n      }\n      // Make sure only the supported plugins are used\n      Object.assign(res.plugins, supportedPlugins)\n    } catch (error) {\n      throw new Error(`Error sanitizing BetterAuth plugins: ${error}`)\n    }\n  }\n\n  return res\n}\n"],"names":["supportedBetterAuthPluginIds","betterAuthPluginSlugs","baseCollectionSlugs","ensurePasswordSetBeforeUserCreate","verifyPassword","hashPassword","sanitizeBetterAuthOptions","options","baOptions","betterAuthOptions","userCollectionSlug","users","slug","accountCollectionSlug","accounts","sessionCollectionSlug","sessions","verificationCollectionSlug","verifications","res","user","modelName","account","fields","userId","session","verification","emailAndPassword","enabled","password","verify","hash","Boolean","blockFirstBetterAuthVerificationEmail","originalSendVerificationEmail","emailVerification","sendVerificationEmail","data","request","createdAt","Date","now","getTime","error","console","plugins","supportedPlugins","filter","plugin","Object","values","includes","id","length","warn","p","map","join","forEach","pluginId","admin","adminPlugin","adminRoles","assign","apiKey","apiKeyPlugin","schema","apikey","apiKeys","fieldName","passkey","passkeyPlugin","passkeys","organization","organizationPlugin","member","invitation","team","organizations","members","organizationId","teamId","invitations","inviterId","teams","activeOrganizationId","sso","ssoPlugin","ssoProviders","oidc","oidcPlugin","oauthApplication","oauthAccessToken","oauthConsent","oauthApplications","oauthAccessTokens","clientId","oauthConsents","genericOAuth","genericOAuthPlugin","providerId","accessToken","refreshToken","accessTokenExpiresAt","stripe","stripePlugin","subscription","subscriptions","plan","referenceId","stripeCustomerId","stripeSubscriptionId","status","periodStart","periodEnd","cancelAtPeriodEnd","seats","trialStart","trialEnd","Error"],"mappings":"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"}
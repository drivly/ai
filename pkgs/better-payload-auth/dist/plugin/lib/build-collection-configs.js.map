{"version":3,"sources":["../../../src/plugin/lib/build-collection-configs.ts"],"sourcesContent":["import type { PayloadBetterAuthPluginOptions, SanitizedBetterAuthOptions } from '..'\nimport { baseCollectionSlugs, betterAuthPluginSlugs } from './config'\nimport { betterAuthStrategy } from './auth-strategy'\nimport { getAfterLogoutHook } from '../collections/users/hooks/after-logout'\nimport { getRefreshTokenEndpoint } from '../collections/users/endpoints/refresh-token'\nimport {\n  isAdminOrCurrentUserUpdateWithAllowedFields,\n  isAdminOrCurrentUserWithRoles,\n  isAdminWithRoles,\n} from './payload-access'\nimport { cleanUpUserAfterDelete } from '../collections/users/hooks/clean-up-user-after-delete'\nimport { getSyncPasswordToUserHook } from '../collections/accounts/hooks/sync-password-to-user'\nimport { getSyncAccountHook } from '../collections/users/hooks/sync-account'\nimport { onVerifiedChange } from '../collections/users/hooks/on-verified-change'\nimport { getAfterLoginHook } from '../collections/users/hooks/after-login'\nimport { getBeforeLoginHook } from '../collections/users/hooks/before-login'\nimport { CollectionConfig, Field } from 'payload'\n/**\n * Builds the required collections based on the BetterAuth options and plugins\n */\nexport function buildCollectionConfigs({\n  incomingCollections,\n  requiredCollectionSlugs,\n  pluginOptions,\n  sanitizedBAOptions,\n}: {\n  incomingCollections: CollectionConfig[]\n  requiredCollectionSlugs: Set<string>\n  pluginOptions: PayloadBetterAuthPluginOptions\n  sanitizedBAOptions: SanitizedBetterAuthOptions\n}): CollectionConfig[] {\n  const userSlug = pluginOptions.users?.slug ?? baseCollectionSlugs.users\n  const accountSlug = pluginOptions.accounts?.slug ?? baseCollectionSlugs.accounts\n  const sessionSlug = pluginOptions.sessions?.slug ?? baseCollectionSlugs.sessions\n  const verificationSlug = pluginOptions.verifications?.slug ?? baseCollectionSlugs.verifications\n  const baPlugins = sanitizedBAOptions.plugins ?? null\n  const adminRoles = pluginOptions.users?.adminRoles ?? ['admin']\n\n  const getTimestampFields = ({\n    saveUpdatedAtToJWT = true,\n    saveCreatedAtToJWT = true,\n  }: {\n    saveUpdatedAtToJWT?: boolean\n    saveCreatedAtToJWT?: boolean\n  } = {}): Field[] => {\n    return [\n      {\n        name: 'updatedAt',\n        type: 'date',\n        saveToJWT: saveUpdatedAtToJWT,\n        admin: {\n          disableBulkEdit: true,\n          hidden: true,\n        },\n        index: true,\n        label: ({ t }) => t('general:updatedAt'),\n      },\n      {\n        name: 'createdAt',\n        saveToJWT: saveCreatedAtToJWT,\n        admin: {\n          disableBulkEdit: true,\n          hidden: true,\n        },\n        type: 'date',\n        index: true,\n        label: ({ t }) => t('general:createdAt'),\n      },\n    ]\n  }\n\n  const enhancedCollections: CollectionConfig[] = []\n\n  requiredCollectionSlugs.forEach((slug) => {\n    switch (slug as keyof typeof baseCollectionSlugs | keyof typeof betterAuthPluginSlugs) {\n      case baseCollectionSlugs.users:\n        const existingUserCollection = incomingCollections.find(\n          (collection) => collection.slug === userSlug,\n        ) as CollectionConfig | undefined\n        const allowedFields = pluginOptions.users?.allowedFields ?? ['name']\n        let usersCollection: CollectionConfig = {\n          ...existingUserCollection,\n          slug: userSlug,\n          admin: {\n            defaultColumns: ['email'],\n            useAsTitle: 'email',\n            ...existingUserCollection?.admin,\n            hidden: pluginOptions.users?.hidden ?? false,\n          },\n          access: {\n            admin: ({ req }) => adminRoles.includes((req.user?.role as string) ?? 'user'),\n            read: isAdminOrCurrentUserWithRoles({ adminRoles, idField: 'id' }),\n            create: isAdminWithRoles({ adminRoles }),\n            delete: isAdminOrCurrentUserWithRoles({ adminRoles, idField: 'id' }),\n            update: isAdminOrCurrentUserUpdateWithAllowedFields({\n              allowedFields,\n              adminRoles,\n              userSlug,\n            }),\n            ...(existingUserCollection?.access ?? {}),\n          },\n          endpoints: [\n            ...(existingUserCollection?.endpoints ? existingUserCollection.endpoints : []),\n            getRefreshTokenEndpoint({ userSlug }),\n          ],\n          hooks: {\n            beforeChange: [\n              ...(existingUserCollection?.hooks?.beforeChange ?? []),\n              onVerifiedChange,\n            ],\n            afterChange: [\n              ...(existingUserCollection?.hooks?.afterChange ?? []),\n              getSyncAccountHook({\n                userSlug,\n                accountSlug,\n              }),\n            ],\n            beforeLogin: [\n              ...(existingUserCollection?.hooks?.beforeLogin ?? []),\n              getBeforeLoginHook(),\n            ],\n            afterLogin: [\n              ...(existingUserCollection?.hooks?.afterLogin ?? []),\n              getAfterLoginHook({\n                sessionsCollectionSlug: sessionSlug,\n                usersCollectionSlug: userSlug,\n              }),\n            ],\n            afterLogout: [\n              ...(existingUserCollection?.hooks?.afterLogout ?? []),\n              getAfterLogoutHook({ sessionsCollectionSlug: sessionSlug }),\n            ],\n            afterDelete: [\n              ...(existingUserCollection?.hooks?.afterDelete ?? []),\n              (args) => cleanUpUserAfterDelete(args as any),\n            ],\n          },\n          auth: {\n            ...(existingUserCollection && typeof existingUserCollection.auth === 'object'\n              ? existingUserCollection.auth\n              : {}),\n            //disableLocalStrategy: false,\n            strategies: [betterAuthStrategy(adminRoles, userSlug)],\n          },\n          fields: [\n            ...(existingUserCollection?.fields ?? []),\n            {\n              name: 'betterAuthAdminButtons',\n              type: 'ui',\n              admin: {\n                position: 'sidebar',\n                components: {\n                  Field: {\n                    path: '@drivly/better-payload-auth/plugin/client#AdminButtons',\n                    clientProps: () => {\n                      return {\n                        userSlug,\n                      }\n                    },\n                  },\n                },\n                condition: () => {\n                  // Only show the impersonate button if the admin plugin is enabled\n                  return (baPlugins && baPlugins.some((plugin) => plugin.id === 'admin')) ?? false\n                },\n              },\n            },\n            {\n              name: 'name',\n              type: 'text',\n              label: 'Name',\n              saveToJWT: true,\n              admin: {\n                description: 'Users chosen display name',\n              },\n            },\n            {\n              name: 'email',\n              type: 'text',\n              required: true,\n              unique: true,\n              index: true,\n              label: 'Email',\n              admin: {\n                description: 'The email of the user',\n              },\n            },\n            {\n              name: 'emailVerified',\n              type: 'checkbox',\n              required: true,\n              defaultValue: false,\n              saveToJWT: true,\n              label: 'Email Verified',\n              admin: {\n                description: 'Whether the email of the user has been verified',\n              },\n            },\n            {\n              name: 'image',\n              type: 'text',\n              label: 'Image',\n              saveToJWT: true,\n              admin: {\n                description: 'The image of the user',\n              },\n            },\n            {\n              name: 'role',\n              type: 'select',\n              required: true,\n              defaultValue: 'user',\n              saveToJWT: true,\n              options: [\n                ...(\n                  pluginOptions.users?.roles ?? [\n                    { label: 'Admin', value: 'admin' },\n                    { label: 'User', value: 'user' },\n                  ]\n                ).map((role) => {\n                  if (typeof role === 'string') {\n                    return {\n                      label: role.charAt(0).toUpperCase() + role.slice(1),\n                      value: role,\n                    }\n                  }\n                  return role\n                }),\n              ],\n              label: 'Role',\n              admin: {\n                description: 'The role of the user',\n              },\n            },\n            ...getTimestampFields({ saveUpdatedAtToJWT: false, saveCreatedAtToJWT: false }),\n          ],\n        }\n        if (baPlugins) {\n          baPlugins.forEach((plugin) => {\n            switch (plugin.id) {\n              case 'two-factor':\n                usersCollection.fields.push({\n                  name: 'twoFactorEnabled',\n                  type: 'checkbox',\n                  defaultValue: false,\n                  label: 'Two Factor Enabled',\n                  admin: {\n                    description: 'Whether the user has two factor authentication enabled',\n                  },\n                })\n                break\n              case 'username':\n                usersCollection.fields.push(\n                  {\n                    name: 'username',\n                    type: 'text',\n                    unique: true,\n                    required: false, // TODO: decide if this should be required, will have to tell users they need to add ui for it.\n                    label: 'Username',\n                    admin: {\n                      description: 'The username of the user',\n                    },\n                  },\n                  {\n                    name: 'displayUsername',\n                    type: 'text',\n                    required: true,\n                    label: 'Display Username',\n                    admin: {\n                      description: 'The display username of the user',\n                    },\n                  },\n                )\n                break\n              case 'anonymous':\n                usersCollection.fields.push({\n                  name: 'isAnonymous',\n                  type: 'checkbox',\n                  defaultValue: false,\n                  label: 'Is Anonymous',\n                  admin: {\n                    description: 'Whether the user is anonymous.',\n                  },\n                })\n                break\n              case 'phone-number':\n                usersCollection.fields.push(\n                  {\n                    name: 'phoneNumber',\n                    type: 'text',\n                    label: 'Phone Number',\n                    admin: {\n                      description: 'The phone number of the user',\n                    },\n                  },\n                  {\n                    name: 'phoneNumberVerified',\n                    type: 'checkbox',\n                    defaultValue: false,\n                    label: 'Phone Number Verified',\n                    admin: {\n                      description: 'Whether the phone number of the user has been verified',\n                    },\n                  },\n                )\n                break\n              case 'admin':\n                usersCollection.fields.push(\n                  {\n                    name: 'banned',\n                    type: 'checkbox',\n                    defaultValue: false,\n                    label: 'Banned',\n                    admin: {\n                      description: 'Whether the user is banned from the platform',\n                    },\n                  },\n                  {\n                    name: 'banReason',\n                    type: 'text',\n                    label: 'Ban Reason',\n                    admin: {\n                      description: 'The reason for the ban',\n                    },\n                  },\n                  {\n                    name: 'banExpires',\n                    type: 'date',\n                    label: 'Ban Expires',\n                    admin: {\n                      description: 'The date and time when the ban will expire',\n                    },\n                  },\n                )\n                break\n              case 'harmony-email':\n                usersCollection.fields.push({\n                  name: 'normalizedEmail',\n                  type: 'text',\n                  required: false,\n                  unique: true,\n                  admin: {\n                    readOnly: true,\n                    description: 'The normalized email of the user',\n                  },\n                })\n                break\n              case 'stripe':\n                usersCollection.fields.push({\n                  name: 'stripeCustomerId',\n                  type: 'text',\n                  label: 'Stripe Customer ID',\n                  admin: {\n                    description: 'The Stripe customer ID associated with this user',\n                  },\n                })\n                break\n              default:\n                break\n            }\n          })\n        }\n\n        if (pluginOptions.users?.collectionOverrides) {\n          usersCollection = pluginOptions.users.collectionOverrides({ collection: usersCollection })\n        }\n\n        enhancedCollections.push(usersCollection)\n        break\n      case baseCollectionSlugs.accounts:\n        const existingAccountCollection = incomingCollections.find(\n          (collection) => collection.slug === accountSlug,\n        ) as CollectionConfig | undefined\n        let accountCollection: CollectionConfig = {\n          slug: accountSlug,\n          admin: {\n            useAsTitle: 'accountId',\n            description: 'Accounts are used to store user accounts for authentication providers',\n            ...existingAccountCollection?.admin,\n            hidden: pluginOptions.accounts?.hidden,\n          },\n          hooks: {\n            afterChange: [\n              ...(existingAccountCollection?.hooks?.afterChange ?? []),\n              getSyncPasswordToUserHook({\n                userSlug,\n                accountSlug,\n              }),\n            ],\n          },\n          access: {\n            create: isAdminWithRoles({ adminRoles }),\n            delete: isAdminWithRoles({ adminRoles }),\n            read: isAdminOrCurrentUserWithRoles({ adminRoles, idField: 'user' }),\n            update: isAdminWithRoles({ adminRoles }),\n            ...(existingAccountCollection?.access ?? {}),\n          },\n          fields: [\n            ...(existingAccountCollection?.fields ?? []),\n            {\n              name: 'user',\n              type: 'relationship',\n              relationTo: userSlug,\n              required: true,\n              index: true,\n              label: 'User',\n              admin: {\n                readOnly: true,\n                description: 'The user that the account belongs to',\n              },\n            },\n            {\n              name: 'accountId',\n              type: 'text',\n              label: 'Account ID',\n              required: true,\n              index: true,\n              admin: {\n                readOnly: true,\n                description:\n                  'The id of the account as provided by the SSO or equal to userId for credential accounts',\n              },\n            },\n            {\n              name: 'providerId',\n              type: 'text',\n              required: true,\n              label: 'Provider ID',\n              admin: {\n                readOnly: true,\n                description: 'The id of the provider as provided by the SSO',\n              },\n            },\n            {\n              name: 'accessToken',\n              type: 'text',\n              label: 'Access Token',\n              admin: {\n                readOnly: true,\n                description: 'The access token of the account. Returned by the provider',\n              },\n            },\n            {\n              name: 'refreshToken',\n              type: 'text',\n              label: 'Refresh Token',\n              admin: {\n                readOnly: true,\n                description: 'The refresh token of the account. Returned by the provider',\n              },\n            },\n            {\n              name: 'accessTokenExpiresAt',\n              type: 'date',\n              label: 'Access Token Expires At',\n              admin: {\n                readOnly: true,\n                description: 'The date and time when the access token will expire',\n              },\n            },\n            {\n              name: 'refreshTokenExpiresAt',\n              type: 'date',\n              label: 'Refresh Token Expires At',\n              admin: {\n                readOnly: true,\n                description: 'The date and time when the refresh token will expire',\n              },\n            },\n            {\n              name: 'scope',\n              type: 'text',\n              label: 'Scope',\n              admin: {\n                readOnly: true,\n                description: 'The scope of the account. Returned by the provider',\n              },\n            },\n            {\n              name: 'idToken',\n              type: 'text',\n              label: 'ID Token',\n              admin: {\n                readOnly: true,\n                description: 'The id token for the account. Returned by the provider',\n              },\n            },\n            {\n              name: 'password',\n              type: 'text',\n              label: 'Password',\n              admin: {\n                readOnly: true,\n                hidden: true,\n                description:\n                  'The hashed password of the account. Mainly used for email and password authentication',\n              },\n            },\n            ...getTimestampFields(),\n          ],\n          ...existingAccountCollection,\n        }\n        if (pluginOptions.accounts?.collectionOverrides) {\n          accountCollection = pluginOptions.accounts.collectionOverrides({\n            collection: accountCollection,\n          })\n        }\n\n        enhancedCollections.push(accountCollection)\n        break\n      case baseCollectionSlugs.sessions:\n        const existingSessionCollection = incomingCollections.find(\n          (collection) => collection.slug === sessionSlug,\n        ) as CollectionConfig | undefined\n        let sessionCollection: CollectionConfig = {\n          slug: sessionSlug,\n          admin: {\n            ...existingSessionCollection?.admin,\n            hidden: pluginOptions.sessions?.hidden,\n            description:\n              'Sessions are active sessions for users. They are used to authenticate users with a session token',\n          },\n          fields: [\n            ...(existingSessionCollection?.fields ?? []),\n            {\n              name: 'user',\n              type: 'relationship',\n              relationTo: userSlug,\n              required: true,\n              saveToJWT: true,\n              index: true,\n              admin: {\n                readOnly: true,\n                description: 'The user that the session belongs to',\n              },\n            },\n            {\n              name: 'token',\n              type: 'text',\n              required: true,\n              unique: true,\n              index: true,\n              saveToJWT: true,\n              label: 'Token',\n              admin: {\n                description: 'The unique session token',\n                readOnly: true,\n              },\n            },\n            {\n              name: 'expiresAt',\n              type: 'date',\n              required: true,\n              label: 'Expires At',\n              saveToJWT: true,\n              admin: {\n                description: 'The date and time when the session will expire',\n                readOnly: true,\n              },\n            },\n            {\n              name: 'ipAddress',\n              type: 'text',\n              label: 'IP Address',\n              saveToJWT: true,\n              admin: {\n                description: 'The IP address of the device',\n                readOnly: true,\n              },\n            },\n            {\n              name: 'userAgent',\n              type: 'text',\n              label: 'User Agent',\n              saveToJWT: true,\n              admin: {\n                description: 'The user agent information of the device',\n                readOnly: true,\n              },\n            },\n            ...getTimestampFields(),\n          ],\n          ...existingSessionCollection,\n        }\n        if (baPlugins) {\n          baPlugins.forEach((plugin) => {\n            switch (plugin.id) {\n              case 'admin':\n                sessionCollection.fields.push({\n                  name: 'impersonatedBy',\n                  type: 'relationship',\n                  relationTo: userSlug,\n                  required: false,\n                  label: 'Impersonated By',\n                  admin: {\n                    readOnly: true,\n                    description: 'The admin who is impersonating this session',\n                  },\n                })\n                break\n              case 'organization':\n                sessionCollection.fields.push({\n                  name: 'activeOrganization',\n                  type: 'relationship',\n                  relationTo: betterAuthPluginSlugs.organizations,\n                  label: 'Active Organization',\n                  admin: {\n                    readOnly: true,\n                    description: 'The currently active organization for the session',\n                  },\n                })\n                break\n              default:\n                break\n            }\n          })\n        }\n\n        if (pluginOptions.sessions?.collectionOverrides) {\n          sessionCollection = pluginOptions.sessions.collectionOverrides({\n            collection: sessionCollection,\n          })\n        }\n\n        enhancedCollections.push(sessionCollection)\n        break\n      case baseCollectionSlugs.verifications:\n        const existingVerificationCollection = incomingCollections.find(\n          (collection) => collection.slug === verificationSlug,\n        )\n        const verificationCollection: CollectionConfig = {\n          slug: verificationSlug,\n          admin: {\n            ...existingVerificationCollection?.admin,\n            hidden: pluginOptions.verifications?.hidden,\n            useAsTitle: 'identifier',\n            description: 'Verifications are used to verify authentication requests',\n          },\n          fields: [\n            ...(existingVerificationCollection?.fields ?? []),\n            {\n              name: 'identifier',\n              type: 'text',\n              required: true,\n              index: true,\n              label: 'Identifier',\n              admin: {\n                description: 'The identifier of the verification request',\n                readOnly: true,\n              },\n            },\n            {\n              name: 'value',\n              type: 'text',\n              required: true,\n              label: 'Value',\n              admin: {\n                description: 'The value to be verified',\n                readOnly: true,\n              },\n            },\n            {\n              name: 'expiresAt',\n              type: 'date',\n              required: true,\n              label: 'Expires At',\n              admin: {\n                description: 'The date and time when the verification request will expire',\n                readOnly: true,\n              },\n            },\n          ],\n          timestamps: true,\n          ...existingVerificationCollection,\n        }\n        enhancedCollections.push(verificationCollection)\n        break\n      case betterAuthPluginSlugs.organizations:\n        const organizationCollection: CollectionConfig = {\n          slug: betterAuthPluginSlugs.organizations,\n          admin: {\n            hidden: pluginOptions.hidePluginCollections ?? false,\n            useAsTitle: 'name',\n            description:\n              'Organizations are groups of users that share access to certain resources.',\n          },\n          fields: [\n            {\n              name: 'name',\n              type: 'text',\n              required: true,\n              label: 'Name',\n              admin: {\n                description: 'The name of the organization.',\n              },\n            },\n            {\n              name: 'slug',\n              type: 'text',\n              unique: true,\n              index: true,\n              label: 'Slug',\n              admin: {\n                description: 'The slug of the organization.',\n              },\n            },\n            {\n              name: 'logo',\n              type: 'text',\n              label: 'Logo',\n              admin: {\n                description: 'The logo of the organization.',\n              },\n            },\n            {\n              name: 'metadata',\n              type: 'json',\n              label: 'Metadata',\n              admin: {\n                description: 'Additional metadata for the organization.',\n              },\n            },\n          ],\n          timestamps: true,\n        }\n        enhancedCollections.push(organizationCollection)\n        break\n      case betterAuthPluginSlugs.members:\n        const memberCollection: CollectionConfig = {\n          slug: betterAuthPluginSlugs.members,\n          admin: {\n            hidden: pluginOptions.hidePluginCollections ?? false,\n            useAsTitle: 'organization',\n            description: 'Members of an organization.',\n          },\n          fields: [\n            {\n              name: 'organization',\n              type: 'relationship',\n              relationTo: betterAuthPluginSlugs.organizations,\n              required: true,\n              index: true,\n              label: 'Organization',\n              admin: {\n                readOnly: true,\n                description: 'The organization that the member belongs to.',\n              },\n            },\n            {\n              name: 'user',\n              type: 'relationship',\n              relationTo: userSlug,\n              required: true,\n              index: true,\n              label: 'User',\n              admin: {\n                readOnly: true,\n                description: 'The user that is a member of the organization.',\n              },\n            },\n            {\n              name: 'team',\n              type: 'relationship',\n              relationTo: betterAuthPluginSlugs.teams,\n              required: false,\n              label: 'Team',\n              admin: {\n                description: 'The team that the member belongs to.',\n              },\n            },\n            {\n              name: 'role',\n              type: 'text',\n              required: true,\n              defaultValue: 'member',\n              label: 'Role',\n              admin: {\n                description: 'The role of the member in the organization.',\n              },\n            },\n          ],\n          timestamps: true,\n        }\n        enhancedCollections.push(memberCollection)\n        break\n      case betterAuthPluginSlugs.invitations:\n        const invitationCollection: CollectionConfig = {\n          slug: betterAuthPluginSlugs.invitations,\n          admin: {\n            hidden: pluginOptions.hidePluginCollections ?? false,\n            useAsTitle: 'email',\n            description: 'Invitations to join an organization',\n          },\n          fields: [\n            {\n              name: 'email',\n              type: 'text',\n              required: true,\n              index: true,\n              label: 'Email',\n              admin: {\n                description: 'The email of the user being invited.',\n                readOnly: true,\n              },\n            },\n            {\n              name: 'inviter',\n              type: 'relationship',\n              relationTo: userSlug,\n              required: true,\n              label: 'Inviter',\n              admin: {\n                description: 'The user who invited the user.',\n                readOnly: true,\n              },\n            },\n            {\n              name: 'organization',\n              type: 'relationship',\n              relationTo: betterAuthPluginSlugs.organizations,\n              required: true,\n              index: true,\n              label: 'Organization',\n              admin: {\n                description: 'The organization that the user is being invited to.',\n                readOnly: true,\n              },\n            },\n            {\n              name: 'role',\n              type: 'text',\n              required: true,\n              label: 'Role',\n              admin: {\n                description: 'The role of the user being invited.',\n                readOnly: true,\n              },\n            },\n            {\n              name: 'status',\n              type: 'text',\n              required: true,\n              defaultValue: 'pending',\n              label: 'Status',\n              admin: {\n                description: 'The status of the invitation.',\n                readOnly: true,\n              },\n            },\n            {\n              name: 'expiresAt',\n              type: 'date',\n              required: true,\n              label: 'Expires At',\n              admin: {\n                description: 'The date and time when the invitation will expire.',\n                readOnly: true,\n              },\n            },\n          ],\n          timestamps: true,\n        }\n        enhancedCollections.push(invitationCollection)\n        break\n      case betterAuthPluginSlugs.teams:\n        const teamCollection: CollectionConfig = {\n          slug: betterAuthPluginSlugs.teams,\n          admin: {\n            hidden: pluginOptions.hidePluginCollections ?? false,\n            useAsTitle: 'name',\n            description: 'Teams are groups of users that share access to certain resources.',\n          },\n          fields: [\n            {\n              name: 'name',\n              type: 'text',\n              required: true,\n              label: 'Name',\n              admin: {\n                description: 'The name of the team.',\n              },\n            },\n            {\n              name: 'organization',\n              type: 'relationship',\n              relationTo: betterAuthPluginSlugs.organizations,\n              required: true,\n              label: 'Organization',\n              admin: {\n                readOnly: true,\n                description: 'The organization that the team belongs to.',\n              },\n            },\n          ],\n          timestamps: true,\n        }\n        enhancedCollections.push(teamCollection)\n        break\n      case betterAuthPluginSlugs.jwks:\n        const jwksCollection: CollectionConfig = {\n          slug: betterAuthPluginSlugs.jwks,\n          admin: {\n            hidden: pluginOptions.hidePluginCollections ?? false,\n            useAsTitle: 'publicKey',\n            description: 'JWKS are used to verify the signature of the JWT token',\n          },\n          fields: [\n            {\n              name: 'publicKey',\n              type: 'text',\n              required: true,\n              index: true,\n              label: 'Public Key',\n              admin: {\n                description: 'The public part of the web key',\n              },\n            },\n            {\n              name: 'privateKey',\n              type: 'text',\n              required: true,\n              label: 'Private Key',\n              admin: {\n                description: 'The private part of the web key',\n              },\n            },\n          ],\n          timestamps: true,\n        }\n        enhancedCollections.push(jwksCollection)\n        break\n      case betterAuthPluginSlugs.apiKeys:\n        const apiKeyCollection: CollectionConfig = {\n          slug: betterAuthPluginSlugs.apiKeys,\n          admin: {\n            hidden: pluginOptions.hidePluginCollections ?? false,\n            useAsTitle: 'name',\n            description: 'API keys are used to authenticate requests to the API.',\n          },\n          fields: [\n            {\n              name: 'name',\n              type: 'text',\n              label: 'Name',\n              admin: {\n                readOnly: true,\n                description: 'The name of the API key.',\n              },\n            },\n            {\n              name: 'start',\n              type: 'text',\n              label: 'Starting Characters',\n              admin: {\n                readOnly: true,\n                description:\n                  'The starting characters of the API key. Useful for showing the first few characters of the API key in the UI for the users to easily identify.',\n              },\n            },\n            {\n              name: 'prefix',\n              type: 'text',\n              label: 'Prefix',\n              admin: {\n                readOnly: true,\n                description: 'The API Key prefix. Stored as plain text.',\n              },\n            },\n            {\n              name: 'key',\n              type: 'text',\n              required: true,\n              label: 'API Key',\n              admin: {\n                readOnly: true,\n                description: 'The hashed API key itself.',\n              },\n            },\n            {\n              name: 'user',\n              type: 'relationship',\n              relationTo: userSlug,\n              required: true,\n              label: 'User',\n              admin: {\n                readOnly: true,\n                description: 'The user associated with the API key.',\n              },\n            },\n            {\n              name: 'refillInterval',\n              type: 'number',\n              label: 'Refill Interval',\n              admin: {\n                readOnly: true,\n                description: 'The interval to refill the key in milliseconds.',\n              },\n            },\n            {\n              name: 'refillAmount',\n              type: 'number',\n              label: 'Refill Amount',\n              admin: {\n                readOnly: true,\n                description: 'The amount to refill the remaining count of the key.',\n              },\n            },\n            {\n              name: 'lastRefillAt',\n              type: 'date',\n              label: 'Last Refill At',\n              admin: {\n                readOnly: true,\n                description: 'The date and time when the key was last refilled.',\n              },\n            },\n            {\n              name: 'enabled',\n              type: 'checkbox',\n              defaultValue: true,\n              label: 'Enabled',\n              admin: {\n                readOnly: true,\n                description: 'Whether the API key is enabled.',\n              },\n            },\n            {\n              name: 'rateLimitEnabled',\n              type: 'checkbox',\n              defaultValue: true,\n              label: 'Rate Limit Enabled',\n              admin: {\n                readOnly: true,\n                description: 'Whether the API key has rate limiting enabled.',\n              },\n            },\n            {\n              name: 'rateLimitTimeWindow',\n              type: 'number',\n              label: 'Rate Limit Time Window',\n              admin: {\n                readOnly: true,\n                description: 'The time window in milliseconds for the rate limit.',\n              },\n            },\n            {\n              name: 'rateLimitMax',\n              type: 'number',\n              label: 'The maximum number of requests allowed within the `rateLimitTimeWindow`.',\n              admin: {\n                readOnly: true,\n                description:\n                  'The maximum number of requests allowed within the rate limit time window.',\n              },\n            },\n            {\n              name: 'requstCount',\n              type: 'number',\n              label: 'Request Count',\n              required: true,\n              admin: {\n                readOnly: true,\n                description: 'The number of requests made within the rate limit time window.',\n              },\n            },\n            {\n              name: 'remaining',\n              type: 'number',\n              label: 'Remaining Requests',\n              admin: {\n                readOnly: true,\n                description: 'The number of requests remaining.',\n              },\n            },\n            {\n              name: 'lastRequest',\n              type: 'date',\n              label: 'Last Request At',\n              admin: {\n                readOnly: true,\n                description: 'The date and time of the last request made to the key.',\n              },\n            },\n            {\n              name: 'expiresAt',\n              type: 'date',\n              label: 'Expires At',\n              admin: {\n                readOnly: true,\n                description: 'The date and time of when the API key will expire.',\n              },\n            },\n            {\n              name: 'permissions',\n              type: 'text',\n              label: 'Permissions',\n              admin: {\n                readOnly: true,\n                description: 'The permissions for the API key.',\n              },\n            },\n            {\n              name: 'metadata',\n              type: 'json',\n              label: 'Metadata',\n              admin: {\n                readOnly: true,\n                description: 'Any additional metadata you want to store with the key.',\n              },\n            },\n            {\n              name: 'cfWorkerDomains',\n              type: 'array',\n              label: 'Cloudflare Worker Domains',\n              admin: {\n                description: 'Domains of authorized Cloudflare Workers',\n              },\n              fields: [\n                {\n                  name: 'domain',\n                  type: 'text',\n                  required: true,\n                },\n              ],\n            },\n          ],\n          timestamps: true,\n        }\n        enhancedCollections.push(apiKeyCollection)\n        break\n      case betterAuthPluginSlugs.twoFactors:\n        const twoFactorCollection: CollectionConfig = {\n          slug: betterAuthPluginSlugs.twoFactors,\n          admin: {\n            hidden: pluginOptions.hidePluginCollections ?? false,\n            useAsTitle: 'secret',\n            description: 'Two factor authentication secrets',\n          },\n          fields: [\n            {\n              name: 'user',\n              type: 'relationship',\n              relationTo: userSlug,\n              required: true,\n              label: 'User',\n              admin: {\n                readOnly: true,\n                description: 'The user that the two factor authentication secret belongs to',\n              },\n            },\n            {\n              name: 'secret',\n              type: 'text',\n              label: 'Secret',\n              index: true,\n              admin: {\n                readOnly: true,\n                description: 'The secret used to generate the TOTP code.',\n              },\n            },\n            {\n              name: 'backupCodes',\n              type: 'text',\n              required: true,\n              label: 'Backup Codes',\n              admin: {\n                readOnly: true,\n                description:\n                  'The backup codes used to recover access to the account if the user loses access to their phone or email',\n              },\n            },\n          ],\n          timestamps: true,\n        }\n        enhancedCollections.push(twoFactorCollection)\n        break\n      case betterAuthPluginSlugs.oauthAccessTokens:\n        const oauthAccessTokenCollection: CollectionConfig = {\n          slug: betterAuthPluginSlugs.oauthAccessTokens,\n          admin: {\n            hidden: pluginOptions.hidePluginCollections ?? false,\n            useAsTitle: 'accessToken',\n            description: 'OAuth access tokens for custom OAuth clients',\n          },\n          fields: [\n            {\n              name: 'accessToken',\n              type: 'text',\n              required: true,\n              index: true,\n              label: 'Access Token',\n              admin: {\n                readOnly: true,\n                description: 'Access token issued to the client',\n              },\n            },\n            {\n              name: 'refreshToken',\n              type: 'text',\n              required: true,\n              label: 'Refresh Token',\n              admin: {\n                readOnly: true,\n                description: 'Refresh token issued to the client',\n              },\n            },\n            {\n              name: 'accessTokenExpiresAt',\n              type: 'date',\n              required: true,\n              label: 'Access Token Expires At',\n              admin: {\n                readOnly: true,\n                description: 'Expiration date of the access token',\n              },\n            },\n            {\n              name: 'refreshTokenExpiresAt',\n              type: 'date',\n              required: true,\n              label: 'Refresh Token Expires At',\n              admin: {\n                readOnly: true,\n                description: 'Expiration date of the refresh token',\n              },\n            },\n            {\n              name: 'client',\n              type: 'relationship',\n              relationTo: betterAuthPluginSlugs.oauthApplications,\n              required: true,\n              label: 'Client',\n              admin: {\n                readOnly: true,\n                description: 'OAuth application associated with the access token',\n              },\n            },\n            {\n              name: 'user',\n              type: 'relationship',\n              relationTo: userSlug,\n              required: true,\n              label: 'User',\n              admin: {\n                readOnly: true,\n                description: 'User associated with the access token',\n              },\n            },\n            {\n              name: 'scopes',\n              type: 'text',\n              required: true,\n              label: 'Scopes',\n              admin: {\n                description: 'Comma-separated list of scopes granted',\n              },\n            },\n          ],\n          timestamps: true,\n        }\n        enhancedCollections.push(oauthAccessTokenCollection)\n        break\n      case betterAuthPluginSlugs.oauthApplications:\n        const oauthApplicationCollection: CollectionConfig = {\n          slug: betterAuthPluginSlugs.oauthApplications,\n          admin: {\n            hidden: pluginOptions.hidePluginCollections ?? false,\n            useAsTitle: 'name',\n            description: 'OAuth applications are custom OAuth clients',\n          },\n          fields: [\n            {\n              name: 'clientId',\n              type: 'text',\n              unique: true,\n              index: true,\n              required: true,\n              label: 'Client ID',\n              admin: {\n                readOnly: true,\n                description: 'Unique identifier for each OAuth client',\n              },\n            },\n            {\n              name: 'clientSecret',\n              type: 'text',\n              required: true,\n              label: 'Client Secret',\n              admin: {\n                readOnly: true,\n                description: 'Secret key for the OAuth client',\n              },\n            },\n            {\n              name: 'name',\n              type: 'text',\n              required: true,\n              index: true,\n              label: 'Name',\n              admin: {\n                description: 'Name of the OAuth application',\n              },\n            },\n            {\n              name: 'redirectURLs',\n              type: 'text',\n              required: true,\n              label: 'Redirect URLs',\n              admin: {\n                description: 'Comma-separated list of redirect URLs',\n              },\n            },\n            {\n              name: 'metadata',\n              type: 'json',\n              admin: {\n                readOnly: true,\n                description: 'Additional metadata for the OAuth application',\n              },\n            },\n            {\n              name: 'type',\n              type: 'text',\n              required: true,\n              label: 'Type',\n              admin: {\n                readOnly: true,\n                description: 'Type of OAuth client (e.g., web, mobile)',\n              },\n            },\n            {\n              name: 'disabled',\n              type: 'checkbox',\n              defaultValue: false,\n              required: true,\n              label: 'Disabled',\n              admin: {\n                description: 'Indicates if the client is disabled',\n              },\n            },\n            {\n              name: 'icon',\n              type: 'text',\n              label: 'Icon',\n              admin: {\n                description: 'Icon of the OAuth application',\n              },\n            },\n            {\n              name: 'user',\n              type: 'relationship',\n              relationTo: userSlug,\n              required: false,\n              label: 'User',\n              admin: {\n                readOnly: true,\n                description: 'ID of the user who owns the client. (optional)',\n              },\n            },\n          ],\n          timestamps: true,\n        }\n        enhancedCollections.push(oauthApplicationCollection)\n        break\n      case betterAuthPluginSlugs.oauthConsents:\n        const oauthConsentCollection: CollectionConfig = {\n          slug: betterAuthPluginSlugs.oauthConsents,\n          admin: {\n            hidden: pluginOptions.hidePluginCollections ?? false,\n            description: 'OAuth consents are used to store user consents for OAuth clients',\n          },\n          fields: [\n            {\n              name: 'client',\n              type: 'relationship',\n              relationTo: betterAuthPluginSlugs.oauthApplications,\n              required: true,\n              label: 'Client',\n              admin: {\n                readOnly: true,\n                description: 'OAuth client associated with the consent',\n              },\n            },\n            {\n              name: 'user',\n              type: 'relationship',\n              relationTo: userSlug,\n              required: true,\n              label: 'User',\n              admin: {\n                readOnly: true,\n                description: 'User associated with the consent',\n              },\n            },\n            {\n              name: 'scopes',\n              type: 'text',\n              required: true,\n              label: 'Scopes',\n              admin: {\n                readOnly: true,\n                description: 'Comma-separated list of scopes consented to',\n              },\n            },\n            {\n              name: 'consentGiven',\n              type: 'checkbox',\n              defaultValue: false,\n              required: true,\n              label: 'Consent Given',\n              admin: {\n                readOnly: true,\n                description: '\tIndicates if consent was given',\n              },\n            },\n          ],\n          timestamps: true,\n        }\n        enhancedCollections.push(oauthConsentCollection)\n        break\n      case betterAuthPluginSlugs.passkeys:\n        const passkeyCollection: CollectionConfig = {\n          slug: betterAuthPluginSlugs.passkeys,\n          admin: {\n            hidden: pluginOptions.hidePluginCollections ?? false,\n            useAsTitle: 'name',\n            description: 'Passkeys are used to authenticate users',\n          },\n          fields: [\n            {\n              name: 'name',\n              type: 'text',\n              label: 'Name',\n              admin: {\n                readOnly: true,\n                description: 'The name of the passkey',\n              },\n            },\n            {\n              name: 'publicKey',\n              type: 'text',\n              required: true,\n              index: true,\n              label: 'Public Key',\n              admin: {\n                readOnly: true,\n                description: 'The public key of the passkey',\n              },\n            },\n            {\n              name: 'user',\n              type: 'relationship',\n              relationTo: userSlug,\n              required: true,\n              index: true,\n              label: 'User',\n              admin: {\n                readOnly: true,\n                description: 'The user that the passkey belongs to',\n              },\n            },\n            {\n              name: 'credentialID',\n              type: 'text',\n              required: true,\n              unique: true,\n              label: 'Credential ID',\n              admin: {\n                readOnly: true,\n                description: 'The unique identifier of the registered credential',\n              },\n            },\n            {\n              name: 'counter',\n              type: 'number',\n              required: true,\n              label: 'Counter',\n              admin: {\n                readOnly: true,\n                description: 'The counter of the passkey',\n              },\n            },\n            {\n              name: 'deviceType',\n              type: 'text',\n              required: true,\n              label: 'Device Type',\n              admin: {\n                readOnly: true,\n                description: 'The type of device used to register the passkey',\n              },\n            },\n            {\n              name: 'backedUp',\n              type: 'checkbox',\n              required: true,\n              label: 'Backed Up',\n              admin: {\n                readOnly: true,\n                description: 'Whether the passkey is backed up',\n              },\n            },\n            {\n              name: 'transports',\n              type: 'text',\n              required: true,\n              label: 'Transports',\n              admin: {\n                readOnly: true,\n                description: 'The transports used to register the passkey',\n              },\n            },\n          ],\n          timestamps: true,\n        }\n        enhancedCollections.push(passkeyCollection)\n        break\n      case betterAuthPluginSlugs.ssoProviders:\n        const ssoProviderCollection: CollectionConfig = {\n          slug: betterAuthPluginSlugs.ssoProviders,\n          admin: {\n            hidden: pluginOptions.hidePluginCollections ?? false,\n            useAsTitle: 'issuer',\n            description: 'SSO providers are used to authenticate users with an external provider',\n          },\n          fields: [\n            {\n              name: 'issuer',\n              type: 'text',\n              required: true,\n              index: true,\n              label: 'Issuer',\n              admin: {\n                description: 'The issuer of the SSO provider',\n              },\n            },\n            {\n              name: 'domain',\n              type: 'text',\n              required: true,\n              label: 'Domain',\n              admin: {\n                description: 'The domain of the SSO provider',\n              },\n            },\n            {\n              name: 'oidcConfig',\n              type: 'text',\n              required: true,\n              label: 'OIDC Config',\n              admin: {\n                description: 'The OIDC config of the SSO provider',\n              },\n            },\n            {\n              name: 'user',\n              type: 'relationship',\n              relationTo: userSlug,\n              required: true,\n              label: 'User',\n              admin: {\n                description: 'The user associated with the SSO provider',\n              },\n            },\n            {\n              name: 'providerId',\n              type: 'text',\n              required: true,\n              label: 'Provider ID',\n              admin: {\n                readOnly: true,\n                description:\n                  'The provider id. Used to identify a provider and to generate a redirect url',\n              },\n            },\n            {\n              name: 'organizationId',\n              type: 'text',\n              required: true,\n              label: 'Organization ID',\n              admin: {\n                readOnly: true,\n                description: 'The organization Id. If provider is linked to an organization',\n              },\n            },\n          ],\n          timestamps: true,\n        }\n        enhancedCollections.push(ssoProviderCollection)\n        break\n      case betterAuthPluginSlugs.subscriptions:\n        const subscriptionCollection: CollectionConfig = {\n          slug: betterAuthPluginSlugs.subscriptions,\n          admin: {\n            hidden: pluginOptions.hidePluginCollections ?? false,\n            useAsTitle: 'plan',\n            description: 'Stripe subscription management',\n          },\n          fields: [\n            {\n              name: 'id',\n              type: 'text',\n              required: true,\n              index: true,\n              label: 'ID',\n              admin: {\n                description: 'Unique identifier for each subscription',\n              },\n            },\n            {\n              name: 'plan',\n              type: 'text',\n              required: true,\n              label: 'Plan',\n              admin: {\n                description: 'The name of the subscription plan',\n              },\n            },\n            {\n              name: 'user',\n              type: 'relationship',\n              relationTo: userSlug,\n              required: true,\n              index: true,\n              label: 'User',\n              admin: {\n                description: 'The user associated with this subscription',\n              },\n            },\n            {\n              name: 'stripeCustomerId',\n              type: 'text',\n              label: 'Stripe Customer ID',\n              admin: {\n                description: 'The Stripe customer ID',\n              },\n            },\n            {\n              name: 'stripeSubscriptionId',\n              type: 'text',\n              label: 'Stripe Subscription ID',\n              admin: {\n                description: 'The Stripe subscription ID',\n              },\n            },\n            {\n              name: 'status',\n              type: 'text',\n              required: true,\n              label: 'Status',\n              admin: {\n                description: 'The status of the subscription (active, canceled, etc.)',\n              },\n            },\n            {\n              name: 'periodStart',\n              type: 'date',\n              label: 'Period Start',\n              admin: {\n                description: 'Start date of the current billing period',\n              },\n            },\n            {\n              name: 'periodEnd',\n              type: 'date',\n              label: 'Period End',\n              admin: {\n                description: 'End date of the current billing period',\n              },\n            },\n            {\n              name: 'cancelAtPeriodEnd',\n              type: 'checkbox',\n              defaultValue: false,\n              label: 'Cancel At Period End',\n              admin: {\n                description: 'Whether the subscription will be canceled at the end of the period',\n              },\n            },\n            {\n              name: 'seats',\n              type: 'number',\n              label: 'Seats',\n              admin: {\n                description: 'Number of seats for team plans',\n              },\n            },\n            {\n              name: 'trialStart',\n              type: 'date',\n              label: 'Trial Start',\n              admin: {\n                description: 'Start date of the trial period',\n              },\n            },\n            {\n              name: 'trialEnd',\n              type: 'date',\n              label: 'Trial End',\n              admin: {\n                description: 'End date of the trial period',\n              },\n            },\n          ],\n          timestamps: true,\n        }\n        enhancedCollections.push(subscriptionCollection)\n        break\n      default:\n        break\n    }\n  })\n\n  const restOfCollections = incomingCollections.filter((collection) => {\n    return !enhancedCollections.some(\n      (enhancedCollection) => enhancedCollection.slug === collection.slug,\n    )\n  })\n\n  return [...enhancedCollections, ...restOfCollections]\n}\n"],"names":["baseCollectionSlugs","betterAuthPluginSlugs","betterAuthStrategy","getAfterLogoutHook","getRefreshTokenEndpoint","isAdminOrCurrentUserUpdateWithAllowedFields","isAdminOrCurrentUserWithRoles","isAdminWithRoles","cleanUpUserAfterDelete","getSyncPasswordToUserHook","getSyncAccountHook","onVerifiedChange","getAfterLoginHook","getBeforeLoginHook","buildCollectionConfigs","incomingCollections","requiredCollectionSlugs","pluginOptions","sanitizedBAOptions","userSlug","users","slug","accountSlug","accounts","sessionSlug","sessions","verificationSlug","verifications","baPlugins","plugins","adminRoles","getTimestampFields","saveUpdatedAtToJWT","saveCreatedAtToJWT","name","type","saveToJWT","admin","disableBulkEdit","hidden","index","label","t","enhancedCollections","forEach","existingUserCollection","find","collection","allowedFields","usersCollection","defaultColumns","useAsTitle","access","req","includes","user","role","read","idField","create","delete","update","endpoints","hooks","beforeChange","afterChange","beforeLogin","afterLogin","sessionsCollectionSlug","usersCollectionSlug","afterLogout","afterDelete","args","auth","strategies","fields","position","components","Field","path","clientProps","condition","some","plugin","id","description","required","unique","defaultValue","options","roles","value","map","charAt","toUpperCase","slice","push","readOnly","collectionOverrides","existingAccountCollection","accountCollection","relationTo","existingSessionCollection","sessionCollection","organizations","existingVerificationCollection","verificationCollection","timestamps","organizationCollection","hidePluginCollections","members","memberCollection","teams","invitations","invitationCollection","teamCollection","jwks","jwksCollection","apiKeys","apiKeyCollection","twoFactors","twoFactorCollection","oauthAccessTokens","oauthAccessTokenCollection","oauthApplications","oauthApplicationCollection","oauthConsents","oauthConsentCollection","passkeys","passkeyCollection","ssoProviders","ssoProviderCollection","subscriptions","subscriptionCollection","restOfCollections","filter","enhancedCollection"],"mappings":"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"}
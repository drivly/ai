{"version":3,"sources":["../../../../../src/plugin/collections/users/endpoints/refresh-token.ts"],"sourcesContent":["import { setCookieCache } from 'better-auth/cookies'\nimport { CollectionSlug, type Endpoint, getFieldsToSign, refreshOperation, User } from 'payload'\nimport { GenericEndpointContext } from 'better-auth/types'\nimport { EndpointWithBetterAuth } from '../../../types'\nimport { getPayloadAuth } from '../../../lib/get-payload-auth'\n\ntype RefreshTokenEndpointOptions = {\n  userSlug: CollectionSlug\n}\n\nexport const getRefreshTokenEndpoint = (options?: RefreshTokenEndpointOptions): Endpoint => {\n  const userSlug = options?.userSlug\n\n  const endpoint: EndpointWithBetterAuth = {\n    path: '/refresh-token',\n    method: 'post',\n    handler: async (req) => {\n      const payload = await getPayloadAuth(req.payload.config)\n      const betterAuth = payload.betterAuth\n      const authContext = await betterAuth?.$context\n      const userCollection = payload.collections[userSlug as CollectionSlug]\n\n      if (!betterAuth || !authContext) {\n        return new Response(JSON.stringify({ message: 'BetterAuth not initialized' }), {\n          status: 500,\n        })\n      }\n\n      const sessionTokenName = authContext.authCookies.sessionToken.name\n      const cookieHeader = req.headers.get('cookie') || ''\n      const hasSessionToken = cookieHeader.includes(`${sessionTokenName}=`)\n\n      if (!hasSessionToken) {\n        try {\n          const result = await refreshOperation({ collection: userCollection, req })\n          return new Response(JSON.stringify(result), { status: 200 })\n        } catch (error) {\n          console.error('Token refresh failed:', error)\n          return new Response(JSON.stringify({ message: 'Token refresh failed' }), { status: 401 })\n        }\n      }\n\n      // @ts-ignore - @TODO, fix type of .api\n      const session = await betterAuth.api.getSession({\n        headers: req.headers,\n        query: { disableCookieCache: true },\n      })\n\n      if (!session?.session?.userId) {\n        return new Response(JSON.stringify({ message: 'No user in session' }), { status: 401 })\n      }\n\n      const user = await payload.findByID({\n        collection: userSlug as string,\n        id: session.session.userId,\n      })\n\n      if (!user) {\n        return new Response(JSON.stringify({ message: 'No user found' }), { status: 401 })\n      }\n\n      const cookieCacheFields = getFieldsToSign({\n        collectionConfig: userCollection.config,\n        email: user.email,\n        user: user as User,\n      })\n\n      const responseData = {\n        refreshedToken: null,\n        setCookie: !!authContext.options.session?.cookieCache?.enabled,\n        strategy: 'better-auth',\n        user: { ...user, collection: userSlug },\n      }\n\n      const response = new Response(JSON.stringify(responseData), {\n        status: 200,\n      })\n\n      const ctx = {\n        context: authContext,\n        setCookie(name, value, options) {\n          const path = options?.path || '/'\n          const maxAge = options?.maxAge ? `; Max-Age=${options.maxAge}` : ''\n          const httpOnly = options?.httpOnly ? '; HttpOnly' : ''\n          const secure = options?.secure ? '; Secure' : ''\n          const sameSite = options?.sameSite ? `; SameSite=${options.sameSite}` : '; SameSite=Lax'\n\n          response.headers.set(\n            'Set-Cookie',\n            `${name}=${value}; Path=${path}${maxAge}${httpOnly}${secure}${sameSite}`,\n          )\n          return name\n        },\n      } as GenericEndpointContext\n\n      await setCookieCache(ctx, {\n        session: session.session,\n        user: cookieCacheFields as any,\n      })\n\n      return response\n    },\n  }\n\n  return endpoint as unknown as Endpoint\n}\n"],"names":["setCookieCache","getFieldsToSign","refreshOperation","getPayloadAuth","getRefreshTokenEndpoint","options","userSlug","endpoint","path","method","handler","req","payload","config","betterAuth","authContext","$context","userCollection","collections","Response","JSON","stringify","message","status","sessionTokenName","authCookies","sessionToken","name","cookieHeader","headers","get","hasSessionToken","includes","result","collection","error","console","session","api","getSession","query","disableCookieCache","userId","user","findByID","id","cookieCacheFields","collectionConfig","email","responseData","refreshedToken","setCookie","cookieCache","enabled","strategy","response","ctx","context","value","maxAge","httpOnly","secure","sameSite","set"],"mappings":"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"}
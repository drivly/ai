{"version":3,"sources":["../../../../../src/plugin/collections/users/hooks/sync-account.ts"],"sourcesContent":["import type { CollectionAfterChangeHook } from 'payload'\nimport type { CollectionHookWithBetterAuth } from '../../../types'\n\nconst BETTER_AUTH_CONTEXT_KEY = 'payload-db-adapter'\n\ntype CollectionAfterChangeHookWithBetterAuth =\n  CollectionHookWithBetterAuth<CollectionAfterChangeHook>\n\ntype SyncAccountOptions = {\n  userSlug: string\n  accountSlug: string\n}\n\nexport const getSyncAccountHook = (options: SyncAccountOptions): CollectionAfterChangeHook => {\n  const hook: CollectionAfterChangeHookWithBetterAuth = async ({\n    doc,\n    req,\n    operation,\n    context,\n  }) => {\n    if (context?.syncPasswordToUser) return doc\n\n    if (operation !== 'create' && operation !== 'update') return doc\n\n    const user = await req.payload.findByID({\n      collection: options.userSlug,\n      id: doc.id,\n      depth: 0,\n      req,\n      showHiddenFields: true,\n    })\n\n    if (!user || !user.hash || !user.salt) return doc\n\n    const passwordValue = `${user.salt}:${user.hash}`\n    const userField = req.payload.betterAuth.options.account?.fields?.userId || 'userId'\n\n    if (operation === 'create' && !(BETTER_AUTH_CONTEXT_KEY in context)) {\n      try {\n        await req.payload.create({\n          collection: options.accountSlug,\n          data: {\n            [userField]: doc.id,\n            accountId: doc.id.toString(),\n            providerId: 'credential',\n            password: passwordValue,\n            context: { syncAccountHook: true },\n          },\n          req,\n        })\n      } catch (error) {\n        console.error('Failed to create account for user:', error)\n      }\n    }\n\n    if (operation === 'update') {\n      try {\n        const accounts = await req.payload.find({\n          collection: options.accountSlug,\n          where: {\n            and: [{ [userField]: { equals: doc.id } }, { providerId: { equals: 'credential' } }],\n          },\n          req,\n          depth: 0,\n          context: { syncAccountHook: true },\n        })\n\n        const account = accounts.docs.at(0)\n        if (account) {\n          await req.payload.update({\n            collection: options.accountSlug,\n            id: account.id,\n            data: {\n              password: passwordValue,\n            },\n            req,\n            context: { syncAccountHook: true },\n          })\n        }\n      } catch (error) {\n        console.error('Failed to sync hash/salt to account:', error)\n      }\n    }\n\n    return doc\n  }\n\n  return hook as CollectionAfterChangeHook\n}\n"],"names":["BETTER_AUTH_CONTEXT_KEY","getSyncAccountHook","options","hook","doc","req","operation","context","syncPasswordToUser","user","payload","findByID","collection","userSlug","id","depth","showHiddenFields","hash","salt","passwordValue","userField","betterAuth","account","fields","userId","create","accountSlug","data","accountId","toString","providerId","password","syncAccountHook","error","console","accounts","find","where","and","equals","docs","at","update"],"mappings":"AAGA,MAAMA,0BAA0B;AAUhC,OAAO,MAAMC,qBAAqB,CAACC;IACjC,MAAMC,OAAgD,OAAO,EAC3DC,GAAG,EACHC,GAAG,EACHC,SAAS,EACTC,OAAO,EACR;QACC,IAAIA,SAASC,oBAAoB,OAAOJ;QAExC,IAAIE,cAAc,YAAYA,cAAc,UAAU,OAAOF;QAE7D,MAAMK,OAAO,MAAMJ,IAAIK,OAAO,CAACC,QAAQ,CAAC;YACtCC,YAAYV,QAAQW,QAAQ;YAC5BC,IAAIV,IAAIU,EAAE;YACVC,OAAO;YACPV;YACAW,kBAAkB;QACpB;QAEA,IAAI,CAACP,QAAQ,CAACA,KAAKQ,IAAI,IAAI,CAACR,KAAKS,IAAI,EAAE,OAAOd;QAE9C,MAAMe,gBAAgB,GAAGV,KAAKS,IAAI,CAAC,CAAC,EAAET,KAAKQ,IAAI,EAAE;QACjD,MAAMG,YAAYf,IAAIK,OAAO,CAACW,UAAU,CAACnB,OAAO,CAACoB,OAAO,EAAEC,QAAQC,UAAU;QAE5E,IAAIlB,cAAc,YAAY,CAAEN,CAAAA,2BAA2BO,OAAM,GAAI;YACnE,IAAI;gBACF,MAAMF,IAAIK,OAAO,CAACe,MAAM,CAAC;oBACvBb,YAAYV,QAAQwB,WAAW;oBAC/BC,MAAM;wBACJ,CAACP,UAAU,EAAEhB,IAAIU,EAAE;wBACnBc,WAAWxB,IAAIU,EAAE,CAACe,QAAQ;wBAC1BC,YAAY;wBACZC,UAAUZ;wBACVZ,SAAS;4BAAEyB,iBAAiB;wBAAK;oBACnC;oBACA3B;gBACF;YACF,EAAE,OAAO4B,OAAO;gBACdC,QAAQD,KAAK,CAAC,sCAAsCA;YACtD;QACF;QAEA,IAAI3B,cAAc,UAAU;YAC1B,IAAI;gBACF,MAAM6B,WAAW,MAAM9B,IAAIK,OAAO,CAAC0B,IAAI,CAAC;oBACtCxB,YAAYV,QAAQwB,WAAW;oBAC/BW,OAAO;wBACLC,KAAK;4BAAC;gCAAE,CAAClB,UAAU,EAAE;oCAAEmB,QAAQnC,IAAIU,EAAE;gCAAC;4BAAE;4BAAG;gCAAEgB,YAAY;oCAAES,QAAQ;gCAAa;4BAAE;yBAAE;oBACtF;oBACAlC;oBACAU,OAAO;oBACPR,SAAS;wBAAEyB,iBAAiB;oBAAK;gBACnC;gBAEA,MAAMV,UAAUa,SAASK,IAAI,CAACC,EAAE,CAAC;gBACjC,IAAInB,SAAS;oBACX,MAAMjB,IAAIK,OAAO,CAACgC,MAAM,CAAC;wBACvB9B,YAAYV,QAAQwB,WAAW;wBAC/BZ,IAAIQ,QAAQR,EAAE;wBACda,MAAM;4BACJI,UAAUZ;wBACZ;wBACAd;wBACAE,SAAS;4BAAEyB,iBAAiB;wBAAK;oBACnC;gBACF;YACF,EAAE,OAAOC,OAAO;gBACdC,QAAQD,KAAK,CAAC,wCAAwCA;YACxD;QACF;QAEA,OAAO7B;IACT;IAEA,OAAOD;AACT,EAAC"}
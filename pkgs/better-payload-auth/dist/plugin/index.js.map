{"version":3,"sources":["../../src/plugin/index.ts"],"sourcesContent":["import type { BasePayload, Config } from 'payload'\nimport type { PayloadBetterAuthPluginOptions } from './types'\nimport { sanitizeBetterAuthOptions } from './lib/sanitize-auth-options'\nimport { getRequiredCollectionSlugs } from './lib/get-required-collection-slugs'\nimport { buildCollectionConfigs } from './lib/build-collection-configs'\nimport { respectSaveToJwtFieldsMiddleware } from './lib/respect-save-to-jwt-fields-middleware'\nimport { initBetterAuth } from './lib/init-better-auth'\n\nexport * from './types'\nexport * from './helpers'\nexport { sanitizeBetterAuthOptions } from './lib/sanitize-auth-options'\nexport { getPayloadAuth } from './lib/get-payload-auth'\n\nexport function betterAuthPlugin(pluginOptions: PayloadBetterAuthPluginOptions) {\n  return (config: Config): Config => {\n    if (pluginOptions.disabled) {\n      return config\n    }\n    config.custom = {\n      ...config.custom,\n      hasBetterAuthPlugin: true,\n    }\n\n    if (!config.collections) {\n      config.collections = []\n    }\n\n    let sanitzedBetterAuthOptions = sanitizeBetterAuthOptions(pluginOptions)\n\n    // Determine which collections to add based on the options and plugins\n    const requiredCollectionSlugs = getRequiredCollectionSlugs({\n      logTables: pluginOptions.logTables ?? false,\n      pluginOptions,\n      sanitizedBAOptions: sanitzedBetterAuthOptions,\n    })\n\n    // Update with the required collections + existing collections\n    config.collections = buildCollectionConfigs({\n      incomingCollections: config.collections ?? [],\n      requiredCollectionSlugs,\n      pluginOptions,\n      sanitizedBAOptions: sanitzedBetterAuthOptions,\n    })\n\n    respectSaveToJwtFieldsMiddleware({\n      sanitizedOptions: sanitzedBetterAuthOptions,\n      payloadConfig: config,\n      pluginOptions,\n    })\n\n    const incomingOnInit = config.onInit\n\n    config.onInit = async (payload) => {\n      // Ensure we are executing any existing onInit functions before running our own.\n      if (incomingOnInit) {\n        await incomingOnInit(payload)\n      }\n\n      // Initialize and set the betterAuth instance\n      const auth = initBetterAuth<NonNullable<typeof sanitzedBetterAuthOptions.plugins>>({\n        payload,\n        options: {\n          ...sanitzedBetterAuthOptions,\n          enableDebugLogs: pluginOptions.enableDebugLogs,\n          plugins: [...(sanitzedBetterAuthOptions.plugins ?? [])],\n        },\n      })\n      ;(payload as BasePayload & { betterAuth: typeof auth }).betterAuth = auth\n    }\n    return config\n  }\n}\n"],"names":["sanitizeBetterAuthOptions","getRequiredCollectionSlugs","buildCollectionConfigs","respectSaveToJwtFieldsMiddleware","initBetterAuth","getPayloadAuth","betterAuthPlugin","pluginOptions","config","disabled","custom","hasBetterAuthPlugin","collections","sanitzedBetterAuthOptions","requiredCollectionSlugs","logTables","sanitizedBAOptions","incomingCollections","sanitizedOptions","payloadConfig","incomingOnInit","onInit","payload","auth","options","enableDebugLogs","plugins","betterAuth"],"mappings":"AAEA,SAASA,yBAAyB,QAAQ,8BAA6B;AACvE,SAASC,0BAA0B,QAAQ,sCAAqC;AAChF,SAASC,sBAAsB,QAAQ,iCAAgC;AACvE,SAASC,gCAAgC,QAAQ,8CAA6C;AAC9F,SAASC,cAAc,QAAQ,yBAAwB;AAEvD,cAAc,UAAS;AACvB,cAAc,YAAW;AACzB,SAASJ,yBAAyB,QAAQ,8BAA6B;AACvE,SAASK,cAAc,QAAQ,yBAAwB;AAEvD,OAAO,SAASC,iBAAiBC,aAA6C;IAC5E,OAAO,CAACC;QACN,IAAID,cAAcE,QAAQ,EAAE;YAC1B,OAAOD;QACT;QACAA,OAAOE,MAAM,GAAG;YACd,GAAGF,OAAOE,MAAM;YAChBC,qBAAqB;QACvB;QAEA,IAAI,CAACH,OAAOI,WAAW,EAAE;YACvBJ,OAAOI,WAAW,GAAG,EAAE;QACzB;QAEA,IAAIC,4BAA4Bb,0BAA0BO;QAE1D,sEAAsE;QACtE,MAAMO,0BAA0Bb,2BAA2B;YACzDc,WAAWR,cAAcQ,SAAS,IAAI;YACtCR;YACAS,oBAAoBH;QACtB;QAEA,8DAA8D;QAC9DL,OAAOI,WAAW,GAAGV,uBAAuB;YAC1Ce,qBAAqBT,OAAOI,WAAW,IAAI,EAAE;YAC7CE;YACAP;YACAS,oBAAoBH;QACtB;QAEAV,iCAAiC;YAC/Be,kBAAkBL;YAClBM,eAAeX;YACfD;QACF;QAEA,MAAMa,iBAAiBZ,OAAOa,MAAM;QAEpCb,OAAOa,MAAM,GAAG,OAAOC;YACrB,gFAAgF;YAChF,IAAIF,gBAAgB;gBAClB,MAAMA,eAAeE;YACvB;YAEA,6CAA6C;YAC7C,MAAMC,OAAOnB,eAAsE;gBACjFkB;gBACAE,SAAS;oBACP,GAAGX,yBAAyB;oBAC5BY,iBAAiBlB,cAAckB,eAAe;oBAC9CC,SAAS;2BAAKb,0BAA0Ba,OAAO,IAAI,EAAE;qBAAE;gBACzD;YACF;YACEJ,QAAsDK,UAAU,GAAGJ;QACvE;QACA,OAAOf;IACT;AACF"}
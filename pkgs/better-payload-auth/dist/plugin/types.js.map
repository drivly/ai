{"version":3,"sources":["../../src/plugin/types.ts"],"sourcesContent":["import type { UnionToIntersection, betterAuth } from 'better-auth'\nimport type {\n  BetterAuthOptions,\n  BetterAuthPlugin,\n  InferAPI,\n  InferPluginTypes,\n} from 'better-auth/types'\nimport type { BasePayload, CollectionConfig, Config, Endpoint, PayloadRequest } from 'payload'\n\n/**\n * BetterAuth options with the following caveats:\n * - The `database` option is removed as it is configured internally\n * - The `user` `modelName` and `fields` is removed as it is configured internally\n * - The `account` `modelName` and `fields` is removed as it is configured internally\n * - The `session` `modelName` and `fields` is removed as it is configured internally\n * - The `verification` `modelName` and `fields` is removed as it is configured internally\n *\n * @see https://www.better-auth.com/docs/reference/options\n */\nexport interface PayloadBetterAuthOptions\n  extends Omit<\n    BetterAuthOptions,\n    'database' | 'user' | 'account' | 'verification' | 'session' | 'advanced'\n  > {\n  user?: Omit<NonNullable<BetterAuthOptions['user']>, 'modelName' | 'fields'> | undefined\n  account?: Omit<NonNullable<BetterAuthOptions['account']>, 'modelName' | 'fields'> | undefined\n  session?: Omit<NonNullable<BetterAuthOptions['session']>, 'modelName' | 'fields'> | undefined\n  verification?:\n    | Omit<NonNullable<BetterAuthOptions['verification']>, 'modelName' | 'fields'>\n    | undefined\n  advanced?: Omit<NonNullable<BetterAuthOptions['advanced']>, 'generateId'> | undefined\n}\n\nexport interface SanitizedBetterAuthOptions extends Omit<BetterAuthOptions, 'database'> {}\n\nexport interface PayloadBetterAuthPluginOptions {\n  /**\n   * Disable the plugin\n   * @default false\n   */\n  disabled?: boolean\n  /**\n   * Enable debug logs\n   * @default false\n   */\n  enableDebugLogs?: boolean\n  /**\n   * Log the tables that are needed for better-auth on init\n   * @default false\n   */\n  logTables?: boolean\n  /**\n   * Hide the plugin collections from the payload admin UI\n   * @default false\n   */\n  hidePluginCollections?: boolean\n  /**\n   * Configure the Users collections:\n   */\n  users?: {\n    /**\n     * Will set the `modelName` for the `user` table in better-auth\n     *\n     * and the `slug` for the `users` collection in payload\n     *\n     * @default 'users'\n     */\n    slug?: string | undefined\n    /**\n     * Define better-auth admin plugin access control\n     *\n     * This will also set the role which gives the user access to the payload admin UI\n     * @see https://www.better-auth.com/docs/plugins/admin#access-control\n     *\n     * @default [\"admin\"]\n     */\n    adminRoles?: string[]\n    /**\n     * Define roles for the users collection\n     *\n     * This should match the roles in the better-auth admin plugin if you are using it\n     * @see https://www.better-auth.com/docs/plugins/admin#access-control\n     */\n    roles?: string[]\n    /**\n     * Hide the `users` collection from the payload admin UI\n     */\n    hidden?: boolean | undefined\n    /**\n     * Define which fields users can update themselves\n     *\n     * Password field is automatically included and doesn't need to be specified here\n     *\n     * @example ['name', 'dateOfBirth', 'phoneNumber']\n     * @default ['name']\n     */\n    allowedFields?: string[] | undefined\n    /**\n     * Function to override the collection configuration\n     *\n     * This allows modifying the collection config after it has been built\n     * Example use cases include adding saveToJwt to specific fields or\n     * modifying field descriptions\n     *\n     * @param options Object containing the collection config and potentially additional parameters\n     * @returns Modified collection config\n     */\n    collectionOverrides?: (options: { collection: CollectionConfig }) => CollectionConfig\n    /**\n     * This will block the first on sign up verification email from better-auth.\n     * If you are using Payload's userCollection.verify option, you will want to set this to true.\n     * Function that will be blocked: options.emailVerificationsendVerificationEmail\n     * @default false\n     */\n    blockFirstBetterAuthVerificationEmail?: boolean\n  }\n  /**\n   * Configure the Accounts collections:\n   */\n  accounts?: {\n    /**\n     * Will set the `modelName` for the `account` table in better-auth\n     *\n     * and the `slug` for the `accounts` collection in payload\n     *\n     * @default 'accounts'\n     */\n    slug?: string | undefined\n    /**\n     * Hide the `accounts` collection from the payload admin UI\n     */\n    hidden?: boolean | undefined\n    /**\n     * Function to override the collection configuration\n     *\n     * This allows modifying the collection config after it has been built\n     *\n     * @param options Object containing the collection config and potentially additional parameters\n     * @returns Modified collection config\n     */\n    collectionOverrides?: (options: { collection: CollectionConfig }) => CollectionConfig\n  }\n  /**\n   * Configure the Sessions collections:\n   */\n  sessions?: {\n    /**\n     * Will set the `modelName` for the `session` table in better-auth\n     *\n     * and the `slug` for the `sessions` collection in payload\n     *\n     * @default 'sessions'\n     */\n    slug?: string | undefined\n    /**\n     * Hide the `sessions` collection from the payload admin UI\n     */\n    hidden?: boolean | undefined\n    /**\n     * Function to override the collection configuration\n     *\n     * This allows modifying the collection config after it has been built\n     *\n     * @param options Object containing the collection config and potentially additional parameters\n     * @returns Modified collection config\n     */\n    collectionOverrides?: (options: { collection: CollectionConfig }) => CollectionConfig\n  }\n  /**\n   * Configure the Verifications collections:\n   */\n  verifications?: {\n    /**\n     * Will set the `modelName` for the `verification` table in better-auth\n     *\n     * and the `slug` for the `verifications` collection in payload\n     *\n     * @default 'verifications'\n     */\n    slug?: string | undefined\n    /**\n     * Hide the `verifications` collection from the payload admin UI\n     */\n    hidden?: boolean | undefined\n  }\n  /**\n   * BetterAuth options with the following caveats:\n   * - The `database` option is removed as it is configured internally\n   * - The `user` `modelName` and `fields` is removed as it is configured internally\n   * - The `account` `modelName` and `fields` is removed as it is configured internally\n   * - The `session` `modelName` and `fields` is removed as it is configured internally\n   * - The `verification` `modelName` and `fields` is removed as it is configured internally\n   *\n   * @see https://www.better-auth.com/docs/reference/options\n   */\n  betterAuthOptions?: PayloadBetterAuthOptions\n}\n\nexport interface PayloadBetterAuthPlugin {\n  (config: Config): Config\n  pluginOptions: PayloadBetterAuthPluginOptions\n}\n\nexport interface PayloadRequestWithBetterAuth<TPlugins extends BetterAuthPlugin[] = []>\n  extends PayloadRequest {\n  payload: BasePayload & {\n    betterAuth: BetterAuthReturn<TPlugins>\n  }\n}\n\nexport type CollectionHookWithBetterAuth<T extends (args: any) => any> = T extends (\n  args: infer A,\n) => infer R\n  ? (args: Omit<A, 'req'> & { req: PayloadRequestWithBetterAuth }) => R\n  : never\n\nexport type EndpointWithBetterAuth = Omit<Endpoint, 'handler'> & {\n  handler: (req: PayloadRequestWithBetterAuth) => Promise<Response> | Response\n}\n\nexport type ExtractEndpoints<T> = T extends BetterAuthPlugin\n  ? T extends { endpoints?: infer E }\n    ? E\n    : {}\n  : {}\n\nexport type TPlugins<TPlugins extends BetterAuthPlugin[] = BetterAuthPlugin[]> = TPlugins\nexport type PluginInferTypes<T extends TPlugins> = {\n  [K in keyof InferPluginTypes<{ plugins: T }>]: InferPluginTypes<{ plugins: T }>[K]\n}\n\nexport type BetterAuthReturn<T extends TPlugins> = Omit<ReturnType<typeof betterAuth>, '$Infer'> & {\n  api: T extends (infer P)[] ? InferAPI<UnionToIntersection<ExtractEndpoints<P>>> : {}\n  $Infer: ReturnType<typeof betterAuth>['$Infer'] & PluginInferTypes<T>\n}\n\nexport type BetterAuthFunctionOptions<P extends TPlugins> = Omit<\n  BetterAuthOptions,\n  'database' | 'plugins'\n> & {\n  enableDebugLogs?: boolean\n  plugins: P\n}\n"],"names":[],"mappings":"AA4OA,WAMC"}
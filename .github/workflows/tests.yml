name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, next]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 10.x

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-test-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-test-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Typecheck
        run: |
          pnpm --filter apis.do build
          pnpm --filter @drivly/payload-agent build
          # Temporarily disabled typecheck as requested
          # pnpm typecheck
          echo "Typecheck temporarily disabled as requested"

      - name: Start Payload Server for Unit Tests
        run: |
          # Export all needed environment variables for the server
          export DATABASE_URI="${{ secrets.DATABASE_URI }}"
          export PAYLOAD_SECRET="${{ secrets.PAYLOAD_SECRET }}"
          
          # Start server in background with all needed env vars
          pnpm dev &
          echo $! > .server.pid
        env:
          AI_GATEWAY_TOKEN: ${{ secrets.AI_GATEWAY_TOKEN || 'sk-1234' }}
          AI_GATEWAY_URL: ${{ secrets.AI_GATEWAY_URL || 'https://llm.do' }}
          DATABASE_URI: ${{ secrets.DATABASE_URI }}
          PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
          NEXTAUTH_SECRET: ${{ secrets.PAYLOAD_SECRET }}
          NEXTAUTH_URL: http://localhost:3005
          GITHUB_CLIENT_ID: mock_github_client_id
          GITHUB_CLIENT_SECRET: mock_github_client_secret
          WORKOS_CLIENT_ID: mock_workos_client_id
          WORKOS_CLIENT_SECRET: mock_workos_client_secret
          RESEND_API_KEY: mock_resend_api_key_for_tests

      - name: Wait for Payload Server
        run: |
          echo "Waiting for server to start..."
          MAX_RETRIES=60
          RETRY_COUNT=0
          # Use /api/health endpoint as specified
          until curl -s http://localhost:3000/api/health > /dev/null || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
            echo "Attempt $((RETRY_COUNT+1))/$MAX_RETRIES - Server not ready yet, waiting 1s..."
            sleep 1
            RETRY_COUNT=$((RETRY_COUNT+1))
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Server failed to start after $MAX_RETRIES attempts"
            exit 1
          fi

          # Additional check to confirm main page is also loading
          echo "Health check passed. Now verifying main page is accessible..."
          if curl -s http://localhost:3000/ -o /dev/null -w "%{http_code}" | grep -q "200"; then
            echo "Main page is accessible."
          else
            echo "Warning: Health check passed but main page is not accessible yet."
            echo "Will proceed with tests, but they might fail if pages aren't ready."
          fi

      - name: Generate DO_API_KEY for tests
        run: |
          # Create a test API key using curl against the local Payload server
          echo "Creating API key for tests..."
          API_KEY_RESPONSE=$(curl -s -X POST http://localhost:3000/api/apikeys -H "Content-Type: application/json" -d '{"name":"CI Test Key","description":"Automatically generated for CI tests"}')
          
          # Extract the key from the response
          DO_API_KEY=$(echo $API_KEY_RESPONSE | grep -o '"key":"[^"]*"' | cut -d'"' -f4)
          
          # Verify we got a key and export it
          if [ -n "$DO_API_KEY" ]; then
            echo "DO_API_KEY generated successfully"
            echo "DO_API_KEY=$DO_API_KEY" >> $GITHUB_ENV
          else
            echo "Failed to generate DO_API_KEY"
            echo "$API_KEY_RESPONSE"
            # Continue anyway as tests will just skip if no key is available
          fi

      - name: Run Unit Tests
        run: |
          # Start Playwright browser installation in the background
          pnpm exec playwright install --with-deps &
          PLAYWRIGHT_INSTALL_PID=$!

          # Run tests while browsers are installing
          pnpm test

          # Wait for Playwright installation to complete if it's still running
          if ps -p $PLAYWRIGHT_INSTALL_PID > /dev/null; then
            echo "Waiting for Playwright browser installation to complete..."
            wait $PLAYWRIGHT_INSTALL_PID
          fi
        env:
          AI_GATEWAY_TOKEN: ${{ secrets.AI_GATEWAY_TOKEN || 'sk-1234' }}
          AI_GATEWAY_URL: ${{ secrets.AI_GATEWAY_URL || 'https://llm.do' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'mock-openai-key' }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY || 'mock-openrouter-key' }}
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          DATABASE_URI: ${{ secrets.DATABASE_URI }}
          PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
          NEXTAUTH_SECRET: ${{ secrets.PAYLOAD_SECRET }}
          NEXTAUTH_URL: http://localhost:3005
          GITHUB_CLIENT_ID: mock_github_client_id
          GITHUB_CLIENT_SECRET: mock_github_client_secret
          WORKOS_CLIENT_ID: mock_workos_client_id
          WORKOS_CLIENT_SECRET: mock_workos_client_secret
          RESEND_API_KEY: mock_resend_api_key_for_tests
          DO_API_KEY: ${{ env.DO_API_KEY }}
          
      - name: Stop Payload Server
        if: always()
        run: |
          if [ -f .server.pid ]; then
            echo "Shutting down Payload server..."
            kill $(cat .server.pid) || true
            rm .server.pid
          fi

  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    continue-on-error: true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 10.x

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-test-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-test-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Playwright
        run: pnpm exec playwright install --with-deps

      - name: Start Dev Server
        run: |
          # Export all needed environment variables for the server
          export DATABASE_URI="${{ secrets.DATABASE_URI }}"
          export PAYLOAD_SECRET="${{ secrets.PAYLOAD_SECRET }}"
          export RESEND_API_KEY="mock_resend_api_key_for_tests"

          # Start server in background with all needed env vars
          pnpm dev &
          echo $! > .server.pid
        env:
          AI_GATEWAY_TOKEN: ${{ secrets.AI_GATEWAY_TOKEN || 'sk-1234' }}
          AI_GATEWAY_URL: ${{ secrets.AI_GATEWAY_URL || 'https://llm.do' }}
          DATABASE_URI: ${{ secrets.DATABASE_URI }}
          PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
          NEXTAUTH_SECRET: ${{ secrets.PAYLOAD_SECRET }}
          NEXTAUTH_URL: http://localhost:3005
          GITHUB_CLIENT_ID: mock_github_client_id
          GITHUB_CLIENT_SECRET: mock_github_client_secret
          WORKOS_CLIENT_ID: mock_workos_client_id
          WORKOS_CLIENT_SECRET: mock_workos_client_secret
          RESEND_API_KEY: mock_resend_api_key_for_tests # Mock Resend for server startup

      - name: Wait for Server
        run: |
          echo "Waiting for server to start..."
          MAX_RETRIES=60
          RETRY_COUNT=0
          # Use /api/health endpoint as specified
          until curl -s http://localhost:3000/api/health > /dev/null || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
            echo "Attempt $((RETRY_COUNT+1))/$MAX_RETRIES - Server not ready yet, waiting 1s..."
            sleep 1
            RETRY_COUNT=$((RETRY_COUNT+1))
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Server failed to start after $MAX_RETRIES attempts"
            exit 1
          fi

          # Additional check to confirm main page is also loading
          echo "Health check passed. Now verifying main page is accessible..."
          if curl -s http://localhost:3000/ -o /dev/null -w "%{http_code}" | grep -q "200"; then
            echo "Main page is accessible."
          else
            echo "Warning: Health check passed but main page is not accessible yet."
            echo "Will proceed with tests, but they might fail if pages aren't ready."
          fi
          
          # New check specifically for admin route
          echo "Now verifying admin route is accessible..."
          ADMIN_RETRIES=30
          ADMIN_COUNT=0
          until curl -s http://localhost:3000/admin -o /dev/null -w "%{http_code}" | grep -q "200" || [ $ADMIN_COUNT -eq $ADMIN_RETRIES ]; do
            echo "Attempt $((ADMIN_COUNT+1))/$ADMIN_RETRIES - Admin route not ready yet, waiting 1s..."
            sleep 1
            ADMIN_COUNT=$((ADMIN_COUNT+1))
          done
          
          if [ $ADMIN_COUNT -eq $ADMIN_RETRIES ]; then
            echo "Warning: Admin route is not accessible after $ADMIN_RETRIES attempts."
            echo "This might cause E2E tests to fail with connection refused errors."
          else
            echo "Admin route is accessible. Server is fully ready!"
          fi

      - name: Run E2E Tests
        run: pnpm test:e2e
        env:
          AI_GATEWAY_TOKEN: ${{ secrets.AI_GATEWAY_TOKEN || 'sk-1234' }}
          AI_GATEWAY_URL: ${{ secrets.AI_GATEWAY_URL || 'https://llm.do' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'mock-openai-key' }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY || 'mock-openrouter-key' }}
          DATABASE_URI: ${{ secrets.DATABASE_URI }}
          PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
          RESEND_API_KEY: mock_resend_api_key_for_tests
          CI: true
          TEST_BASE_URL: http://localhost:3000

  visual-tests:
    name: Run Visual Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    continue-on-error: true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 10.x

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-test-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-test-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Playwright
        run: pnpm exec playwright install --with-deps

      - name: Start Dev Server
        run: |
          # Export all needed environment variables for the server
          export DATABASE_URI="${{ secrets.DATABASE_URI }}"
          export PAYLOAD_SECRET="${{ secrets.PAYLOAD_SECRET }}"
          export RESEND_API_KEY="mock_resend_api_key_for_tests"

          # Start server in background with all needed env vars
          pnpm dev &
          echo $! > .server.pid
        env:
          AI_GATEWAY_TOKEN: ${{ secrets.AI_GATEWAY_TOKEN || 'sk-1234' }}
          AI_GATEWAY_URL: ${{ secrets.AI_GATEWAY_URL || 'https://llm.do' }}
          DATABASE_URI: ${{ secrets.DATABASE_URI }}
          PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
          NEXTAUTH_SECRET: ${{ secrets.PAYLOAD_SECRET }}
          NEXTAUTH_URL: http://localhost:3005
          GITHUB_CLIENT_ID: mock_github_client_id
          GITHUB_CLIENT_SECRET: mock_github_client_secret
          WORKOS_CLIENT_ID: mock_workos_client_id
          WORKOS_CLIENT_SECRET: mock_workos_client_secret
          RESEND_API_KEY: mock_resend_api_key_for_tests # Mock Resend for server startup

      - name: Wait for Server
        run: |
          echo "Waiting for server to start..."
          MAX_RETRIES=60
          RETRY_COUNT=0
          # Use /api/health endpoint as specified
          until curl -s http://localhost:3000/api/health > /dev/null || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
            echo "Attempt $((RETRY_COUNT+1))/$MAX_RETRIES - Server not ready yet, waiting 1s..."
            sleep 1
            RETRY_COUNT=$((RETRY_COUNT+1))
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Server failed to start after $MAX_RETRIES attempts"
            exit 1
          fi

          # Additional check to confirm main page is also loading
          echo "Health check passed. Now verifying main page is accessible..."
          if curl -s http://localhost:3000/ -o /dev/null -w "%{http_code}" | grep -q "200"; then
            echo "Main page is accessible."
          else
            echo "Warning: Health check passed but main page is not accessible yet."
            echo "Will proceed with tests, but they might fail if pages aren't ready."
          fi
          
          # New check specifically for admin route
          echo "Now verifying admin route is accessible..."
          ADMIN_RETRIES=30
          ADMIN_COUNT=0
          until curl -s http://localhost:3000/admin -o /dev/null -w "%{http_code}" | grep -q "200" || [ $ADMIN_COUNT -eq $ADMIN_RETRIES ]; do
            echo "Attempt $((ADMIN_COUNT+1))/$ADMIN_RETRIES - Admin route not ready yet, waiting 1s..."
            sleep 1
            ADMIN_COUNT=$((ADMIN_COUNT+1))
          done
          
          if [ $ADMIN_COUNT -eq $ADMIN_RETRIES ]; then
            echo "Warning: Admin route is not accessible after $ADMIN_RETRIES attempts."
            echo "This might cause E2E tests to fail with connection refused errors."
          else
            echo "Admin route is accessible. Server is fully ready!"
          fi

      - name: Run Chromatic Visual Tests
        run: |
          # First run Playwright tests to generate the archives needed by Chromatic
          # Add retry and longer timeouts to handle potential timing issues
          pnpm exec playwright test tests/chromatic --retries=3 --timeout=180000

          # Then run Chromatic with auto-accept-changes for first-time snapshots
          # Exit immediately after upload to save time
          npx chromatic --playwright --project-token=${CHROMATIC_PROJECT_TOKEN} --auto-accept-changes --exit-zero-on-changes --exit-once-uploaded
        env:
          AI_GATEWAY_TOKEN: ${{ secrets.AI_GATEWAY_TOKEN || 'sk-1234' }}
          AI_GATEWAY_URL: ${{ secrets.AI_GATEWAY_URL || 'https://llm.do' }}
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'mock-openai-key' }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY || 'mock-openrouter-key' }}
          DATABASE_URI: ${{ secrets.DATABASE_URI }}
          PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
          RESEND_API_KEY: mock_resend_api_key_for_tests
          CI: true
          TEST_BASE_URL: http://localhost:3000

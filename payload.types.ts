/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
    apikeys: ApikeyAuthOperations;
  };
  blocks: {};
  collections: {
    functions: Function;
    workflows: Workflow;
    agents: Agent;
    queues: Queue;
    tasks: Task;
    nouns: Noun;
    verbs: Verb;
    things: Thing;
    integrations: Integration;
    integrationCategories: IntegrationCategory;
    integrationTriggers: IntegrationTrigger;
    integrationActions: IntegrationAction;
    connections: Connection;
    triggers: Trigger;
    searches: Search;
    actions: Action;
    experiments: Experiment;
    models: Model;
    prompts: Prompt;
    settings: Setting;
    types: Type;
    modules: Module;
    packages: Package;
    deployments: Deployment;
    benchmarks: Benchmark;
    evals: Eval;
    evalRuns: EvalRun;
    evalResults: EvalResult;
    datasets: Dataset;
    events: Event;
    errors: Error;
    generations: Generation;
    traces: Trace;
    projects: Project;
    users: User;
    roles: Role;
    tags: Tag;
    webhooks: Webhook;
    apikeys: Apikey;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    functions: {
      actions: 'actions';
    };
    queues: {
      tasks: 'tasks';
    };
    tasks: {
      subtasks: 'tasks';
      dependents: 'tasks';
    };
    nouns: {
      things: 'things';
    };
    verbs: {
      actions: 'actions';
    };
    things: {
      subjectOf: 'actions';
      objectOf: 'actions';
    };
    actions: {
      generation: 'generations';
    };
  };
  collectionsSelect: {
    functions: FunctionsSelect<false> | FunctionsSelect<true>;
    workflows: WorkflowsSelect<false> | WorkflowsSelect<true>;
    agents: AgentsSelect<false> | AgentsSelect<true>;
    queues: QueuesSelect<false> | QueuesSelect<true>;
    tasks: TasksSelect<false> | TasksSelect<true>;
    nouns: NounsSelect<false> | NounsSelect<true>;
    verbs: VerbsSelect<false> | VerbsSelect<true>;
    things: ThingsSelect<false> | ThingsSelect<true>;
    integrations: IntegrationsSelect<false> | IntegrationsSelect<true>;
    integrationCategories: IntegrationCategoriesSelect<false> | IntegrationCategoriesSelect<true>;
    integrationTriggers: IntegrationTriggersSelect<false> | IntegrationTriggersSelect<true>;
    integrationActions: IntegrationActionsSelect<false> | IntegrationActionsSelect<true>;
    connections: ConnectionsSelect<false> | ConnectionsSelect<true>;
    triggers: TriggersSelect<false> | TriggersSelect<true>;
    searches: SearchesSelect<false> | SearchesSelect<true>;
    actions: ActionsSelect<false> | ActionsSelect<true>;
    experiments: ExperimentsSelect<false> | ExperimentsSelect<true>;
    models: ModelsSelect<false> | ModelsSelect<true>;
    prompts: PromptsSelect<false> | PromptsSelect<true>;
    settings: SettingsSelect<false> | SettingsSelect<true>;
    types: TypesSelect<false> | TypesSelect<true>;
    modules: ModulesSelect<false> | ModulesSelect<true>;
    packages: PackagesSelect<false> | PackagesSelect<true>;
    deployments: DeploymentsSelect<false> | DeploymentsSelect<true>;
    benchmarks: BenchmarksSelect<false> | BenchmarksSelect<true>;
    evals: EvalsSelect<false> | EvalsSelect<true>;
    evalRuns: EvalRunsSelect<false> | EvalRunsSelect<true>;
    evalResults: EvalResultsSelect<false> | EvalResultsSelect<true>;
    datasets: DatasetsSelect<false> | DatasetsSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    errors: ErrorsSelect<false> | ErrorsSelect<true>;
    generations: GenerationsSelect<false> | GenerationsSelect<true>;
    traces: TracesSelect<false> | TracesSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    roles: RolesSelect<false> | RolesSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    webhooks: WebhooksSelect<false> | WebhooksSelect<true>;
    apikeys: ApikeysSelect<false> | ApikeysSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user:
    | (User & {
        collection: 'users';
      })
    | (Apikey & {
        collection: 'apikeys';
      });
  jobs: {
    tasks: {
      executeFunction: TaskExecuteFunction;
      generateCode: TaskGenerateCode;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: {
      handleGithubEvent: WorkflowHandleGithubEvent;
    };
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface ApikeyAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "functions".
 */
export interface Function {
  id: string;
  name?: string | null;
  type: 'Generation' | 'Code' | 'Human' | 'Agent';
  format?: ('Object' | 'ObjectArray' | 'Text' | 'TextArray' | 'Markdown' | 'Code') | null;
  schema?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  code?: string | null;
  prompt?: (string | null) | Prompt;
  role?: string | null;
  user?: (string | null) | User;
  agent?: (string | null) | Agent;
  actions?: {
    docs?: (string | Action)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "prompts".
 */
export interface Prompt {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  image?: string | null;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "agents".
 */
export interface Agent {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "actions".
 */
export interface Action {
  id: string;
  subject?: (string | null) | Thing;
  verb?: (string | null) | Verb;
  function?: (string | null) | Function;
  object?: (string | null) | Thing;
  hash?: string | null;
  generation?: {
    docs?: (string | Generation)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "things".
 */
export interface Thing {
  id: string;
  name?: string | null;
  sqid?: string | null;
  hash?: string | null;
  type?: (string | null) | Noun;
  yaml?: string | null;
  data?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  subjectOf?: {
    docs?: (string | Action)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  objectOf?: {
    docs?: (string | Action)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "nouns".
 */
export interface Noun {
  id: string;
  name?: string | null;
  things?: {
    docs?: (string | Thing)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "verbs".
 */
export interface Verb {
  id: string;
  /**
   * Active tense like Create
   */
  action?: string | null;
  /**
   * Third person singular present tense like Creates
   */
  act?: string | null;
  /**
   * Gerund like Creating
   */
  activity?: string | null;
  /**
   * Past tense like Created
   */
  event?: string | null;
  /**
   * Subject like Creator
   */
  subject?: string | null;
  /**
   * Object like Creation
   */
  object?: string | null;
  /**
   * Opposite like Destroy
   */
  inverse?: string | null;
  /**
   * Third person singular present tense like Destroys
   */
  inverseAct?: string | null;
  /**
   * Gerund like Destroying
   */
  inverseActivity?: string | null;
  /**
   * Past tense like Destroyed
   */
  inverseEvent?: string | null;
  /**
   * Subject like Destroyer
   */
  inverseSubject?: string | null;
  /**
   * Object like Destruction
   */
  inverseObject?: string | null;
  actions?: {
    docs?: (string | Action)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "generations".
 */
export interface Generation {
  id: string;
  action?: (string | null) | Action;
  settings?: (string | null) | Thing;
  request?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  response?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  status?: ('success' | 'error') | null;
  duration?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workflows".
 */
export interface Workflow {
  id: string;
  name?: string | null;
  type?: string | null;
  code?: string | null;
  functions?: (string | null) | Function;
  module?: (string | null) | Module;
  package?: (string | null) | Package;
  deployment?: (string | null) | Deployment;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "modules".
 */
export interface Module {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packages".
 */
export interface Package {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "deployments".
 */
export interface Deployment {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "queues".
 */
export interface Queue {
  id: string;
  name: string;
  role: string | Role;
  tasks?: {
    docs?: (string | Task)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "roles".
 */
export interface Role {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tasks".
 */
export interface Task {
  id: string;
  title: string;
  description?: string | null;
  queue?: (string | null) | Queue;
  parent?: (string | null) | Task;
  subtasks?: {
    docs?: (string | Task)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  dependentOn?: (string | Task)[] | null;
  dependents?: {
    docs?: (string | Task)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  assigned?:
    | (
        | {
            relationTo: 'users';
            value: string | User;
          }
        | {
            relationTo: 'roles';
            value: string | Role;
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrations".
 */
export interface Integration {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationCategories".
 */
export interface IntegrationCategory {
  id: string;
  category?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationTriggers".
 */
export interface IntegrationTrigger {
  id: string;
  display_name?: string | null;
  description?: string | null;
  payload?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  config?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationActions".
 */
export interface IntegrationAction {
  id: string;
  displayName?: string | null;
  description?: string | null;
  parameters?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  response?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "connections".
 */
export interface Connection {
  id: string;
  name?: string | null;
  user: string | User;
  integration: string | Integration;
  status?: ('active' | 'inactive' | 'pending') | null;
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "triggers".
 */
export interface Trigger {
  id: string;
  name?: string | null;
  payload?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  config?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "searches".
 */
export interface Search {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "experiments".
 */
export interface Experiment {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "models".
 */
export interface Model {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: string;
  name?: string | null;
  settings?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "types".
 */
export interface Type {
  id: string;
  name?: string | null;
  hash?: string | null;
  type?: string | null;
  json?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  schema?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "benchmarks".
 */
export interface Benchmark {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "evals".
 */
export interface Eval {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "evalRuns".
 */
export interface EvalRun {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "evalResults".
 */
export interface EvalResult {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "datasets".
 */
export interface Dataset {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Records of all significant occurrences within the platform
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: string;
  type?: string | null;
  source?: string | null;
  subject?: (string | null) | Thing;
  data?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  action?: (string | null) | Action;
  trigger?: (string | null) | Trigger;
  search?: (string | null) | Search;
  function?: (string | null) | Function;
  workflow?: (string | null) | Workflow;
  agent?: (string | null) | Agent;
  generations?: (string | Generation)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "errors".
 */
export interface Error {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "traces".
 */
export interface Trace {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: string;
  name?: string | null;
  domain?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "webhooks".
 */
export interface Webhook {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "apikeys".
 */
export interface Apikey {
  id: string;
  name?: string | null;
  description?: string | null;
  url?: string | null;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'executeFunction' | 'generateCode';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        parent?: {
          taskSlug?: ('inline' | 'executeFunction' | 'generateCode') | null;
          taskID?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  workflowSlug?: 'handleGithubEvent' | null;
  taskSlug?: ('inline' | 'executeFunction' | 'generateCode') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'functions';
        value: string | Function;
      } | null)
    | ({
        relationTo: 'workflows';
        value: string | Workflow;
      } | null)
    | ({
        relationTo: 'agents';
        value: string | Agent;
      } | null)
    | ({
        relationTo: 'queues';
        value: string | Queue;
      } | null)
    | ({
        relationTo: 'tasks';
        value: string | Task;
      } | null)
    | ({
        relationTo: 'nouns';
        value: string | Noun;
      } | null)
    | ({
        relationTo: 'verbs';
        value: string | Verb;
      } | null)
    | ({
        relationTo: 'things';
        value: string | Thing;
      } | null)
    | ({
        relationTo: 'integrations';
        value: string | Integration;
      } | null)
    | ({
        relationTo: 'integrationCategories';
        value: string | IntegrationCategory;
      } | null)
    | ({
        relationTo: 'integrationTriggers';
        value: string | IntegrationTrigger;
      } | null)
    | ({
        relationTo: 'integrationActions';
        value: string | IntegrationAction;
      } | null)
    | ({
        relationTo: 'connections';
        value: string | Connection;
      } | null)
    | ({
        relationTo: 'triggers';
        value: string | Trigger;
      } | null)
    | ({
        relationTo: 'searches';
        value: string | Search;
      } | null)
    | ({
        relationTo: 'actions';
        value: string | Action;
      } | null)
    | ({
        relationTo: 'experiments';
        value: string | Experiment;
      } | null)
    | ({
        relationTo: 'models';
        value: string | Model;
      } | null)
    | ({
        relationTo: 'prompts';
        value: string | Prompt;
      } | null)
    | ({
        relationTo: 'settings';
        value: string | Setting;
      } | null)
    | ({
        relationTo: 'types';
        value: string | Type;
      } | null)
    | ({
        relationTo: 'modules';
        value: string | Module;
      } | null)
    | ({
        relationTo: 'packages';
        value: string | Package;
      } | null)
    | ({
        relationTo: 'deployments';
        value: string | Deployment;
      } | null)
    | ({
        relationTo: 'benchmarks';
        value: string | Benchmark;
      } | null)
    | ({
        relationTo: 'evals';
        value: string | Eval;
      } | null)
    | ({
        relationTo: 'evalRuns';
        value: string | EvalRun;
      } | null)
    | ({
        relationTo: 'evalResults';
        value: string | EvalResult;
      } | null)
    | ({
        relationTo: 'datasets';
        value: string | Dataset;
      } | null)
    | ({
        relationTo: 'events';
        value: string | Event;
      } | null)
    | ({
        relationTo: 'errors';
        value: string | Error;
      } | null)
    | ({
        relationTo: 'generations';
        value: string | Generation;
      } | null)
    | ({
        relationTo: 'traces';
        value: string | Trace;
      } | null)
    | ({
        relationTo: 'projects';
        value: string | Project;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'roles';
        value: string | Role;
      } | null)
    | ({
        relationTo: 'tags';
        value: string | Tag;
      } | null)
    | ({
        relationTo: 'webhooks';
        value: string | Webhook;
      } | null)
    | ({
        relationTo: 'apikeys';
        value: string | Apikey;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'apikeys';
        value: string | Apikey;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'apikeys';
        value: string | Apikey;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "functions_select".
 */
export interface FunctionsSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  format?: T;
  schema?: T;
  code?: T;
  prompt?: T;
  role?: T;
  user?: T;
  agent?: T;
  actions?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workflows_select".
 */
export interface WorkflowsSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  code?: T;
  functions?: T;
  module?: T;
  package?: T;
  deployment?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "agents_select".
 */
export interface AgentsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "queues_select".
 */
export interface QueuesSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  tasks?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tasks_select".
 */
export interface TasksSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  queue?: T;
  parent?: T;
  subtasks?: T;
  dependentOn?: T;
  dependents?: T;
  assigned?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "nouns_select".
 */
export interface NounsSelect<T extends boolean = true> {
  name?: T;
  things?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "verbs_select".
 */
export interface VerbsSelect<T extends boolean = true> {
  action?: T;
  act?: T;
  activity?: T;
  event?: T;
  subject?: T;
  object?: T;
  inverse?: T;
  inverseAct?: T;
  inverseActivity?: T;
  inverseEvent?: T;
  inverseSubject?: T;
  inverseObject?: T;
  actions?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "things_select".
 */
export interface ThingsSelect<T extends boolean = true> {
  name?: T;
  sqid?: T;
  hash?: T;
  type?: T;
  yaml?: T;
  data?: T;
  subjectOf?: T;
  objectOf?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrations_select".
 */
export interface IntegrationsSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationCategories_select".
 */
export interface IntegrationCategoriesSelect<T extends boolean = true> {
  category?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationTriggers_select".
 */
export interface IntegrationTriggersSelect<T extends boolean = true> {
  display_name?: T;
  description?: T;
  payload?: T;
  config?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationActions_select".
 */
export interface IntegrationActionsSelect<T extends boolean = true> {
  displayName?: T;
  description?: T;
  parameters?: T;
  response?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "connections_select".
 */
export interface ConnectionsSelect<T extends boolean = true> {
  name?: T;
  user?: T;
  integration?: T;
  status?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "triggers_select".
 */
export interface TriggersSelect<T extends boolean = true> {
  name?: T;
  payload?: T;
  config?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "searches_select".
 */
export interface SearchesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "actions_select".
 */
export interface ActionsSelect<T extends boolean = true> {
  subject?: T;
  verb?: T;
  function?: T;
  object?: T;
  hash?: T;
  generation?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "experiments_select".
 */
export interface ExperimentsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "models_select".
 */
export interface ModelsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "prompts_select".
 */
export interface PromptsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings_select".
 */
export interface SettingsSelect<T extends boolean = true> {
  name?: T;
  settings?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "types_select".
 */
export interface TypesSelect<T extends boolean = true> {
  name?: T;
  hash?: T;
  type?: T;
  json?: T;
  schema?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "modules_select".
 */
export interface ModulesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packages_select".
 */
export interface PackagesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "deployments_select".
 */
export interface DeploymentsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "benchmarks_select".
 */
export interface BenchmarksSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "evals_select".
 */
export interface EvalsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "evalRuns_select".
 */
export interface EvalRunsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "evalResults_select".
 */
export interface EvalResultsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "datasets_select".
 */
export interface DatasetsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  type?: T;
  source?: T;
  subject?: T;
  data?: T;
  metadata?: T;
  action?: T;
  trigger?: T;
  search?: T;
  function?: T;
  workflow?: T;
  agent?: T;
  generations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "errors_select".
 */
export interface ErrorsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "generations_select".
 */
export interface GenerationsSelect<T extends boolean = true> {
  action?: T;
  settings?: T;
  request?: T;
  response?: T;
  error?: T;
  status?: T;
  duration?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "traces_select".
 */
export interface TracesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  name?: T;
  domain?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  image?: T;
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "roles_select".
 */
export interface RolesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  id?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "webhooks_select".
 */
export interface WebhooksSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "apikeys_select".
 */
export interface ApikeysSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  url?: T;
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        parent?:
          | T
          | {
              taskSlug?: T;
              taskID?: T;
            };
        id?: T;
      };
  workflowSlug?: T;
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskExecuteFunction".
 */
export interface TaskExecuteFunction {
  input: {
    functionName: string;
    args:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    project?: string | null;
    schema?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    settings?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    timeout?: number | null;
    seeds?: number | null;
    callback?: string | null;
  };
  output: {
    output?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    reasoning?: string | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskGenerateCode".
 */
export interface TaskGenerateCode {
  input: {
    prompt: string;
    settings?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  output: {
    raw?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    code?: string | null;
    parsed?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "WorkflowHandleGithubEvent".
 */
export interface WorkflowHandleGithubEvent {
  input: {
    payload:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}
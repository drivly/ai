/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
    apikeys: ApikeyAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    accounts: Account;
    sessions: Session;
    verifications: Verification;
    apiKeys: ApiKey;
    functions: Function;
    workflows: Workflow;
    agents: Agent;
    queues: Queue;
    tasks: Task;
    goals: Goal;
    nouns: Noun;
    verbs: Verb;
    resources: Resource;
    databases: Database;
    integrationCategories: IntegrationCategory;
    integrations: Integration;
    connections: Connection;
    integrationTriggers: IntegrationTrigger;
    integrationActions: IntegrationAction;
    triggers: Trigger;
    searches: Search;
    actions: Action;
    experiments: Experiment;
    models: Model;
    prompts: Prompt;
    settings: Setting;
    types: Type;
    modules: Module;
    packages: Package;
    deployments: Deployment;
    benchmarks: Benchmark;
    evals: Eval;
    evalRuns: EvalRun;
    evalResults: EvalResult;
    datasets: Dataset;
    events: Event;
    errors: Error;
    generations: Generation;
    'generation-batches': GenerationBatch;
    traces: Trace;
    kpis: Kpi;
    projects: Project;
    domains: Domain;
    roles: Role;
    tags: Tag;
    webhooks: Webhook;
    apikeys: Apikey;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    queues: {
      tasks: 'tasks';
    };
    tasks: {
      subtasks: 'tasks';
      dependents: 'tasks';
    };
    nouns: {
      resources: 'resources';
    };
    actions: {
      generation: 'generations';
    };
    kpis: {
      goals: 'goals';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    accounts: AccountsSelect<false> | AccountsSelect<true>;
    sessions: SessionsSelect<false> | SessionsSelect<true>;
    verifications: VerificationsSelect<false> | VerificationsSelect<true>;
    apiKeys: ApiKeysSelect<false> | ApiKeysSelect<true>;
    functions: FunctionsSelect<false> | FunctionsSelect<true>;
    workflows: WorkflowsSelect<false> | WorkflowsSelect<true>;
    agents: AgentsSelect<false> | AgentsSelect<true>;
    queues: QueuesSelect<false> | QueuesSelect<true>;
    tasks: TasksSelect<false> | TasksSelect<true>;
    goals: GoalsSelect<false> | GoalsSelect<true>;
    nouns: NounsSelect<false> | NounsSelect<true>;
    verbs: VerbsSelect<false> | VerbsSelect<true>;
    resources: ResourcesSelect<false> | ResourcesSelect<true>;
    databases: DatabasesSelect<false> | DatabasesSelect<true>;
    integrationCategories: IntegrationCategoriesSelect<false> | IntegrationCategoriesSelect<true>;
    integrations: IntegrationsSelect<false> | IntegrationsSelect<true>;
    connections: ConnectionsSelect<false> | ConnectionsSelect<true>;
    integrationTriggers: IntegrationTriggersSelect<false> | IntegrationTriggersSelect<true>;
    integrationActions: IntegrationActionsSelect<false> | IntegrationActionsSelect<true>;
    triggers: TriggersSelect<false> | TriggersSelect<true>;
    searches: SearchesSelect<false> | SearchesSelect<true>;
    actions: ActionsSelect<false> | ActionsSelect<true>;
    experiments: ExperimentsSelect<false> | ExperimentsSelect<true>;
    models: ModelsSelect<false> | ModelsSelect<true>;
    prompts: PromptsSelect<false> | PromptsSelect<true>;
    settings: SettingsSelect<false> | SettingsSelect<true>;
    types: TypesSelect<false> | TypesSelect<true>;
    modules: ModulesSelect<false> | ModulesSelect<true>;
    packages: PackagesSelect<false> | PackagesSelect<true>;
    deployments: DeploymentsSelect<false> | DeploymentsSelect<true>;
    benchmarks: BenchmarksSelect<false> | BenchmarksSelect<true>;
    evals: EvalsSelect<false> | EvalsSelect<true>;
    evalRuns: EvalRunsSelect<false> | EvalRunsSelect<true>;
    evalResults: EvalResultsSelect<false> | EvalResultsSelect<true>;
    datasets: DatasetsSelect<false> | DatasetsSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    errors: ErrorsSelect<false> | ErrorsSelect<true>;
    generations: GenerationsSelect<false> | GenerationsSelect<true>;
    'generation-batches': GenerationBatchesSelect<false> | GenerationBatchesSelect<true>;
    traces: TracesSelect<false> | TracesSelect<true>;
    kpis: KpisSelect<false> | KpisSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    domains: DomainsSelect<false> | DomainsSelect<true>;
    roles: RolesSelect<false> | RolesSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    webhooks: WebhooksSelect<false> | WebhooksSelect<true>;
    apikeys: ApikeysSelect<false> | ApikeysSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user:
    | (User & {
        collection: 'users';
      })
    | (Apikey & {
        collection: 'apikeys';
      });
  jobs: {
    tasks: {
      executeFunction: TaskExecuteFunction;
      generateCode: TaskGenerateCode;
      executeCodeFunction: TaskExecuteCodeFunction;
      generateResourceEmbedding: TaskGenerateResourceEmbedding;
      generateThingEmbedding: TaskGenerateThingEmbedding;
      searchThings: TaskSearchThings;
      hybridSearchThings: TaskHybridSearchThings;
      processCodeFunctionWrapper: TaskProcessCodeFunctionWrapper;
      processCodeFunction: TaskProcessCodeFunction;
      inflectNouns: TaskInflectNouns;
      conjugateVerbs: TaskConjugateVerbs;
      deployWorker: TaskDeployWorker;
      deliverWebhook: TaskDeliverWebhook;
      initiateComposioConnection: TaskInitiateComposioConnection;
      requestHumanFeedback: TaskRequestHumanFeedback;
      processDomain: TaskProcessDomain;
      processBatchOpenAI: TaskProcessBatchOpenAI;
      processBatchAnthropic: TaskProcessBatchAnthropic;
      processBatchGoogleVertexAI: TaskProcessBatchGoogleVertexAI;
      processBatchParasail: TaskProcessBatchParasail;
      createGenerationBatch: TaskCreateGenerationBatch;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: {
      handleGithubEvent: WorkflowHandleGithubEvent;
    };
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface ApikeyAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  /**
   * Users chosen display name
   */
  name?: string | null;
  /**
   * The email of the user
   */
  email: string;
  /**
   * Whether the email of the user has been verified
   */
  emailVerified: boolean;
  /**
   * The image of the user
   */
  image?: string | null;
  /**
   * The role of the user
   */
  role: 'admin' | 'user';
  updatedAt: string;
  createdAt: string;
  /**
   * Whether the user is banned from the platform
   */
  banned?: boolean | null;
  /**
   * The reason for the ban
   */
  banReason?: string | null;
  /**
   * The date and time when the ban will expire
   */
  banExpires?: string | null;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
}
/**
 * Accounts are used to store user accounts for authentication providers
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accounts".
 */
export interface Account {
  id: string;
  /**
   * The user that the account belongs to
   */
  user: string | User;
  /**
   * The id of the account as provided by the SSO or equal to userId for credential accounts
   */
  accountId: string;
  /**
   * The id of the provider as provided by the SSO
   */
  providerId: string;
  /**
   * The access token of the account. Returned by the provider
   */
  accessToken?: string | null;
  /**
   * The refresh token of the account. Returned by the provider
   */
  refreshToken?: string | null;
  /**
   * The date and time when the access token will expire
   */
  accessTokenExpiresAt?: string | null;
  /**
   * The date and time when the refresh token will expire
   */
  refreshTokenExpiresAt?: string | null;
  /**
   * The scope of the account. Returned by the provider
   */
  scope?: string | null;
  /**
   * The id token for the account. Returned by the provider
   */
  idToken?: string | null;
  /**
   * The hashed password of the account. Mainly used for email and password authentication
   */
  password?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Sessions are active sessions for users. They are used to authenticate users with a session token
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions".
 */
export interface Session {
  id: string;
  /**
   * The user that the session belongs to
   */
  user: string | User;
  /**
   * The unique session token
   */
  token: string;
  /**
   * The date and time when the session will expire
   */
  expiresAt: string;
  /**
   * The IP address of the device
   */
  ipAddress?: string | null;
  /**
   * The user agent information of the device
   */
  userAgent?: string | null;
  updatedAt: string;
  createdAt: string;
  /**
   * The admin who is impersonating this session
   */
  impersonatedBy?: (string | null) | User;
}
/**
 * Verifications are used to verify authentication requests
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "verifications".
 */
export interface Verification {
  id: string;
  /**
   * The identifier of the verification request
   */
  identifier: string;
  /**
   * The value to be verified
   */
  value: string;
  /**
   * The date and time when the verification request will expire
   */
  expiresAt: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * API keys are used to authenticate requests to the API.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "apiKeys".
 */
export interface ApiKey {
  id: string;
  /**
   * The name of the API key.
   */
  name?: string | null;
  /**
   * The starting characters of the API key. Useful for showing the first few characters of the API key in the UI for the users to easily identify.
   */
  start?: string | null;
  /**
   * The API Key prefix. Stored as plain text.
   */
  prefix?: string | null;
  /**
   * The hashed API key itself.
   */
  key: string;
  /**
   * The user associated with the API key.
   */
  user: string | User;
  /**
   * The interval to refill the key in milliseconds.
   */
  refillInterval?: number | null;
  /**
   * The amount to refill the remaining count of the key.
   */
  refillAmount?: number | null;
  /**
   * The date and time when the key was last refilled.
   */
  lastRefillAt?: string | null;
  /**
   * Whether the API key is enabled.
   */
  enabled?: boolean | null;
  /**
   * Whether the API key has rate limiting enabled.
   */
  rateLimitEnabled?: boolean | null;
  /**
   * The time window in milliseconds for the rate limit.
   */
  rateLimitTimeWindow?: number | null;
  /**
   * The maximum number of requests allowed within the rate limit time window.
   */
  rateLimitMax?: number | null;
  /**
   * The number of requests made within the rate limit time window.
   */
  requstCount: number;
  /**
   * The number of requests remaining.
   */
  remaining?: number | null;
  /**
   * The date and time of the last request made to the key.
   */
  lastRequest?: string | null;
  /**
   * The date and time of when the API key will expire.
   */
  expiresAt?: string | null;
  /**
   * The permissions for the API key.
   */
  permissions?: string | null;
  /**
   * Any additional metadata you want to store with the key.
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "functions".
 */
export interface Function {
  id: string;
  name: string;
  type?: ('Generation' | 'Code' | 'Human' | 'Agent') | null;
  /**
   * Make this function available to other users
   */
  public?: boolean | null;
  /**
   * Original function this was cloned from
   */
  clonedFrom?: (string | null) | Function;
  /**
   * Monetization settings for this function
   */
  pricing?: {
    /**
     * Enable monetization for this function
     */
    isMonetized?: boolean | null;
    /**
     * Price per use in USD cents (platform fee is 30% above LLM costs)
     */
    pricePerUse?: number | null;
    /**
     * Stripe Product ID (auto-generated)
     */
    stripeProductId?: string | null;
    /**
     * Stripe Price ID (auto-generated)
     */
    stripePriceId?: string | null;
  };
  format?: ('Object' | 'ObjectArray' | 'Text' | 'TextArray' | 'Markdown' | 'Code') | null;
  schemaYaml?: string | null;
  shape?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  code?: string | null;
  prompt?: (string | null) | Prompt;
  role?: string | null;
  user?: (string | null) | User;
  agent?: (string | null) | Agent;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "prompts".
 */
export interface Prompt {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "agents".
 */
export interface Agent {
  id: string;
  name?: string | null;
  /**
   * Make this agent available to other users
   */
  public?: boolean | null;
  /**
   * Original agent this was cloned from
   */
  clonedFrom?: (string | null) | Agent;
  /**
   * Monetization settings for this agent
   */
  pricing?: {
    /**
     * Enable monetization for this agent
     */
    isMonetized?: boolean | null;
    /**
     * Price per use in USD cents (platform fee is 30% above LLM costs)
     */
    pricePerUse?: number | null;
    /**
     * Stripe Product ID (auto-generated)
     */
    stripeProductId?: string | null;
    /**
     * Stripe Price ID (auto-generated)
     */
    stripePriceId?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workflows".
 */
export interface Workflow {
  id: string;
  name?: string | null;
  type?: string | null;
  code?: string | null;
  functions?: (string | null) | Function;
  module?: (string | null) | Module;
  package?: (string | null) | Package;
  deployment?: (string | null) | Deployment;
  /**
   * Make this workflow available to other users
   */
  public?: boolean | null;
  /**
   * Original workflow this was cloned from
   */
  clonedFrom?: (string | null) | Workflow;
  /**
   * Monetization settings for this workflow
   */
  pricing?: {
    /**
     * Enable monetization for this workflow
     */
    isMonetized?: boolean | null;
    /**
     * Price per use in USD cents (platform fee is 30% above LLM costs)
     */
    pricePerUse?: number | null;
    /**
     * Stripe Product ID (auto-generated)
     */
    stripeProductId?: string | null;
    /**
     * Stripe Price ID (auto-generated)
     */
    stripePriceId?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "modules".
 */
export interface Module {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packages".
 */
export interface Package {
  id: string;
  name?: string | null;
  /**
   * The package.json content for publishing to NPM
   */
  package?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Collections to include in this package
   */
  collections?:
    | {
        /**
         * Collection slug to include
         */
        collection?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "deployments".
 */
export interface Deployment {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "queues".
 */
export interface Queue {
  id: string;
  name: string;
  role: string | Role;
  tasks?: {
    docs?: (string | Task)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "roles".
 */
export interface Role {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tasks".
 */
export interface Task {
  id: string;
  title: string;
  status?: ('todo' | 'in-progress' | 'ready-for-review' | 'completed') | null;
  queue?: (string | null) | Queue;
  assigned?:
    | (
        | {
            relationTo: 'users';
            value: string | User;
          }
        | {
            relationTo: 'roles';
            value: string | Role;
          }
        | {
            relationTo: 'agents';
            value: string | Agent;
          }
      )[]
    | null;
  parent?: (string | null) | Task;
  description?: string | null;
  subtasks?: {
    docs?: (string | Task)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  dependentOn?: (string | Task)[] | null;
  dependents?: {
    docs?: (string | Task)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  kanbanStatus?: ('backlog' | 'todo' | 'in-progress' | 'review' | 'done') | null;
  kanbanOrderRank?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "goals".
 */
export interface Goal {
  id: string;
  title: string;
  /**
   * The objective of this goal
   */
  object: string;
  keyResults: {
    description: string;
    value: number;
    kpiRelationship?: (string | null) | Kpi;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "kpis".
 */
export interface Kpi {
  id: string;
  name: string;
  goals?: {
    docs?: (string | Goal)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "nouns".
 */
export interface Noun {
  id: string;
  name?: string | null;
  /**
   * Singular form like User
   */
  singular?: string | null;
  /**
   * Plural form like Users
   */
  plural?: string | null;
  /**
   * Possessive form like User's
   */
  possessive?: string | null;
  /**
   * Plural possessive form like Users'
   */
  pluralPossessive?: string | null;
  /**
   * Related verb like Use
   */
  verb?: string | null;
  /**
   * Third person singular present tense like Uses
   */
  act?: string | null;
  /**
   * Gerund like Using
   */
  activity?: string | null;
  /**
   * Past tense like Used
   */
  event?: string | null;
  resources?: {
    docs?: (string | Resource)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "resources".
 */
export interface Resource {
  id: string;
  name?: string | null;
  sqid?: string | null;
  hash?: string | null;
  type?: (string | null) | Noun;
  yaml?: string | null;
  data?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  embedding?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  subjectOf?: (string | Action)[] | null;
  objectOf?: (string | Action)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "actions".
 */
export interface Action {
  id: string;
  subject?: (string | null) | Resource;
  verb?: (string | null) | Verb;
  object?: (string | null) | Resource;
  hash?: string | null;
  generation?: {
    docs?: (string | Generation)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "verbs".
 */
export interface Verb {
  id: string;
  /**
   * Active tense like Create
   */
  action?: string | null;
  /**
   * Third person singular present tense like Creates
   */
  act?: string | null;
  /**
   * Gerund like Creating
   */
  activity?: string | null;
  /**
   * Past tense like Created
   */
  event?: string | null;
  /**
   * Subject like Creator
   */
  subject?: string | null;
  /**
   * Object like Creation
   */
  object?: string | null;
  /**
   * Opposite like Destroy
   */
  inverse?: string | null;
  /**
   * Third person singular present tense like Destroys
   */
  inverseAct?: string | null;
  /**
   * Gerund like Destroying
   */
  inverseActivity?: string | null;
  /**
   * Past tense like Destroyed
   */
  inverseEvent?: string | null;
  /**
   * Subject like Destroyer
   */
  inverseSubject?: string | null;
  /**
   * Object like Destruction
   */
  inverseObject?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "generations".
 */
export interface Generation {
  id: string;
  action?: (string | null) | Action;
  settings?: (string | null) | Resource;
  request?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  response?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  status?: ('success' | 'error') | null;
  duration?: number | null;
  processingMode?: ('realtime' | 'batch') | null;
  batch?: (string | null) | GenerationBatch;
  updatedAt: string;
  createdAt: string;
}
/**
 * Batches of AI generation jobs
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "generation-batches".
 */
export interface GenerationBatch {
  id: string;
  name: string;
  provider: 'openai' | 'anthropic' | 'google' | 'parasail';
  status?: ('queued' | 'processing' | 'completed' | 'failed') | null;
  /**
   * Provider-specific batch configuration
   */
  batchConfig?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * ID of the batch job in the provider system
   */
  providerBatchId?: string | null;
  generations?: (string | Generation)[] | null;
  startedAt?: string | null;
  completedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "databases".
 */
export interface Database {
  id: string;
  name: string;
  domain: string;
  type: 'Integrated' | 'Dedicated' | 'Self-Hosted';
  schemaEnforcement: 'flexible' | 'enforced';
  databaseType?: ('Mongo' | 'Postgres' | 'Sqlite') | null;
  regions?:
    | (
        | 'us-east-1'
        | 'us-east-2'
        | 'us-west-1'
        | 'us-west-2'
        | 'eu-west-1'
        | 'ap-northeast-1'
        | 'ap-southeast-1'
        | 'eu-central-1'
        | 'ap-south-1'
      )
    | null;
  nouns?: (string | Noun)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationCategories".
 */
export interface IntegrationCategory {
  id: string;
  category?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrations".
 */
export interface Integration {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "connections".
 */
export interface Connection {
  id: string;
  name?: string | null;
  user: string | User;
  integration: string | Integration;
  status?: ('active' | 'inactive' | 'pending') | null;
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationTriggers".
 */
export interface IntegrationTrigger {
  id: string;
  displayName?: string | null;
  description?: string | null;
  appKey?: string | null;
  appName?: string | null;
  appId?: string | null;
  logo?: string | null;
  payload?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  config?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationActions".
 */
export interface IntegrationAction {
  id: string;
  displayName?: string | null;
  description?: string | null;
  appKey?: string | null;
  appName?: string | null;
  appId?: string | null;
  version?: string | null;
  parameters?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  response?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "triggers".
 */
export interface Trigger {
  id: string;
  name?: string | null;
  payload?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  config?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "searches".
 */
export interface Search {
  id: string;
  name?: string | null;
  query?: string | null;
  searchType?: ('text' | 'vector' | 'hybrid') | null;
  results?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  embedding?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "experiments".
 */
export interface Experiment {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "models".
 */
export interface Model {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: string;
  name?: string | null;
  settings?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "types".
 */
export interface Type {
  id: string;
  name?: string | null;
  hash?: string | null;
  type?: string | null;
  json?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  schema?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "benchmarks".
 */
export interface Benchmark {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "evals".
 */
export interface Eval {
  id: string;
  name: string;
  description?: string | null;
  /**
   * Input data for the evaluation test
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Expected output data for comparison
   */
  expected?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Tags for categorizing and filtering tests
   */
  tags?:
    | {
        tag?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "evalRuns".
 */
export interface EvalRun {
  id: string;
  name: string;
  description?: string | null;
  /**
   * References to evaluation tests included in this run
   */
  testIds?:
    | {
        test: string | Eval;
        id?: string | null;
      }[]
    | null;
  /**
   * References to evaluation results for this run
   */
  results?:
    | {
        result?: (string | null) | EvalResult;
        id?: string | null;
      }[]
    | null;
  /**
   * When the evaluation run started
   */
  startedAt?: string | null;
  /**
   * When the evaluation run completed
   */
  completedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "evalResults".
 */
export interface EvalResult {
  id: string;
  name: string;
  /**
   * Reference to the evaluation test this result is for
   */
  testId: string | Eval;
  /**
   * Output data from running the test
   */
  output?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Overall score for this evaluation result (0-1)
   */
  score?: number | null;
  /**
   * Detailed metrics for this evaluation result
   */
  metrics?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Duration of the test execution in milliseconds
   */
  duration?: number | null;
  /**
   * Error message if the test execution failed
   */
  error?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "datasets".
 */
export interface Dataset {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Records of all significant occurrences within the platform
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: string;
  type?: string | null;
  source?: string | null;
  subject?: (string | null) | Resource;
  data?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  action?: (string | null) | Action;
  trigger?: (string | null) | Trigger;
  search?: (string | null) | Search;
  function?: (string | null) | Function;
  workflow?: (string | null) | Workflow;
  agent?: (string | null) | Agent;
  generations?: (string | Generation)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "errors".
 */
export interface Error {
  id: string;
  message: string;
  /**
   * Error stack trace
   */
  stack?: string | null;
  /**
   * Error digest for identifying specific errors
   */
  digest?: string | null;
  /**
   * URL where the error occurred
   */
  url?: string | null;
  /**
   * Source of the error (client/server/etc)
   */
  source?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "traces".
 */
export interface Trace {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: string;
  name?: string | null;
  domain?: string | null;
  domains?: (string | Domain)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "domains".
 */
export interface Domain {
  id: string;
  name: string;
  domain: string;
  project: string | Project;
  status?: ('pending' | 'active' | 'error') | null;
  hostnames?:
    | {
        hostname?: string | null;
        id?: string | null;
      }[]
    | null;
  vercelId?: string | null;
  cloudflareId?: string | null;
  errorMessage?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "webhooks".
 */
export interface Webhook {
  id: string;
  name?: string | null;
  url: string;
  filters?:
    | {
        /**
         * Use Noun.Verb format (e.g., Listing.Created) or wildcards (e.g., Listing.* or *.Created)
         */
        pattern: string;
        id?: string | null;
      }[]
    | null;
  enabled?: boolean | null;
  secret?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "apikeys".
 */
export interface Apikey {
  id: string;
  name?: string | null;
  email?: string | null;
  description?: string | null;
  url?: string | null;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug:
          | 'inline'
          | 'executeFunction'
          | 'generateCode'
          | 'executeCodeFunction'
          | 'generateResourceEmbedding'
          | 'generateThingEmbedding'
          | 'searchThings'
          | 'hybridSearchThings'
          | 'processCodeFunctionWrapper'
          | 'processCodeFunction'
          | 'inflectNouns'
          | 'conjugateVerbs'
          | 'deployWorker'
          | 'deliverWebhook'
          | 'initiateComposioConnection'
          | 'requestHumanFeedback'
          | 'processDomain'
          | 'processBatchOpenAI'
          | 'processBatchAnthropic'
          | 'processBatchGoogleVertexAI'
          | 'processBatchParasail'
          | 'createGenerationBatch';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        parent?: {
          taskSlug?:
            | (
                | 'inline'
                | 'executeFunction'
                | 'generateCode'
                | 'executeCodeFunction'
                | 'generateResourceEmbedding'
                | 'generateThingEmbedding'
                | 'searchThings'
                | 'hybridSearchThings'
                | 'processCodeFunctionWrapper'
                | 'processCodeFunction'
                | 'inflectNouns'
                | 'conjugateVerbs'
                | 'deployWorker'
                | 'deliverWebhook'
                | 'initiateComposioConnection'
                | 'requestHumanFeedback'
                | 'processDomain'
                | 'processBatchOpenAI'
                | 'processBatchAnthropic'
                | 'processBatchGoogleVertexAI'
                | 'processBatchParasail'
                | 'createGenerationBatch'
              )
            | null;
          taskID?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  workflowSlug?: 'handleGithubEvent' | null;
  taskSlug?:
    | (
        | 'inline'
        | 'executeFunction'
        | 'generateCode'
        | 'executeCodeFunction'
        | 'generateResourceEmbedding'
        | 'generateThingEmbedding'
        | 'searchThings'
        | 'hybridSearchThings'
        | 'processCodeFunctionWrapper'
        | 'processCodeFunction'
        | 'inflectNouns'
        | 'conjugateVerbs'
        | 'deployWorker'
        | 'deliverWebhook'
        | 'initiateComposioConnection'
        | 'requestHumanFeedback'
        | 'processDomain'
        | 'processBatchOpenAI'
        | 'processBatchAnthropic'
        | 'processBatchGoogleVertexAI'
        | 'processBatchParasail'
        | 'createGenerationBatch'
      )
    | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'accounts';
        value: string | Account;
      } | null)
    | ({
        relationTo: 'sessions';
        value: string | Session;
      } | null)
    | ({
        relationTo: 'verifications';
        value: string | Verification;
      } | null)
    | ({
        relationTo: 'apiKeys';
        value: string | ApiKey;
      } | null)
    | ({
        relationTo: 'functions';
        value: string | Function;
      } | null)
    | ({
        relationTo: 'workflows';
        value: string | Workflow;
      } | null)
    | ({
        relationTo: 'agents';
        value: string | Agent;
      } | null)
    | ({
        relationTo: 'queues';
        value: string | Queue;
      } | null)
    | ({
        relationTo: 'tasks';
        value: string | Task;
      } | null)
    | ({
        relationTo: 'goals';
        value: string | Goal;
      } | null)
    | ({
        relationTo: 'nouns';
        value: string | Noun;
      } | null)
    | ({
        relationTo: 'verbs';
        value: string | Verb;
      } | null)
    | ({
        relationTo: 'resources';
        value: string | Resource;
      } | null)
    | ({
        relationTo: 'databases';
        value: string | Database;
      } | null)
    | ({
        relationTo: 'integrationCategories';
        value: string | IntegrationCategory;
      } | null)
    | ({
        relationTo: 'integrations';
        value: string | Integration;
      } | null)
    | ({
        relationTo: 'connections';
        value: string | Connection;
      } | null)
    | ({
        relationTo: 'integrationTriggers';
        value: string | IntegrationTrigger;
      } | null)
    | ({
        relationTo: 'integrationActions';
        value: string | IntegrationAction;
      } | null)
    | ({
        relationTo: 'triggers';
        value: string | Trigger;
      } | null)
    | ({
        relationTo: 'searches';
        value: string | Search;
      } | null)
    | ({
        relationTo: 'actions';
        value: string | Action;
      } | null)
    | ({
        relationTo: 'experiments';
        value: string | Experiment;
      } | null)
    | ({
        relationTo: 'models';
        value: string | Model;
      } | null)
    | ({
        relationTo: 'prompts';
        value: string | Prompt;
      } | null)
    | ({
        relationTo: 'settings';
        value: string | Setting;
      } | null)
    | ({
        relationTo: 'types';
        value: string | Type;
      } | null)
    | ({
        relationTo: 'modules';
        value: string | Module;
      } | null)
    | ({
        relationTo: 'packages';
        value: string | Package;
      } | null)
    | ({
        relationTo: 'deployments';
        value: string | Deployment;
      } | null)
    | ({
        relationTo: 'benchmarks';
        value: string | Benchmark;
      } | null)
    | ({
        relationTo: 'evals';
        value: string | Eval;
      } | null)
    | ({
        relationTo: 'evalRuns';
        value: string | EvalRun;
      } | null)
    | ({
        relationTo: 'evalResults';
        value: string | EvalResult;
      } | null)
    | ({
        relationTo: 'datasets';
        value: string | Dataset;
      } | null)
    | ({
        relationTo: 'events';
        value: string | Event;
      } | null)
    | ({
        relationTo: 'errors';
        value: string | Error;
      } | null)
    | ({
        relationTo: 'generations';
        value: string | Generation;
      } | null)
    | ({
        relationTo: 'generation-batches';
        value: string | GenerationBatch;
      } | null)
    | ({
        relationTo: 'traces';
        value: string | Trace;
      } | null)
    | ({
        relationTo: 'kpis';
        value: string | Kpi;
      } | null)
    | ({
        relationTo: 'projects';
        value: string | Project;
      } | null)
    | ({
        relationTo: 'domains';
        value: string | Domain;
      } | null)
    | ({
        relationTo: 'roles';
        value: string | Role;
      } | null)
    | ({
        relationTo: 'tags';
        value: string | Tag;
      } | null)
    | ({
        relationTo: 'webhooks';
        value: string | Webhook;
      } | null)
    | ({
        relationTo: 'apikeys';
        value: string | Apikey;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'apikeys';
        value: string | Apikey;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'apikeys';
        value: string | Apikey;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  email?: T;
  emailVerified?: T;
  image?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  banned?: T;
  banReason?: T;
  banExpires?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accounts_select".
 */
export interface AccountsSelect<T extends boolean = true> {
  user?: T;
  accountId?: T;
  providerId?: T;
  accessToken?: T;
  refreshToken?: T;
  accessTokenExpiresAt?: T;
  refreshTokenExpiresAt?: T;
  scope?: T;
  idToken?: T;
  password?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions_select".
 */
export interface SessionsSelect<T extends boolean = true> {
  user?: T;
  token?: T;
  expiresAt?: T;
  ipAddress?: T;
  userAgent?: T;
  updatedAt?: T;
  createdAt?: T;
  impersonatedBy?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "verifications_select".
 */
export interface VerificationsSelect<T extends boolean = true> {
  identifier?: T;
  value?: T;
  expiresAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "apiKeys_select".
 */
export interface ApiKeysSelect<T extends boolean = true> {
  name?: T;
  start?: T;
  prefix?: T;
  key?: T;
  user?: T;
  refillInterval?: T;
  refillAmount?: T;
  lastRefillAt?: T;
  enabled?: T;
  rateLimitEnabled?: T;
  rateLimitTimeWindow?: T;
  rateLimitMax?: T;
  requstCount?: T;
  remaining?: T;
  lastRequest?: T;
  expiresAt?: T;
  permissions?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "functions_select".
 */
export interface FunctionsSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  public?: T;
  clonedFrom?: T;
  pricing?:
    | T
    | {
        isMonetized?: T;
        pricePerUse?: T;
        stripeProductId?: T;
        stripePriceId?: T;
      };
  format?: T;
  schemaYaml?: T;
  shape?: T;
  code?: T;
  prompt?: T;
  role?: T;
  user?: T;
  agent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workflows_select".
 */
export interface WorkflowsSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  code?: T;
  functions?: T;
  module?: T;
  package?: T;
  deployment?: T;
  public?: T;
  clonedFrom?: T;
  pricing?:
    | T
    | {
        isMonetized?: T;
        pricePerUse?: T;
        stripeProductId?: T;
        stripePriceId?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "agents_select".
 */
export interface AgentsSelect<T extends boolean = true> {
  name?: T;
  public?: T;
  clonedFrom?: T;
  pricing?:
    | T
    | {
        isMonetized?: T;
        pricePerUse?: T;
        stripeProductId?: T;
        stripePriceId?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "queues_select".
 */
export interface QueuesSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  tasks?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tasks_select".
 */
export interface TasksSelect<T extends boolean = true> {
  title?: T;
  status?: T;
  queue?: T;
  assigned?: T;
  parent?: T;
  description?: T;
  subtasks?: T;
  dependentOn?: T;
  dependents?: T;
  kanbanStatus?: T;
  kanbanOrderRank?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "goals_select".
 */
export interface GoalsSelect<T extends boolean = true> {
  title?: T;
  object?: T;
  keyResults?:
    | T
    | {
        description?: T;
        value?: T;
        kpiRelationship?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "nouns_select".
 */
export interface NounsSelect<T extends boolean = true> {
  name?: T;
  singular?: T;
  plural?: T;
  possessive?: T;
  pluralPossessive?: T;
  verb?: T;
  act?: T;
  activity?: T;
  event?: T;
  resources?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "verbs_select".
 */
export interface VerbsSelect<T extends boolean = true> {
  action?: T;
  act?: T;
  activity?: T;
  event?: T;
  subject?: T;
  object?: T;
  inverse?: T;
  inverseAct?: T;
  inverseActivity?: T;
  inverseEvent?: T;
  inverseSubject?: T;
  inverseObject?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "resources_select".
 */
export interface ResourcesSelect<T extends boolean = true> {
  name?: T;
  sqid?: T;
  hash?: T;
  type?: T;
  yaml?: T;
  data?: T;
  embedding?: T;
  subjectOf?: T;
  objectOf?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "databases_select".
 */
export interface DatabasesSelect<T extends boolean = true> {
  name?: T;
  domain?: T;
  type?: T;
  schemaEnforcement?: T;
  databaseType?: T;
  regions?: T;
  nouns?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationCategories_select".
 */
export interface IntegrationCategoriesSelect<T extends boolean = true> {
  category?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrations_select".
 */
export interface IntegrationsSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "connections_select".
 */
export interface ConnectionsSelect<T extends boolean = true> {
  name?: T;
  user?: T;
  integration?: T;
  status?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationTriggers_select".
 */
export interface IntegrationTriggersSelect<T extends boolean = true> {
  displayName?: T;
  description?: T;
  appKey?: T;
  appName?: T;
  appId?: T;
  logo?: T;
  payload?: T;
  config?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationActions_select".
 */
export interface IntegrationActionsSelect<T extends boolean = true> {
  displayName?: T;
  description?: T;
  appKey?: T;
  appName?: T;
  appId?: T;
  version?: T;
  parameters?: T;
  response?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "triggers_select".
 */
export interface TriggersSelect<T extends boolean = true> {
  name?: T;
  payload?: T;
  config?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "searches_select".
 */
export interface SearchesSelect<T extends boolean = true> {
  name?: T;
  query?: T;
  searchType?: T;
  results?: T;
  embedding?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "actions_select".
 */
export interface ActionsSelect<T extends boolean = true> {
  subject?: T;
  verb?: T;
  object?: T;
  hash?: T;
  generation?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "experiments_select".
 */
export interface ExperimentsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "models_select".
 */
export interface ModelsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "prompts_select".
 */
export interface PromptsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings_select".
 */
export interface SettingsSelect<T extends boolean = true> {
  name?: T;
  settings?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "types_select".
 */
export interface TypesSelect<T extends boolean = true> {
  name?: T;
  hash?: T;
  type?: T;
  json?: T;
  schema?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "modules_select".
 */
export interface ModulesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packages_select".
 */
export interface PackagesSelect<T extends boolean = true> {
  name?: T;
  package?: T;
  collections?:
    | T
    | {
        collection?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "deployments_select".
 */
export interface DeploymentsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "benchmarks_select".
 */
export interface BenchmarksSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "evals_select".
 */
export interface EvalsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  input?: T;
  expected?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "evalRuns_select".
 */
export interface EvalRunsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  testIds?:
    | T
    | {
        test?: T;
        id?: T;
      };
  results?:
    | T
    | {
        result?: T;
        id?: T;
      };
  startedAt?: T;
  completedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "evalResults_select".
 */
export interface EvalResultsSelect<T extends boolean = true> {
  name?: T;
  testId?: T;
  output?: T;
  score?: T;
  metrics?: T;
  duration?: T;
  error?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "datasets_select".
 */
export interface DatasetsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  type?: T;
  source?: T;
  subject?: T;
  data?: T;
  metadata?: T;
  action?: T;
  trigger?: T;
  search?: T;
  function?: T;
  workflow?: T;
  agent?: T;
  generations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "errors_select".
 */
export interface ErrorsSelect<T extends boolean = true> {
  message?: T;
  stack?: T;
  digest?: T;
  url?: T;
  source?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "generations_select".
 */
export interface GenerationsSelect<T extends boolean = true> {
  action?: T;
  settings?: T;
  request?: T;
  response?: T;
  error?: T;
  status?: T;
  duration?: T;
  processingMode?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "generation-batches_select".
 */
export interface GenerationBatchesSelect<T extends boolean = true> {
  name?: T;
  provider?: T;
  status?: T;
  batchConfig?: T;
  providerBatchId?: T;
  generations?: T;
  startedAt?: T;
  completedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "traces_select".
 */
export interface TracesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "kpis_select".
 */
export interface KpisSelect<T extends boolean = true> {
  name?: T;
  goals?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  name?: T;
  domain?: T;
  domains?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "domains_select".
 */
export interface DomainsSelect<T extends boolean = true> {
  name?: T;
  domain?: T;
  project?: T;
  status?: T;
  hostnames?:
    | T
    | {
        hostname?: T;
        id?: T;
      };
  vercelId?: T;
  cloudflareId?: T;
  errorMessage?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "roles_select".
 */
export interface RolesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  id?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "webhooks_select".
 */
export interface WebhooksSelect<T extends boolean = true> {
  name?: T;
  url?: T;
  filters?:
    | T
    | {
        pattern?: T;
        id?: T;
      };
  enabled?: T;
  secret?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "apikeys_select".
 */
export interface ApikeysSelect<T extends boolean = true> {
  name?: T;
  email?: T;
  description?: T;
  url?: T;
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        parent?:
          | T
          | {
              taskSlug?: T;
              taskID?: T;
            };
        id?: T;
      };
  workflowSlug?: T;
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskExecuteFunction".
 */
export interface TaskExecuteFunction {
  input: {
    functionName: string;
    args:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    project?: string | null;
    schema?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    settings?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    timeout?: number | null;
    seeds?: number | null;
    callback?: string | null;
  };
  output: {
    output?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    reasoning?: string | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskGenerateCode".
 */
export interface TaskGenerateCode {
  input: {
    prompt: string;
    settings?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  output: {
    raw?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    code?: string | null;
    parsed?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskExecuteCodeFunction".
 */
export interface TaskExecuteCodeFunction {
  input: {
    code: string;
    args?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    timeout?: number | null;
    memoryLimit?: number | null;
  };
  output: {
    result?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    logs?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    error?: string | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskGenerateResourceEmbedding".
 */
export interface TaskGenerateResourceEmbedding {
  input: {
    id: string;
  };
  output: {
    resource?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskGenerateThingEmbedding".
 */
export interface TaskGenerateThingEmbedding {
  input: {
    id: string;
  };
  output: {
    thing?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSearchThings".
 */
export interface TaskSearchThings {
  input: {
    query: string;
    limit?: number | null;
  };
  output: {
    results?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskHybridSearchThings".
 */
export interface TaskHybridSearchThings {
  input: {
    query: string;
    limit?: number | null;
  };
  output: {
    results?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskProcessCodeFunctionWrapper".
 */
export interface TaskProcessCodeFunctionWrapper {
  input: {
    functionId: string;
  };
  output: {
    function?: string | null;
    taskId?: string | null;
    success?: boolean | null;
    error?: string | null;
    message?: string | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskProcessCodeFunction".
 */
export interface TaskProcessCodeFunction {
  input: {
    functionId: string;
  };
  output: {
    function?: string | null;
    moduleId?: string | null;
    packageId?: string | null;
    success?: boolean | null;
    error?: string | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskInflectNouns".
 */
export interface TaskInflectNouns {
  input: {
    noun: string;
  };
  output: {
    singular?: string | null;
    plural?: string | null;
    possessive?: string | null;
    pluralPossessive?: string | null;
    verb?: string | null;
    act?: string | null;
    activity?: string | null;
    event?: string | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskConjugateVerbs".
 */
export interface TaskConjugateVerbs {
  input: {
    verb: string;
  };
  output: {
    act?: string | null;
    activity?: string | null;
    event?: string | null;
    subject?: string | null;
    object?: string | null;
    inverse?: string | null;
    inverseAct?: string | null;
    inverseActivity?: string | null;
    inverseEvent?: string | null;
    inverseSubject?: string | null;
    inverseObject?: string | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskDeployWorker".
 */
export interface TaskDeployWorker {
  input: {
    worker:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    options?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  output: {
    result?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    deployment?: string | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskDeliverWebhook".
 */
export interface TaskDeliverWebhook {
  input: {
    event:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    webhookId: string;
  };
  output: {
    status?: string | null;
    message?: string | null;
    statusCode?: number | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskInitiateComposioConnection".
 */
export interface TaskInitiateComposioConnection {
  input: {
    integrationId: string;
    userId: string;
    taskId?: string | null;
    redirectUrl?: string | null;
  };
  output: {
    connection?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    authorization_url?: string | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskRequestHumanFeedback".
 */
export interface TaskRequestHumanFeedback {
  input: {
    taskId?: string | null;
    title: string;
    description: string;
    options?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    freeText?: boolean | null;
    platform?: ('slack' | 'teams' | 'discord') | null;
    userId?: string | null;
    roleId?: string | null;
    timeout?: number | null;
  };
  output: {
    taskId?: string | null;
    status?: string | null;
    response?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    messageId?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskProcessDomain".
 */
export interface TaskProcessDomain {
  input: {
    domainId: string;
    operation: string;
    domain?: string | null;
    vercelId?: string | null;
    cloudflareId?: string | null;
  };
  output: {};
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskProcessBatchOpenAI".
 */
export interface TaskProcessBatchOpenAI {
  input: {
    batchId: string;
    checkStatus?: boolean | null;
  };
  output: {
    status?: string | null;
    error?: string | null;
    batchStatus?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskProcessBatchAnthropic".
 */
export interface TaskProcessBatchAnthropic {
  input: {
    batchId: string;
    checkStatus?: boolean | null;
  };
  output: {
    status?: string | null;
    error?: string | null;
    batchStatus?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskProcessBatchGoogleVertexAI".
 */
export interface TaskProcessBatchGoogleVertexAI {
  input: {
    batchId: string;
    checkStatus?: boolean | null;
  };
  output: {
    status?: string | null;
    error?: string | null;
    batchStatus?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskProcessBatchParasail".
 */
export interface TaskProcessBatchParasail {
  input: {
    batchId: string;
    checkStatus?: boolean | null;
  };
  output: {
    status?: string | null;
    error?: string | null;
    batchStatus?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskCreateGenerationBatch".
 */
export interface TaskCreateGenerationBatch {
  input: {
    name: string;
    provider: string;
    batchConfig:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    generations?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  output: {
    success?: boolean | null;
    batchId?: string | null;
    jobId?: string | null;
    error?: string | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "WorkflowHandleGithubEvent".
 */
export interface WorkflowHandleGithubEvent {
  input: {
    payload:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}